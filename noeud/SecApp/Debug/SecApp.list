
SecApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cbc  08004cbc  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08004cbc  08004cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cc4  08004cc4  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08004ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000044  08004d10  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08004d10  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d566  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002417  00000000  00000000  0002d5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  0002f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  00030838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014a69  00000000  00000000  00031558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be0c  00000000  00000000  00045fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000817ce  00000000  00000000  00051dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d359b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b8  00000000  00000000  000d3618  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000044 	.word	0x20000044
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c14 	.word	0x08004c14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000048 	.word	0x20000048
 8000104:	08004c14 	.word	0x08004c14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_Init+0x3c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_Init+0x3c>)
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f811 	bl	8000478 <HAL_InitTick>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d003      	beq.n	8000462 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e001      	b.n	8000466 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000462:	f004 f9cd 	bl	8004800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
}
 800046a:	0018      	movs	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	0099      	lsls	r1, r3, #2
 8000490:	0010      	movs	r0, r2
 8000492:	f7ff fe39 	bl	8000108 <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 f918 	bl	80006ce <HAL_SYSTICK_Config>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d004      	beq.n	80004ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e006      	b.n	80004ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f8e5 	bl	8000684 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000040 	.word	0x20000040

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_IncTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_IncTick+0x14>)
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000060 	.word	0x20000060

080004e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return uwTick;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_GetTick+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000060 	.word	0x20000060

080004f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000500:	f7ff fff0 	bl	80004e4 <HAL_GetTick>
 8000504:	0003      	movs	r3, r0
 8000506:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	d002      	beq.n	8000518 <HAL_Delay+0x20>
  {
    wait++;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	f7ff ffe3 	bl	80004e4 <HAL_GetTick>
 800051e:	0002      	movs	r2, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8f7      	bhi.n	800051a <HAL_Delay+0x22>
  {
  }
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b004      	add	sp, #16
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	231f      	movs	r3, #31
 8000548:	401a      	ands	r2, r3
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <NVIC_EnableIRQ+0x28>)
 800054c:	2101      	movs	r1, #1
 800054e:	4091      	lsls	r1, r2
 8000550:	000a      	movs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}
 800055c:	e000e100 	.word	0xe000e100

08000560 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b7f      	cmp	r3, #127	; 0x7f
 8000574:	d932      	bls.n	80005dc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000576:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <NVIC_SetPriority+0xd4>)
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	0019      	movs	r1, r3
 800057e:	230f      	movs	r3, #15
 8000580:	400b      	ands	r3, r1
 8000582:	3b08      	subs	r3, #8
 8000584:	089b      	lsrs	r3, r3, #2
 8000586:	3306      	adds	r3, #6
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	18d3      	adds	r3, r2, r3
 800058c:	3304      	adds	r3, #4
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	1dfa      	adds	r2, r7, #7
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	0011      	movs	r1, r2
 8000596:	2203      	movs	r2, #3
 8000598:	400a      	ands	r2, r1
 800059a:	00d2      	lsls	r2, r2, #3
 800059c:	21ff      	movs	r1, #255	; 0xff
 800059e:	4091      	lsls	r1, r2
 80005a0:	000a      	movs	r2, r1
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	401a      	ands	r2, r3
 80005a6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	019b      	lsls	r3, r3, #6
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	401a      	ands	r2, r3
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	0018      	movs	r0, r3
 80005b6:	2303      	movs	r3, #3
 80005b8:	4003      	ands	r3, r0
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005be:	481d      	ldr	r0, [pc, #116]	; (8000634 <NVIC_SetPriority+0xd4>)
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	001c      	movs	r4, r3
 80005c6:	230f      	movs	r3, #15
 80005c8:	4023      	ands	r3, r4
 80005ca:	3b08      	subs	r3, #8
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	430a      	orrs	r2, r1
 80005d0:	3306      	adds	r3, #6
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	18c3      	adds	r3, r0, r3
 80005d6:	3304      	adds	r3, #4
 80005d8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005da:	e027      	b.n	800062c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005dc:	4a16      	ldr	r2, [pc, #88]	; (8000638 <NVIC_SetPriority+0xd8>)
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	33c0      	adds	r3, #192	; 0xc0
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	589b      	ldr	r3, [r3, r2]
 80005ec:	1dfa      	adds	r2, r7, #7
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	0011      	movs	r1, r2
 80005f2:	2203      	movs	r2, #3
 80005f4:	400a      	ands	r2, r1
 80005f6:	00d2      	lsls	r2, r2, #3
 80005f8:	21ff      	movs	r1, #255	; 0xff
 80005fa:	4091      	lsls	r1, r2
 80005fc:	000a      	movs	r2, r1
 80005fe:	43d2      	mvns	r2, r2
 8000600:	401a      	ands	r2, r3
 8000602:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	019b      	lsls	r3, r3, #6
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	401a      	ands	r2, r3
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	0018      	movs	r0, r3
 8000612:	2303      	movs	r3, #3
 8000614:	4003      	ands	r3, r0
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <NVIC_SetPriority+0xd8>)
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	430a      	orrs	r2, r1
 8000626:	33c0      	adds	r3, #192	; 0xc0
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	501a      	str	r2, [r3, r0]
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b003      	add	sp, #12
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000e100 	.word	0xe000e100

0800063c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <SysTick_Config+0x40>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d901      	bls.n	8000652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064e:	2301      	movs	r3, #1
 8000650:	e010      	b.n	8000674 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <SysTick_Config+0x44>)
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	3a01      	subs	r2, #1
 8000658:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065a:	2301      	movs	r3, #1
 800065c:	425b      	negs	r3, r3
 800065e:	2103      	movs	r1, #3
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ff7d 	bl	8000560 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <SysTick_Config+0x44>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <SysTick_Config+0x44>)
 800066e:	2207      	movs	r2, #7
 8000670:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000672:	2300      	movs	r3, #0
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	00ffffff 	.word	0x00ffffff
 8000680:	e000e010 	.word	0xe000e010

08000684 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	210f      	movs	r1, #15
 8000690:	187b      	adds	r3, r7, r1
 8000692:	1c02      	adds	r2, r0, #0
 8000694:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	187b      	adds	r3, r7, r1
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff ff5d 	bl	8000560 <NVIC_SetPriority>
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b004      	add	sp, #16
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	0002      	movs	r2, r0
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	0018      	movs	r0, r3
 80006c2:	f7ff ff37 	bl	8000534 <NVIC_EnableIRQ>
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff ffaf 	bl	800063c <SysTick_Config>
 80006de:	0003      	movs	r3, r0
}
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80006f0:	230f      	movs	r3, #15
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2225      	movs	r2, #37	; 0x25
 80006fc:	5c9b      	ldrb	r3, [r3, r2]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b02      	cmp	r3, #2
 8000702:	d007      	beq.n	8000714 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2204      	movs	r2, #4
 8000708:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800070a:	230f      	movs	r3, #15
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e02a      	b.n	800076a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	210e      	movs	r1, #14
 8000720:	438a      	bics	r2, r1
 8000722:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2101      	movs	r1, #1
 8000730:	438a      	bics	r2, r1
 8000732:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000738:	221c      	movs	r2, #28
 800073a:	401a      	ands	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	2101      	movs	r1, #1
 8000742:	4091      	lsls	r1, r2
 8000744:	000a      	movs	r2, r1
 8000746:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2225      	movs	r2, #37	; 0x25
 800074c:	2101      	movs	r1, #1
 800074e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2224      	movs	r2, #36	; 0x24
 8000754:	2100      	movs	r1, #0
 8000756:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075c:	2b00      	cmp	r3, #0
 800075e:	d004      	beq.n	800076a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	0010      	movs	r0, r2
 8000768:	4798      	blx	r3
    }
  }
  return status;
 800076a:	230f      	movs	r3, #15
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	781b      	ldrb	r3, [r3, #0]
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b004      	add	sp, #16
 8000776:	bd80      	pop	{r7, pc}

08000778 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <HAL_FLASH_Unlock+0x8c>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	2b01      	cmp	r3, #1
 8000788:	d118      	bne.n	80007bc <HAL_FLASH_Unlock+0x44>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800078a:	f3ef 8310 	mrs	r3, PRIMASK
 800078e:	60fb      	str	r3, [r7, #12]
  return(result);
 8000790:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8000792:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_FLASH_Unlock+0x8c>)
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <HAL_FLASH_Unlock+0x90>)
 800079a:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_FLASH_Unlock+0x8c>)
 800079e:	4a1b      	ldr	r2, [pc, #108]	; (800080c <HAL_FLASH_Unlock+0x94>)
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_FLASH_Unlock+0x8c>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2201      	movs	r2, #1
 80007b2:	4013      	ands	r3, r2
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d101      	bne.n	80007bc <HAL_FLASH_Unlock+0x44>
    {
      return HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e01f      	b.n	80007fc <HAL_FLASH_Unlock+0x84>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <HAL_FLASH_Unlock+0x8c>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	2202      	movs	r2, #2
 80007c2:	4013      	ands	r3, r2
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d118      	bne.n	80007fa <HAL_FLASH_Unlock+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80007c8:	f3ef 8310 	mrs	r3, PRIMASK
 80007cc:	607b      	str	r3, [r7, #4]
  return(result);
 80007ce:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80007d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80007d2:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_FLASH_Unlock+0x8c>)
 80007d6:	4a0e      	ldr	r2, [pc, #56]	; (8000810 <HAL_FLASH_Unlock+0x98>)
 80007d8:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_FLASH_Unlock+0x8c>)
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <HAL_FLASH_Unlock+0x9c>)
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_FLASH_Unlock+0x8c>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	2202      	movs	r2, #2
 80007f0:	4013      	ands	r3, r2
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d101      	bne.n	80007fa <HAL_FLASH_Unlock+0x82>
    {
      return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e000      	b.n	80007fc <HAL_FLASH_Unlock+0x84>
    }
  }

  return HAL_OK; 
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	b006      	add	sp, #24
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40022000 	.word	0x40022000
 8000808:	89abcdef 	.word	0x89abcdef
 800080c:	02030405 	.word	0x02030405
 8000810:	8c9daebf 	.word	0x8c9daebf
 8000814:	13141516 	.word	0x13141516

08000818 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <HAL_FLASH_Lock+0x24>)
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_FLASH_Lock+0x24>)
 8000822:	2102      	movs	r1, #2
 8000824:	430a      	orrs	r2, r1
 8000826:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <HAL_FLASH_Lock+0x24>)
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <HAL_FLASH_Lock+0x24>)
 800082e:	2101      	movs	r1, #1
 8000830:	430a      	orrs	r2, r1
 8000832:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8000834:	2300      	movs	r3, #0
}
 8000836:	0018      	movs	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_OPTLOCK))
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_FLASH_OB_Unlock+0x5c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2204      	movs	r2, #4
 800084c:	4013      	ands	r3, r2
 800084e:	2b04      	cmp	r3, #4
 8000850:	d11e      	bne.n	8000890 <HAL_FLASH_OB_Unlock+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000852:	f3ef 8310 	mrs	r3, PRIMASK
 8000856:	60bb      	str	r3, [r7, #8]
  return(result);
 8000858:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800085a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_FLASH_OB_Unlock+0x5c>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2201      	movs	r2, #1
 8000864:	4013      	ands	r3, r2
 8000866:	2b01      	cmp	r3, #1
 8000868:	d105      	bne.n	8000876 <HAL_FLASH_OB_Unlock+0x36>
    {  
      /* Unlocking FLASH_PECR register access*/
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_FLASH_OB_Unlock+0x5c>)
 800086c:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <HAL_FLASH_OB_Unlock+0x60>)
 800086e:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_FLASH_OB_Unlock+0x5c>)
 8000872:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <HAL_FLASH_OB_Unlock+0x64>)
 8000874:	60da      	str	r2, [r3, #12]
    }

    /* Unlocking the option bytes block access */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_FLASH_OB_Unlock+0x5c>)
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <HAL_FLASH_OB_Unlock+0x68>)
 800087a:	615a      	str	r2, [r3, #20]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <HAL_FLASH_OB_Unlock+0x5c>)
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <HAL_FLASH_OB_Unlock+0x6c>)
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f383 8810 	msr	PRIMASK, r3
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800088c:	2300      	movs	r3, #0
 800088e:	e000      	b.n	8000892 <HAL_FLASH_OB_Unlock+0x52>
    return HAL_ERROR;
 8000890:	2301      	movs	r3, #1
}
 8000892:	0018      	movs	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	b004      	add	sp, #16
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40022000 	.word	0x40022000
 80008a0:	89abcdef 	.word	0x89abcdef
 80008a4:	02030405 	.word	0x02030405
 80008a8:	fbead9c8 	.word	0xfbead9c8
 80008ac:	24252627 	.word	0x24252627

080008b0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the option bytes block access */
  SET_BIT(FLASH->PECR, FLASH_PECR_OPTLOCK);
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <HAL_FLASH_OB_Lock+0x18>)
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_FLASH_OB_Lock+0x18>)
 80008ba:	2104      	movs	r1, #4
 80008bc:	430a      	orrs	r2, r1
 80008be:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;  
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40022000 	.word	0x40022000

080008cc <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* Set the OBL_Launch bit to launch the option byte loading */
  SET_BIT(FLASH->PECR, FLASH_PECR_OBL_LAUNCH);
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <HAL_FLASH_OB_Launch+0x24>)
 80008d2:	685a      	ldr	r2, [r3, #4]
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_FLASH_OB_Launch+0x24>)
 80008d6:	2180      	movs	r1, #128	; 0x80
 80008d8:	02c9      	lsls	r1, r1, #11
 80008da:	430a      	orrs	r2, r1
 80008dc:	605a      	str	r2, [r3, #4]
  
  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE));
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_FLASH_OB_Launch+0x28>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 f809 	bl	80008f8 <FLASH_WaitForLastOperation>
 80008e6:	0003      	movs	r3, r0
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40022000 	.word	0x40022000
 80008f4:	0000c350 	.word	0x0000c350

080008f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000900:	f7ff fdf0 	bl	80004e4 <HAL_GetTick>
 8000904:	0003      	movs	r3, r0
 8000906:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000908:	e00f      	b.n	800092a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3301      	adds	r3, #1
 800090e:	d00c      	beq.n	800092a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d007      	beq.n	8000926 <FLASH_WaitForLastOperation+0x2e>
 8000916:	f7ff fde5 	bl	80004e4 <HAL_GetTick>
 800091a:	0002      	movs	r2, r0
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	d201      	bcs.n	800092a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000926:	2303      	movs	r3, #3
 8000928:	e052      	b.n	80009d0 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800092a:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <FLASH_WaitForLastOperation+0xe0>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	2201      	movs	r2, #1
 8000930:	4013      	ands	r3, r2
 8000932:	2b01      	cmp	r3, #1
 8000934:	d0e9      	beq.n	800090a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <FLASH_WaitForLastOperation+0xe0>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	2202      	movs	r2, #2
 800093c:	4013      	ands	r3, r2
 800093e:	2b02      	cmp	r3, #2
 8000940:	d102      	bne.n	8000948 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <FLASH_WaitForLastOperation+0xe0>)
 8000944:	2202      	movs	r2, #2
 8000946:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8000948:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <FLASH_WaitForLastOperation+0xe0>)
 800094a:	699a      	ldr	r2, [r3, #24]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	401a      	ands	r2, r3
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	429a      	cmp	r2, r3
 8000958:	d035      	beq.n	80009c6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <FLASH_WaitForLastOperation+0xe0>)
 800095c:	699a      	ldr	r2, [r3, #24]
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	429a      	cmp	r2, r3
 800096a:	d02c      	beq.n	80009c6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <FLASH_WaitForLastOperation+0xe0>)
 800096e:	699a      	ldr	r2, [r3, #24]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8000976:	2380      	movs	r3, #128	; 0x80
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	429a      	cmp	r2, r3
 800097c:	d023      	beq.n	80009c6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <FLASH_WaitForLastOperation+0xe0>)
 8000980:	699a      	ldr	r2, [r3, #24]
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	011b      	lsls	r3, r3, #4
 8000986:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	429a      	cmp	r2, r3
 800098e:	d01a      	beq.n	80009c6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <FLASH_WaitForLastOperation+0xe0>)
 8000992:	699a      	ldr	r2, [r3, #24]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	019b      	lsls	r3, r3, #6
 8000998:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	019b      	lsls	r3, r3, #6
 800099e:	429a      	cmp	r2, r3
 80009a0:	d011      	beq.n	80009c6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <FLASH_WaitForLastOperation+0xe0>)
 80009a4:	699a      	ldr	r2, [r3, #24]
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	029b      	lsls	r3, r3, #10
 80009aa:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	029b      	lsls	r3, r3, #10
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d008      	beq.n	80009c6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <FLASH_WaitForLastOperation+0xe0>)
 80009b6:	699a      	ldr	r2, [r3, #24]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	025b      	lsls	r3, r3, #9
 80009bc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	025b      	lsls	r3, r3, #9
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d103      	bne.n	80009ce <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80009c6:	f000 f809 	bl	80009dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b004      	add	sp, #16
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40022000 	.word	0x40022000

080009dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009e6:	4b49      	ldr	r3, [pc, #292]	; (8000b0c <FLASH_SetErrorCode+0x130>)
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	401a      	ands	r2, r3
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d10a      	bne.n	8000a0e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009f8:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	2202      	movs	r2, #2
 80009fe:	431a      	orrs	r2, r3
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000a02:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	0052      	lsls	r2, r2, #1
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8000a0e:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <FLASH_SetErrorCode+0x130>)
 8000a10:	699a      	ldr	r2, [r3, #24]
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	401a      	ands	r2, r3
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d10a      	bne.n	8000a36 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000a20:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	2201      	movs	r2, #1
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000a2a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	0092      	lsls	r2, r2, #2
 8000a32:	4313      	orrs	r3, r2
 8000a34:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8000a36:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <FLASH_SetErrorCode+0x130>)
 8000a38:	699a      	ldr	r2, [r3, #24]
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	401a      	ands	r2, r3
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d10a      	bne.n	8000a5e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8000a48:	4b31      	ldr	r3, [pc, #196]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000a52:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	00d2      	lsls	r2, r2, #3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <FLASH_SetErrorCode+0x130>)
 8000a60:	699a      	ldr	r2, [r3, #24]
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	011b      	lsls	r3, r3, #4
 8000a66:	401a      	ands	r2, r3
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d10a      	bne.n	8000a86 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	2204      	movs	r2, #4
 8000a76:	431a      	orrs	r2, r3
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000a7a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	4313      	orrs	r3, r2
 8000a84:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <FLASH_SetErrorCode+0x130>)
 8000a88:	699a      	ldr	r2, [r3, #24]
 8000a8a:	2380      	movs	r3, #128	; 0x80
 8000a8c:	019b      	lsls	r3, r3, #6
 8000a8e:	401a      	ands	r2, r3
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	019b      	lsls	r3, r3, #6
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d10a      	bne.n	8000aae <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000aa2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	0192      	lsls	r2, r2, #6
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <FLASH_SetErrorCode+0x130>)
 8000ab0:	699a      	ldr	r2, [r3, #24]
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	029b      	lsls	r3, r3, #10
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	029b      	lsls	r3, r3, #10
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d109      	bne.n	8000ad4 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000aca:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2220      	movs	r2, #32
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <FLASH_SetErrorCode+0x130>)
 8000ad6:	699a      	ldr	r2, [r3, #24]
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	025b      	lsls	r3, r3, #9
 8000adc:	401a      	ands	r2, r3
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	025b      	lsls	r3, r3, #9
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d10a      	bne.n	8000afc <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	2240      	movs	r2, #64	; 0x40
 8000aec:	431a      	orrs	r2, r3
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <FLASH_SetErrorCode+0x134>)
 8000af0:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2280      	movs	r2, #128	; 0x80
 8000af6:	0252      	lsls	r2, r2, #9
 8000af8:	4313      	orrs	r3, r2
 8000afa:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <FLASH_SetErrorCode+0x130>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	619a      	str	r2, [r3, #24]
}  
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40022000 	.word	0x40022000
 8000b10:	20000064 	.word	0x20000064

08000b14 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8000b14:	b5b0      	push	{r4, r5, r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b24:	4b4a      	ldr	r3, [pc, #296]	; (8000c50 <HAL_FLASHEx_OBProgram+0x13c>)
 8000b26:	7c1b      	ldrb	r3, [r3, #16]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d101      	bne.n	8000b30 <HAL_FLASHEx_OBProgram+0x1c>
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	e08b      	b.n	8000c48 <HAL_FLASHEx_OBProgram+0x134>
 8000b30:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <HAL_FLASHEx_OBProgram+0x13c>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d017      	beq.n	8000b70 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
#if defined(STM32L071xx) || defined(STM32L072xx) || defined(STM32L073xx) || defined(STM32L081xx) || defined(STM32L082xx) || defined(STM32L083xx)  
    status = FLASH_OB_ProtectedSectorsConfig(pOBInit->WRPSector, pOBInit->WRPSector2, pOBInit->WRPState);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6898      	ldr	r0, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68d9      	ldr	r1, [r3, #12]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	250f      	movs	r5, #15
 8000b4e:	197c      	adds	r4, r7, r5
 8000b50:	001a      	movs	r2, r3
 8000b52:	f000 fa71 	bl	8001038 <FLASH_OB_ProtectedSectorsConfig>
 8000b56:	0003      	movs	r3, r0
 8000b58:	7023      	strb	r3, [r4, #0]
#else
    status = FLASH_OB_ProtectedSectorsConfig(pOBInit->WRPSector, pOBInit->WRPState);
#endif
    if (status != HAL_OK)
 8000b5a:	197b      	adds	r3, r7, r5
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d006      	beq.n	8000b70 <HAL_FLASHEx_OBProgram+0x5c>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8000b62:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <HAL_FLASHEx_OBProgram+0x13c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	741a      	strb	r2, [r3, #16]
      return status;
 8000b68:	230f      	movs	r3, #15
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	e06b      	b.n	8000c48 <HAL_FLASHEx_OBProgram+0x134>
    }
  }
  
  /* Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2202      	movs	r2, #2
 8000b76:	4013      	ands	r3, r2
 8000b78:	d013      	beq.n	8000ba2 <HAL_FLASHEx_OBProgram+0x8e>
  {
    status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7c1b      	ldrb	r3, [r3, #16]
 8000b7e:	250f      	movs	r5, #15
 8000b80:	197c      	adds	r4, r7, r5
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f916 	bl	8000db4 <FLASH_OB_RDPConfig>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8000b8c:	197b      	adds	r3, r7, r5
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <HAL_FLASHEx_OBProgram+0x8e>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <HAL_FLASHEx_OBProgram+0x13c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	741a      	strb	r2, [r3, #16]
      return status;
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	e052      	b.n	8000c48 <HAL_FLASHEx_OBProgram+0x134>
    }
  }
  
  /* USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	4013      	ands	r3, r2
 8000baa:	d020      	beq.n	8000bee <HAL_FLASHEx_OBProgram+0xda>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	7c9b      	ldrb	r3, [r3, #18]
 8000bb0:	2210      	movs	r2, #16
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NORST,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7c9b      	ldrb	r3, [r3, #18]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 8000bba:	2220      	movs	r2, #32
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NORST);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7c9b      	ldrb	r3, [r3, #18]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 8000bc4:	2240      	movs	r2, #64	; 0x40
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	250f      	movs	r5, #15
 8000bcc:	197c      	adds	r4, r7, r5
 8000bce:	001a      	movs	r2, r3
 8000bd0:	f000 fae8 	bl	80011a4 <FLASH_OB_UserConfig>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8000bd8:	197b      	adds	r3, r7, r5
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d006      	beq.n	8000bee <HAL_FLASHEx_OBProgram+0xda>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_FLASHEx_OBProgram+0x13c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	741a      	strb	r2, [r3, #16]
      return status;
 8000be6:	230f      	movs	r3, #15
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	e02c      	b.n	8000c48 <HAL_FLASHEx_OBProgram+0x134>
    }
  }

  /* BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	d013      	beq.n	8000c20 <HAL_FLASHEx_OBProgram+0x10c>
  {
    status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7c5b      	ldrb	r3, [r3, #17]
 8000bfc:	250f      	movs	r5, #15
 8000bfe:	197c      	adds	r4, r7, r5
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 f929 	bl	8000e58 <FLASH_OB_BORConfig>
 8000c06:	0003      	movs	r3, r0
 8000c08:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8000c0a:	197b      	adds	r3, r7, r5
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d006      	beq.n	8000c20 <HAL_FLASHEx_OBProgram+0x10c>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_FLASHEx_OBProgram+0x13c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	741a      	strb	r2, [r3, #16]
      return status;
 8000c18:	230f      	movs	r3, #15
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	e013      	b.n	8000c48 <HAL_FLASHEx_OBProgram+0x134>
    }
  }

  /* Program BOOT Bit1 config option byte */
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_BIT1) == OPTIONBYTE_BOOT_BIT1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2210      	movs	r2, #16
 8000c26:	4013      	ands	r3, r2
 8000c28:	d008      	beq.n	8000c3c <HAL_FLASHEx_OBProgram+0x128>
  {
    status = FLASH_OB_BOOTBit1Config(pOBInit->BOOTBit1Config);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7cdb      	ldrb	r3, [r3, #19]
 8000c2e:	220f      	movs	r2, #15
 8000c30:	18bc      	adds	r4, r7, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 f95c 	bl	8000ef0 <FLASH_OB_BOOTBit1Config>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	7023      	strb	r3, [r4, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <HAL_FLASHEx_OBProgram+0x13c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	741a      	strb	r2, [r3, #16]

  return status;
 8000c42:	230f      	movs	r3, #15
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	781b      	ldrb	r3, [r3, #0]
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b004      	add	sp, #16
 8000c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c50:	20000064 	.word	0x20000064

08000c54 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	220f      	movs	r2, #15
 8000c60:	601a      	str	r2, [r3, #0]

  /* Get WRP sector */
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 8000c62:	f000 f9d5 	bl	8001010 <FLASH_OB_GetWRP>
 8000c66:	0002      	movs	r2, r0
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	609a      	str	r2, [r3, #8]

#if defined(STM32L071xx) || defined(STM32L072xx) || defined(STM32L073xx) || defined(STM32L081xx) || defined(STM32L082xx) || defined(STM32L083xx)  
  pOBInit->WRPSector2 = FLASH_OB_GetWRP2();
 8000c6c:	f000 f9da 	bl	8001024 <FLASH_OB_GetWRP2>
 8000c70:	0002      	movs	r2, r0
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60da      	str	r2, [r3, #12]
#endif

  /*Get RDP Level*/
  pOBInit->RDPLevel   = FLASH_OB_GetRDP();
 8000c76:	f000 f995 	bl	8000fa4 <FLASH_OB_GetRDP>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000c82:	f000 f981 	bl	8000f88 <FLASH_OB_GetUser>
 8000c86:	0003      	movs	r3, r0
 8000c88:	001a      	movs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	749a      	strb	r2, [r3, #18]

  /*Get BOR Level*/
  pOBInit->BORLevel   = FLASH_OB_GetBOR();
 8000c8e:	f000 f9a3 	bl	8000fd8 <FLASH_OB_GetBOR>
 8000c92:	0003      	movs	r3, r0
 8000c94:	001a      	movs	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	745a      	strb	r2, [r3, #17]

  /* Get BOOT bit 1 config OB */
  pOBInit->BOOTBit1Config = FLASH_OB_GetBOOTBit1();
 8000c9a:	f000 f9ab 	bl	8000ff4 <FLASH_OB_GetBOOTBit1>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	74da      	strb	r2, [r3, #19]
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_FLASHEx_AdvOBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 8000cae:	b590      	push	{r4, r7, lr}
 8000cb0:	b085      	sub	sp, #20
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_OBEX(pAdvOBInit->OptionType));

#if defined(FLASH_OPTR_WPRMOD)
    
  /* Program PCROP option byte*/
  if ((pAdvOBInit->OptionType & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d00c      	beq.n	8000ce2 <HAL_FLASHEx_AdvOBProgram+0x34>
  {
    /* Check the parameters */
    assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
#if defined(STM32L071xx) || defined(STM32L072xx) || defined(STM32L073xx) || defined(STM32L081xx) || defined(STM32L082xx) || defined(STM32L083xx)  
    status = FLASH_OB_ProtectedSectorsConfig(pAdvOBInit->PCROPSector, pAdvOBInit->PCROPSector2, pAdvOBInit->PCROPState);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6898      	ldr	r0, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68d9      	ldr	r1, [r3, #12]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	18bc      	adds	r4, r7, r2
 8000cd8:	001a      	movs	r2, r3
 8000cda:	f000 f9ad 	bl	8001038 <FLASH_OB_ProtectedSectorsConfig>
 8000cde:	0003      	movs	r3, r0
 8000ce0:	7023      	strb	r3, [r4, #0]
#endif /* FLASH_OPTR_WPRMOD */

#if defined(FLASH_OPTR_BFB2)
    
  /* Program BOOT config option byte */
  if ((pAdvOBInit->OptionType & OPTIONBYTE_BOOTCONFIG) == OPTIONBYTE_BOOTCONFIG)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d009      	beq.n	8000d00 <HAL_FLASHEx_AdvOBProgram+0x52>
  {
    status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	8a1b      	ldrh	r3, [r3, #16]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	18bc      	adds	r4, r7, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 faba 	bl	8001270 <FLASH_OB_BootConfig>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	7023      	strb	r3, [r4, #0]
  }
  
#endif /* FLASH_OPTR_BFB2 */

  return status;
 8000d00:	230f      	movs	r3, #15
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	781b      	ldrb	r3, [r3, #0]
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b005      	add	sp, #20
 8000d0c:	bd90      	pop	{r4, r7, pc}
	...

08000d10 <HAL_FLASHEx_OB_SelectPCROP>:
  * @note   Once WPRMOD bit is active, unprotection of a protected sector is not possible 
  * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPERR Flag
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)
{
 8000d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d16:	250f      	movs	r5, #15
 8000d18:	197b      	adds	r3, r7, r5
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
  uint16_t tmp1 = 0;
 8000d1e:	260c      	movs	r6, #12
 8000d20:	19bb      	adds	r3, r7, r6
 8000d22:	2200      	movs	r2, #0
 8000d24:	801a      	strh	r2, [r3, #0]
  uint32_t tmp2 = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  uint8_t optiontmp = 0;
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
  uint16_t optiontmp2 = 0;
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	801a      	strh	r2, [r3, #0]
  
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d36:	197c      	adds	r4, r7, r5
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <HAL_FLASHEx_OB_SelectPCROP+0x98>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fddc 	bl	80008f8 <FLASH_WaitForLastOperation>
 8000d40:	0003      	movs	r3, r0
 8000d42:	7023      	strb	r3, [r4, #0]
  
  /* Mask RDP Byte */
  optiontmp =  (uint8_t)(*(__IO uint8_t *)(OB_BASE)); 
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_FLASHEx_OB_SelectPCROP+0x9c>)
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	701a      	strb	r2, [r3, #0]
  
  /* Update Option Byte */
  optiontmp2 = (uint16_t)(OB_PCROP_SELECTED | optiontmp); 
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b21b      	sxth	r3, r3
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	0052      	lsls	r2, r2, #1
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	801a      	strh	r2, [r3, #0]
  
  /* calculate the option byte to write */
  tmp1 = (uint16_t)(~(optiontmp2 ));
 8000d5e:	19bb      	adds	r3, r7, r6
 8000d60:	1d3a      	adds	r2, r7, #4
 8000d62:	8812      	ldrh	r2, [r2, #0]
 8000d64:	43d2      	mvns	r2, r2
 8000d66:	801a      	strh	r2, [r3, #0]
  tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)optiontmp2));
 8000d68:	19bb      	adds	r3, r7, r6
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	041a      	lsls	r2, r3, #16
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60bb      	str	r3, [r7, #8]
  
  if(status == HAL_OK)
 8000d76:	197b      	adds	r3, r7, r5
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10d      	bne.n	8000d9a <HAL_FLASHEx_OB_SelectPCROP+0x8a>
  {         
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_FLASHEx_OB_SelectPCROP+0xa0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]

    /* program PCRop */
    OB->RDP = tmp2;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_FLASHEx_OB_SelectPCROP+0x9c>)
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	601a      	str	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	18fc      	adds	r4, r7, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_FLASHEx_OB_SelectPCROP+0x98>)
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff fdb1 	bl	80008f8 <FLASH_WaitForLastOperation>
 8000d96:	0003      	movs	r3, r0
 8000d98:	7023      	strb	r3, [r4, #0]
  }
  
  /* Return the Read protection operation Status */
  return status;            
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b005      	add	sp, #20
 8000da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da8:	0000c350 	.word	0x0000c350
 8000dac:	1ff80000 	.word	0x1ff80000
 8000db0:	20000064 	.word	0x20000064

08000db4 <FLASH_OB_RDPConfig>:
  *  !!!Warning!!! When enabling OB_RDP_LEVEL_2 it's no more possible to go back to level 1 or 0
  *   
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8000db4:	b5b0      	push	{r4, r5, r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	0002      	movs	r2, r0
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc0:	2017      	movs	r0, #23
 8000dc2:	183b      	adds	r3, r7, r0
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));
  
  tmp1 = (uint32_t)(OB->RDP & FLASH_OPTR_RDPROT);
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <FLASH_OB_RDPConfig+0x98>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	22ff      	movs	r2, #255	; 0xff
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
  
#if defined(FLASH_OPTR_WPRMOD)
    /* Mask WPRMOD bit */
    tmp3 = (uint32_t)(OB->RDP & FLASH_OPTR_WPRMOD);
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <FLASH_OB_RDPConfig+0x98>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4013      	ands	r3, r2
 8000de8:	60bb      	str	r3, [r7, #8]
#endif

    /* calculate the option byte to write */
    tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	43db      	mvns	r3, r3
 8000df4:	613b      	str	r3, [r7, #16]
    tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)(OB_RDP | tmp3)));
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	041a      	lsls	r2, r3, #16
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	7819      	ldrb	r1, [r3, #0]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	430b      	orrs	r3, r1
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e06:	0005      	movs	r5, r0
 8000e08:	183c      	adds	r4, r7, r0
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <FLASH_OB_RDPConfig+0x9c>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fd73 	bl	80008f8 <FLASH_WaitForLastOperation>
 8000e12:	0003      	movs	r3, r0
 8000e14:	7023      	strb	r3, [r4, #0]

    if(status == HAL_OK)
 8000e16:	0028      	movs	r0, r5
 8000e18:	183b      	adds	r3, r7, r0
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d10d      	bne.n	8000e3c <FLASH_OB_RDPConfig+0x88>
    {
      /* Clean the error context */
      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <FLASH_OB_RDPConfig+0xa0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]

      /* program read protection level */
      OB->RDP = tmp2;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <FLASH_OB_RDPConfig+0x98>)
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	601a      	str	r2, [r3, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e2c:	2317      	movs	r3, #23
 8000e2e:	18fc      	adds	r4, r7, r3
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <FLASH_OB_RDPConfig+0x9c>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff fd60 	bl	80008f8 <FLASH_WaitForLastOperation>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	7023      	strb	r3, [r4, #0]
    }

  /* Return the Read protection operation Status */
  return status;
 8000e3c:	2317      	movs	r3, #23
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	781b      	ldrb	r3, [r3, #0]
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b006      	add	sp, #24
 8000e48:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	1ff80000 	.word	0x1ff80000
 8000e50:	0000c350 	.word	0x0000c350
 8000e54:	20000064 	.word	0x20000064

08000e58 <FLASH_OB_BORConfig>:
  *     @arg @ref OB_BOR_LEVEL4 BOR Reset threshold levels for 2.55V - 2.65V VDD power supply
  *     @arg @ref OB_BOR_LEVEL5 BOR Reset threshold levels for 2.8V - 2.9V VDD power supply
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e64:	2117      	movs	r1, #23
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0, tmp1 = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(OB_BOR));

  /* Get the User Option byte register */
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <FLASH_OB_BORConfig+0x88>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <FLASH_OB_BORConfig+0x8c>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Calculate the option byte to write - [0xFF | nUSER | 0x00 | USER]*/
  tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	43db      	mvns	r3, r3
 8000e88:	041b      	lsls	r3, r3, #16
 8000e8a:	613b      	str	r3, [r7, #16]
  tmp |= (OB_BOR | tmp1);
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781a      	ldrb	r2, [r3, #0]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e9a:	000d      	movs	r5, r1
 8000e9c:	187c      	adds	r4, r7, r1
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <FLASH_OB_BORConfig+0x90>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f7ff fd29 	bl	80008f8 <FLASH_WaitForLastOperation>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8000eaa:	0029      	movs	r1, r5
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10d      	bne.n	8000ed0 <FLASH_OB_BORConfig+0x78>
  {  
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <FLASH_OB_BORConfig+0x94>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]

    /* Write the BOR Option Byte */            
    OB->USER = tmp;
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <FLASH_OB_BORConfig+0x88>)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	605a      	str	r2, [r3, #4]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ec0:	2317      	movs	r3, #23
 8000ec2:	18fc      	adds	r4, r7, r3
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <FLASH_OB_BORConfig+0x90>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f7ff fd16 	bl	80008f8 <FLASH_WaitForLastOperation>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
  }
  
  /* Return the Option Byte BOR programming Status */
  return status;
 8000ed0:	2317      	movs	r3, #23
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	781b      	ldrb	r3, [r3, #0]
}
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b006      	add	sp, #24
 8000edc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	1ff80000 	.word	0x1ff80000
 8000ee4:	0000fff0 	.word	0x0000fff0
 8000ee8:	0000c350 	.word	0x0000c350
 8000eec:	20000064 	.word	0x20000064

08000ef0 <FLASH_OB_BOOTBit1Config>:
  *             @arg @ref OB_BOOT_BIT1_RESET BOOT1 option bit reset
  *             @arg @ref OB_BOOT_BIT1_SET BOOT1 option bit set
  * @retval HAL status
  */
static HAL_StatusTypeDef  FLASH_OB_BOOTBit1Config(uint8_t OB_BootBit1)
{
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK; 
 8000efc:	2117      	movs	r1, #23
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0, tmp1 = 0, OB_Bits = ((uint32_t) OB_BootBit1) << 15;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	03db      	lsls	r3, r3, #15
 8000f12:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_BOOT1(OB_BootBit1));

  /* Get the User Option byte register */
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <FLASH_OB_BOOTBit1Config+0x8c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	045b      	lsls	r3, r3, #17
 8000f1a:	0c5b      	lsrs	r3, r3, #17
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Calculate the user option byte to write */ 
  tmp = (~(OB_Bits | tmp1)) << 16U;
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	43db      	mvns	r3, r3
 8000f26:	041b      	lsls	r3, r3, #16
 8000f28:	613b      	str	r3, [r7, #16]
  tmp |= OB_Bits | tmp1;
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f36:	000d      	movs	r5, r1
 8000f38:	187c      	adds	r4, r7, r1
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <FLASH_OB_BOOTBit1Config+0x90>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff fcdb 	bl	80008f8 <FLASH_WaitForLastOperation>
 8000f42:	0003      	movs	r3, r0
 8000f44:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8000f46:	0029      	movs	r1, r5
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10d      	bne.n	8000f6c <FLASH_OB_BOOTBit1Config+0x7c>
  {  
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <FLASH_OB_BOOTBit1Config+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
    /* Program OB */
    OB->USER = tmp; 
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <FLASH_OB_BOOTBit1Config+0x8c>)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	605a      	str	r2, [r3, #4]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f5c:	2317      	movs	r3, #23
 8000f5e:	18fc      	adds	r4, r7, r3
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <FLASH_OB_BOOTBit1Config+0x90>)
 8000f62:	0018      	movs	r0, r3
 8000f64:	f7ff fcc8 	bl	80008f8 <FLASH_WaitForLastOperation>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	7023      	strb	r3, [r4, #0]
  }

  return status;
 8000f6c:	2317      	movs	r3, #23
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	781b      	ldrb	r3, [r3, #0]
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b006      	add	sp, #24
 8000f78:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	1ff80000 	.word	0x1ff80000
 8000f80:	0000c350 	.word	0x0000c350
 8000f84:	20000064 	.word	0x20000064

08000f88 <FLASH_OB_GetUser>:
/**
  * @brief  Returns the FLASH User Option Bytes values.
  * @retval The FLASH User Option Bytes.
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((FLASH->OPTR & FLASH_OPTR_USER) >> 16U);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <FLASH_OB_GetUser+0x18>)
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	0c1b      	lsrs	r3, r3, #16
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2270      	movs	r2, #112	; 0x70
 8000f96:	4013      	ands	r3, r2
 8000f98:	b2db      	uxtb	r3, r3
}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  uint8_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDPROT);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <FLASH_OB_GetRDP+0x30>)
 8000fac:	69da      	ldr	r2, [r3, #28]
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	701a      	strb	r2, [r3, #0]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2baa      	cmp	r3, #170	; 0xaa
 8000fb8:	d005      	beq.n	8000fc6 <FLASH_OB_GetRDP+0x22>
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2bcc      	cmp	r3, #204	; 0xcc
 8000fc0:	d001      	beq.n	8000fc6 <FLASH_OB_GetRDP+0x22>
  {
    return (OB_RDP_LEVEL_1);
 8000fc2:	23bb      	movs	r3, #187	; 0xbb
 8000fc4:	e001      	b.n	8000fca <FLASH_OB_GetRDP+0x26>
  }
  else
  {
    return rdp_level;
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000fca:	0018      	movs	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <FLASH_OB_GetBOR>:
/**
  * @brief  Returns the FLASH BOR level.
  * @retval The BOR level Option Bytes.
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Return the BOR level */
  return (uint8_t)((FLASH->OPTR & (uint32_t)FLASH_OPTR_BOR_LEV) >> 16U);
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <FLASH_OB_GetBOR+0x18>)
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
}
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <FLASH_OB_GetBOOTBit1>:
/**
  * @brief  Returns the FLASH BOOT bit1 value.
  * @retval The BOOT bit 1 value Option Bytes.
  */
static uint8_t FLASH_OB_GetBOOTBit1(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Return the BOR level */
  return (FLASH->OPTR & FLASH_OPTR_BOOT1) >> FLASH_OPTR_BOOT1_Pos;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <FLASH_OB_GetBOOTBit1+0x18>)
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	0fdb      	lsrs	r3, r3, #31
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2201      	movs	r2, #1
 8001002:	4013      	ands	r3, r2
 8001004:	b2db      	uxtb	r3, r3

}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40022000 	.word	0x40022000

08001010 <FLASH_OB_GetWRP>:
/**
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value.
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 8001014:	4b02      	ldr	r3, [pc, #8]	; (8001020 <FLASH_OB_GetWRP+0x10>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	40022000 	.word	0x40022000

08001024 <FLASH_OB_GetWRP2>:
/**
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value.
  */
static uint32_t FLASH_OB_GetWRP2(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(FLASH->WRPR2);
 8001028:	4a02      	ldr	r2, [pc, #8]	; (8001034 <FLASH_OB_GetWRP2+0x10>)
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	58d3      	ldr	r3, [r2, r3]
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40022000 	.word	0x40022000

08001038 <FLASH_OB_ProtectedSectorsConfig>:
  *        @arg @ref OB_WRPSTATE_DISABLE
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef FLASH_OB_ProtectedSectorsConfig(uint32_t Sector, uint32_t NewState)
#endif
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001044:	251f      	movs	r5, #31
 8001046:	197b      	adds	r3, r7, r5
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
  uint32_t WRP_Data = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  uint32_t OB_WRP = Sector;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	617b      	str	r3, [r7, #20]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001054:	197c      	adds	r4, r7, r5
 8001056:	4b50      	ldr	r3, [pc, #320]	; (8001198 <FLASH_OB_ProtectedSectorsConfig+0x160>)
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff fc4d 	bl	80008f8 <FLASH_WaitForLastOperation>
 800105e:	0003      	movs	r3, r0
 8001060:	7023      	strb	r3, [r4, #0]
 
  if(status == HAL_OK)
 8001062:	197b      	adds	r3, r7, r5
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d000      	beq.n	800106c <FLASH_OB_ProtectedSectorsConfig+0x34>
 800106a:	e086      	b.n	800117a <FLASH_OB_ProtectedSectorsConfig+0x142>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800106c:	4b4b      	ldr	r3, [pc, #300]	; (800119c <FLASH_OB_ProtectedSectorsConfig+0x164>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]

    /* Update WRP only if at least 1 selected sector */
    if (OB_WRP != 0x00000000U)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d027      	beq.n	80010c8 <FLASH_OB_ProtectedSectorsConfig+0x90>
    {
      if ((OB_WRP & WRP_MASK_LOW) != 0x00000000U)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	041b      	lsls	r3, r3, #16
 800107c:	0c1b      	lsrs	r3, r3, #16
 800107e:	d023      	beq.n	80010c8 <FLASH_OB_ProtectedSectorsConfig+0x90>
      {
        if (NewState != OB_WRPSTATE_DISABLE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00f      	beq.n	80010a6 <FLASH_OB_ProtectedSectorsConfig+0x6e>
        {
          WRP_Data = (uint16_t)(((OB_WRP & WRP_MASK_LOW) | OB->WRP01));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b29b      	uxth	r3, r3
 8001094:	61bb      	str	r3, [r7, #24]
          OB->WRP01 = (uint32_t)(~(WRP_Data) << 16U) | (WRP_Data);
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	43db      	mvns	r3, r3
 800109a:	0419      	lsls	r1, r3, #16
 800109c:	4b40      	ldr	r3, [pc, #256]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	e010      	b.n	80010c8 <FLASH_OB_ProtectedSectorsConfig+0x90>
        }             
        else
        {
          WRP_Data = (uint16_t)(~OB_WRP & (WRP_MASK_LOW & OB->WRP01));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	61bb      	str	r3, [r7, #24]
          OB->WRP01 =  (uint32_t)((~WRP_Data) << 16U) | (WRP_Data);
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	43db      	mvns	r3, r3
 80010be:	0419      	lsls	r1, r3, #16
 80010c0:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	609a      	str	r2, [r3, #8]
        }
      }
    }
#if defined(STM32L071xx) || defined(STM32L072xx) || defined(STM32L073xx) || defined(STM32L081xx) || defined(STM32L082xx) || defined(STM32L083xx)  
    /* Update WRP only if at least 1 selected sector */
    if (OB_WRP != 0x00000000U)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d028      	beq.n	8001120 <FLASH_OB_ProtectedSectorsConfig+0xe8>
    {
      if ((OB_WRP & WRP_MASK_HIGH) != 0x00000000U)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	0c1b      	lsrs	r3, r3, #16
 80010d2:	041b      	lsls	r3, r3, #16
 80010d4:	d024      	beq.n	8001120 <FLASH_OB_ProtectedSectorsConfig+0xe8>
      {
        if (NewState != OB_WRPSTATE_DISABLE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d010      	beq.n	80010fe <FLASH_OB_ProtectedSectorsConfig+0xc6>
        {
          WRP_Data = (uint16_t)((((OB_WRP & WRP_MASK_HIGH) >> 16U | OB->WRP23))); 
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	0c1b      	lsrs	r3, r3, #16
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	61bb      	str	r3, [r7, #24]
          OB->WRP23 = (uint32_t)(~(WRP_Data) << 16U) | (WRP_Data);
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	0419      	lsls	r1, r3, #16
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	e010      	b.n	8001120 <FLASH_OB_ProtectedSectorsConfig+0xe8>
        }             
        else
        {
          WRP_Data = (uint16_t)((((~OB_WRP & WRP_MASK_HIGH) >> 16U & OB->WRP23))); 
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	43db      	mvns	r3, r3
 8001102:	0c1b      	lsrs	r3, r3, #16
 8001104:	b29a      	uxth	r2, r3
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	b29b      	uxth	r3, r3
 800110c:	4013      	ands	r3, r2
 800110e:	b29b      	uxth	r3, r3
 8001110:	61bb      	str	r3, [r7, #24]
          OB->WRP23 = (uint32_t)((~WRP_Data) << 16U) | (WRP_Data);
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	43db      	mvns	r3, r3
 8001116:	0419      	lsls	r1, r3, #16
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	430a      	orrs	r2, r1
 800111e:	60da      	str	r2, [r3, #12]
        } 
      }
    }

    OB_WRP = Sector2;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	617b      	str	r3, [r7, #20]
    /* Update WRP only if at least 1 selected sector */
    if (OB_WRP != 0x00000000U)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d027      	beq.n	800117a <FLASH_OB_ProtectedSectorsConfig+0x142>
    {
      if ((OB_WRP & WRP_MASK_LOW) != 0x00000000U)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	0c1b      	lsrs	r3, r3, #16
 8001130:	d023      	beq.n	800117a <FLASH_OB_ProtectedSectorsConfig+0x142>
      {
        if (NewState != OB_WRPSTATE_DISABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00f      	beq.n	8001158 <FLASH_OB_ProtectedSectorsConfig+0x120>
        {
          WRP_Data = (uint16_t)(((OB_WRP & WRP_MASK_LOW) | OB->WRP45));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b29b      	uxth	r3, r3
 8001146:	61bb      	str	r3, [r7, #24]
          OB->WRP45 =(uint32_t)(~(WRP_Data) << 16U) | (WRP_Data);
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	43db      	mvns	r3, r3
 800114c:	0419      	lsls	r1, r3, #16
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	e010      	b.n	800117a <FLASH_OB_ProtectedSectorsConfig+0x142>
        }             
        else
        {
          WRP_Data = (uint16_t)(~OB_WRP & (WRP_MASK_LOW & OB->WRP45));
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	b29b      	uxth	r3, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4013      	ands	r3, r2
 8001168:	b29b      	uxth	r3, r3
 800116a:	61bb      	str	r3, [r7, #24]
          OB->WRP45 = (uint32_t)((~WRP_Data) << 16U) | (WRP_Data);
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	43db      	mvns	r3, r3
 8001170:	0419      	lsls	r1, r3, #16
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <FLASH_OB_ProtectedSectorsConfig+0x168>)
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	430a      	orrs	r2, r1
 8001178:	611a      	str	r2, [r3, #16]
      }
    }
#endif /* STM32L071xx || STM32L072xx || STM32L073xx || STM32L081xx || STM32L082xx || STM32L083xx */
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800117a:	251f      	movs	r5, #31
 800117c:	197c      	adds	r4, r7, r5
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <FLASH_OB_ProtectedSectorsConfig+0x160>)
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff fbb9 	bl	80008f8 <FLASH_WaitForLastOperation>
 8001186:	0003      	movs	r3, r0
 8001188:	7023      	strb	r3, [r4, #0]

  /* Return the write protection operation Status */
  return status;      
 800118a:	197b      	adds	r3, r7, r5
 800118c:	781b      	ldrb	r3, [r3, #0]
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b008      	add	sp, #32
 8001194:	bdb0      	pop	{r4, r5, r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	0000c350 	.word	0x0000c350
 800119c:	20000064 	.word	0x20000064
 80011a0:	1ff80000 	.word	0x1ff80000

080011a4 <FLASH_OB_UserConfig>:
  *     @arg @ref OB_STDBY_NORST No reset generated when entering in STANDBY
  *     @arg @ref OB_STDBY_RST Reset generated when entering in STANDBY
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	0004      	movs	r4, r0
 80011ac:	0008      	movs	r0, r1
 80011ae:	0011      	movs	r1, r2
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	1c22      	adds	r2, r4, #0
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	1dbb      	adds	r3, r7, #6
 80011b8:	1c02      	adds	r2, r0, #0
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	1d7b      	adds	r3, r7, #5
 80011be:	1c0a      	adds	r2, r1, #0
 80011c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK; 
 80011c2:	2117      	movs	r1, #23
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0, tmp1 = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Get the User Option byte register */
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <FLASH_OB_UserConfig+0xbc>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4a23      	ldr	r2, [pc, #140]	; (8001264 <FLASH_OB_UserConfig+0xc0>)
 80011d8:	4013      	ands	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]

  /* Calculate the user option byte to write */ 
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
 80011dc:	1dfa      	adds	r2, r7, #7
 80011de:	1dbb      	adds	r3, r7, #6
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	1d7b      	adds	r3, r7, #5
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	001a      	movs	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	43db      	mvns	r3, r3
 80011f8:	041b      	lsls	r3, r3, #16
 80011fa:	613b      	str	r3, [r7, #16]
  tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
 80011fc:	1dfa      	adds	r2, r7, #7
 80011fe:	1dbb      	adds	r3, r7, #6
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4313      	orrs	r3, r2
 8001206:	b2da      	uxtb	r2, r3
 8001208:	1d7b      	adds	r3, r7, #5
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4313      	orrs	r3, r2
 800120e:	b2db      	uxtb	r3, r3
 8001210:	001a      	movs	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800121c:	000d      	movs	r5, r1
 800121e:	187c      	adds	r4, r7, r1
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <FLASH_OB_UserConfig+0xc4>)
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff fb68 	bl	80008f8 <FLASH_WaitForLastOperation>
 8001228:	0003      	movs	r3, r0
 800122a:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800122c:	0029      	movs	r1, r5
 800122e:	187b      	adds	r3, r7, r1
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10d      	bne.n	8001252 <FLASH_OB_UserConfig+0xae>
  {  
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <FLASH_OB_UserConfig+0xc8>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]

    /* Write the User Option Byte */
    OB->USER = tmp;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <FLASH_OB_UserConfig+0xbc>)
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	605a      	str	r2, [r3, #4]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001242:	2317      	movs	r3, #23
 8001244:	18fc      	adds	r4, r7, r3
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <FLASH_OB_UserConfig+0xc4>)
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff fb55 	bl	80008f8 <FLASH_WaitForLastOperation>
 800124e:	0003      	movs	r3, r0
 8001250:	7023      	strb	r3, [r4, #0]
  }

  /* Return the Option Byte program Status */
  return status;
 8001252:	2317      	movs	r3, #23
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	781b      	ldrb	r3, [r3, #0]
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b006      	add	sp, #24
 800125e:	bdb0      	pop	{r4, r5, r7, pc}
 8001260:	1ff80000 	.word	0x1ff80000
 8001264:	0000ff8f 	.word	0x0000ff8f
 8001268:	0000c350 	.word	0x0000c350
 800126c:	20000064 	.word	0x20000064

08001270 <FLASH_OB_BootConfig>:
  *             @arg @ref OB_BOOT_BANK1 BFB2 option bit reset
  *             @arg @ref OB_BOOT_BANK2 BFB2 option bit set
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t OB_BOOT)
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	0002      	movs	r2, r0
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK; 
 800127c:	2117      	movs	r1, #23
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_BANK(OB_BOOT));

  /* Get the User Option byte register  and BOR Level*/
  tmp1 = OB->USER & ((~FLASH_OPTR_BFB2) >> 16U);
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <FLASH_OB_BootConfig+0x88>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <FLASH_OB_BootConfig+0x8c>)
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]

  /* Calculate the option byte to write */
  tmp = (uint32_t)~(OB_BOOT | tmp1) << 16U;
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	43db      	mvns	r3, r3
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	613b      	str	r3, [r7, #16]
  tmp |= (OB_BOOT | tmp1);
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012b2:	000d      	movs	r5, r1
 80012b4:	187c      	adds	r4, r7, r1
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <FLASH_OB_BootConfig+0x90>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff fb1d 	bl	80008f8 <FLASH_WaitForLastOperation>
 80012be:	0003      	movs	r3, r0
 80012c0:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 80012c2:	0029      	movs	r1, r5
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10d      	bne.n	80012e8 <FLASH_OB_BootConfig+0x78>
  {  
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <FLASH_OB_BootConfig+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]

    /* Write the BOOT Option Byte */
    OB->USER = tmp;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <FLASH_OB_BootConfig+0x88>)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	605a      	str	r2, [r3, #4]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012d8:	2317      	movs	r3, #23
 80012da:	18fc      	adds	r4, r7, r3
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <FLASH_OB_BootConfig+0x90>)
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff fb0a 	bl	80008f8 <FLASH_WaitForLastOperation>
 80012e4:	0003      	movs	r3, r0
 80012e6:	7023      	strb	r3, [r4, #0]
  }

  /* Return the Option Byte program Status */
  return status;
 80012e8:	2317      	movs	r3, #23
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	781b      	ldrb	r3, [r3, #0]
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b006      	add	sp, #24
 80012f4:	bdb0      	pop	{r4, r5, r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	1ff80000 	.word	0x1ff80000
 80012fc:	0000ff7f 	.word	0x0000ff7f
 8001300:	0000c350 	.word	0x0000c350
 8001304:	20000064 	.word	0x20000064

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800131e:	e155      	b.n	80015cc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	4091      	lsls	r1, r2
 800132a:	000a      	movs	r2, r1
 800132c:	4013      	ands	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d100      	bne.n	8001338 <HAL_GPIO_Init+0x30>
 8001336:	e146      	b.n	80015c6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x40>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b12      	cmp	r3, #18
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	0092      	lsls	r2, r2, #2
 8001352:	58d3      	ldr	r3, [r2, r3]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2207      	movs	r2, #7
 800135a:	4013      	ands	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	409a      	lsls	r2, r3
 8001362:	0013      	movs	r3, r2
 8001364:	43da      	mvns	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2107      	movs	r1, #7
 8001374:	400b      	ands	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	409a      	lsls	r2, r3
 800137a:	0013      	movs	r3, r2
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	6939      	ldr	r1, [r7, #16]
 800138e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d00b      	beq.n	80013b0 <HAL_GPIO_Init+0xa8>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d007      	beq.n	80013b0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a4:	2b11      	cmp	r3, #17
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b12      	cmp	r3, #18
 80013ae:	d130      	bne.n	8001412 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	43da      	mvns	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	409a      	lsls	r2, r3
 80013d2:	0013      	movs	r3, r2
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
 80013ec:	0013      	movs	r3, r2
 80013ee:	43da      	mvns	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	2201      	movs	r2, #1
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
 8001404:	0013      	movs	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	401a      	ands	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	055b      	lsls	r3, r3, #21
 800147e:	4013      	ands	r3, r2
 8001480:	d100      	bne.n	8001484 <HAL_GPIO_Init+0x17c>
 8001482:	e0a0      	b.n	80015c6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001484:	4b57      	ldr	r3, [pc, #348]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 8001486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_GPIO_Init+0x2dc>)
 800148a:	2101      	movs	r1, #1
 800148c:	430a      	orrs	r2, r1
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001490:	4a55      	ldr	r2, [pc, #340]	; (80015e8 <HAL_GPIO_Init+0x2e0>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	589b      	ldr	r3, [r3, r2]
 800149c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	2203      	movs	r2, #3
 80014a2:	4013      	ands	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	409a      	lsls	r2, r3
 80014aa:	0013      	movs	r3, r2
 80014ac:	43da      	mvns	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	23a0      	movs	r3, #160	; 0xa0
 80014b8:	05db      	lsls	r3, r3, #23
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d01f      	beq.n	80014fe <HAL_GPIO_Init+0x1f6>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4a      	ldr	r2, [pc, #296]	; (80015ec <HAL_GPIO_Init+0x2e4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x1f2>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a49      	ldr	r2, [pc, #292]	; (80015f0 <HAL_GPIO_Init+0x2e8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a48      	ldr	r2, [pc, #288]	; (80015f4 <HAL_GPIO_Init+0x2ec>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x1ea>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a47      	ldr	r2, [pc, #284]	; (80015f8 <HAL_GPIO_Init+0x2f0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x1e6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a46      	ldr	r2, [pc, #280]	; (80015fc <HAL_GPIO_Init+0x2f4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x1e2>
 80014e6:	2305      	movs	r3, #5
 80014e8:	e00a      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 80014ea:	2306      	movs	r3, #6
 80014ec:	e008      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 80014ee:	2304      	movs	r3, #4
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 80014f2:	2303      	movs	r3, #3
 80014f4:	e004      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 80014fe:	2300      	movs	r3, #0
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	2103      	movs	r1, #3
 8001504:	400a      	ands	r2, r1
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	4093      	lsls	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001510:	4935      	ldr	r1, [pc, #212]	; (80015e8 <HAL_GPIO_Init+0x2e0>)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151e:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43da      	mvns	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	025b      	lsls	r3, r3, #9
 8001536:	4013      	ands	r3, r2
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001548:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43da      	mvns	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	029b      	lsls	r3, r3, #10
 8001560:	4013      	ands	r3, r2
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43da      	mvns	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	035b      	lsls	r3, r3, #13
 800158a:	4013      	ands	r3, r2
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43da      	mvns	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	039b      	lsls	r3, r3, #14
 80015b4:	4013      	ands	r3, r2
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_GPIO_Init+0x2f8>)
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	40da      	lsrs	r2, r3
 80015d4:	1e13      	subs	r3, r2, #0
 80015d6:	d000      	beq.n	80015da <HAL_GPIO_Init+0x2d2>
 80015d8:	e6a2      	b.n	8001320 <HAL_GPIO_Init+0x18>
  }
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b006      	add	sp, #24
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	50000400 	.word	0x50000400
 80015f0:	50000800 	.word	0x50000800
 80015f4:	50000c00 	.word	0x50000c00
 80015f8:	50001000 	.word	0x50001000
 80015fc:	50001c00 	.word	0x50001c00
 8001600:	40010400 	.word	0x40010400

08001604 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	000a      	movs	r2, r1
 800160e:	1cbb      	adds	r3, r7, #2
 8001610:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	1cba      	adds	r2, r7, #2
 8001618:	8812      	ldrh	r2, [r2, #0]
 800161a:	4013      	ands	r3, r2
 800161c:	d004      	beq.n	8001628 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800161e:	230f      	movs	r3, #15
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	e003      	b.n	8001630 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001628:	230f      	movs	r3, #15
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001630:	230f      	movs	r3, #15
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	781b      	ldrb	r3, [r3, #0]
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	0008      	movs	r0, r1
 8001648:	0011      	movs	r1, r2
 800164a:	1cbb      	adds	r3, r7, #2
 800164c:	1c02      	adds	r2, r0, #0
 800164e:	801a      	strh	r2, [r3, #0]
 8001650:	1c7b      	adds	r3, r7, #1
 8001652:	1c0a      	adds	r2, r1, #0
 8001654:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001656:	1c7b      	adds	r3, r7, #1
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165e:	1cbb      	adds	r3, r7, #2
 8001660:	881a      	ldrh	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001666:	e003      	b.n	8001670 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001668:	1cbb      	adds	r3, r7, #2
 800166a:	881a      	ldrh	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b002      	add	sp, #8
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	000a      	movs	r2, r1
 8001682:	1cbb      	adds	r3, r7, #2
 8001684:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	1cbb      	adds	r3, r7, #2
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	405a      	eors	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	615a      	str	r2, [r3, #20]
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	0002      	movs	r2, r0
 80016a4:	1dbb      	adds	r3, r7, #6
 80016a6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	1dba      	adds	r2, r7, #6
 80016ae:	8812      	ldrh	r2, [r2, #0]
 80016b0:	4013      	ands	r3, r2
 80016b2:	d008      	beq.n	80016c6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016b6:	1dba      	adds	r2, r7, #6
 80016b8:	8812      	ldrh	r2, [r2, #0]
 80016ba:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016bc:	1dbb      	adds	r3, r7, #6
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f000 f807 	bl	80016d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40010400 	.word	0x40010400

080016d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	0002      	movs	r2, r0
 80016dc:	1dbb      	adds	r3, r7, #6
 80016de:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f000 fbbc 	bl	8001e74 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fc:	4bc8      	ldr	r3, [pc, #800]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	220c      	movs	r2, #12
 8001702:	4013      	ands	r3, r2
 8001704:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001706:	4bc6      	ldr	r3, [pc, #792]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	025b      	lsls	r3, r3, #9
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	4013      	ands	r3, r2
 800171a:	d100      	bne.n	800171e <HAL_RCC_OscConfig+0x36>
 800171c:	e07e      	b.n	800181c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	2b08      	cmp	r3, #8
 8001722:	d007      	beq.n	8001734 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d112      	bne.n	8001750 <HAL_RCC_OscConfig+0x68>
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	025b      	lsls	r3, r3, #9
 8001730:	429a      	cmp	r2, r3
 8001732:	d10d      	bne.n	8001750 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	4bba      	ldr	r3, [pc, #744]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	d100      	bne.n	8001742 <HAL_RCC_OscConfig+0x5a>
 8001740:	e06b      	b.n	800181a <HAL_RCC_OscConfig+0x132>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d167      	bne.n	800181a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f000 fb92 	bl	8001e74 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	429a      	cmp	r2, r3
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x84>
 800175c:	4bb0      	ldr	r3, [pc, #704]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4baf      	ldr	r3, [pc, #700]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	0249      	lsls	r1, r1, #9
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e027      	b.n	80017bc <HAL_RCC_OscConfig+0xd4>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	23a0      	movs	r3, #160	; 0xa0
 8001772:	02db      	lsls	r3, r3, #11
 8001774:	429a      	cmp	r2, r3
 8001776:	d10e      	bne.n	8001796 <HAL_RCC_OscConfig+0xae>
 8001778:	4ba9      	ldr	r3, [pc, #676]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4ba8      	ldr	r3, [pc, #672]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	02c9      	lsls	r1, r1, #11
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	4ba6      	ldr	r3, [pc, #664]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4ba5      	ldr	r3, [pc, #660]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	0249      	lsls	r1, r1, #9
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e012      	b.n	80017bc <HAL_RCC_OscConfig+0xd4>
 8001796:	4ba2      	ldr	r3, [pc, #648]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4ba1      	ldr	r3, [pc, #644]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800179c:	49a1      	ldr	r1, [pc, #644]	; (8001a24 <HAL_RCC_OscConfig+0x33c>)
 800179e:	400a      	ands	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	4b9f      	ldr	r3, [pc, #636]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	4013      	ands	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4b9b      	ldr	r3, [pc, #620]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b9a      	ldr	r3, [pc, #616]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017b6:	499c      	ldr	r1, [pc, #624]	; (8001a28 <HAL_RCC_OscConfig+0x340>)
 80017b8:	400a      	ands	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d015      	beq.n	80017f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7fe fe8e 	bl	80004e4 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017cc:	e009      	b.n	80017e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ce:	f7fe fe89 	bl	80004e4 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d902      	bls.n	80017e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	f000 fb49 	bl	8001e74 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017e2:	4b8f      	ldr	r3, [pc, #572]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	029b      	lsls	r3, r3, #10
 80017ea:	4013      	ands	r3, r2
 80017ec:	d0ef      	beq.n	80017ce <HAL_RCC_OscConfig+0xe6>
 80017ee:	e015      	b.n	800181c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7fe fe78 	bl	80004e4 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fa:	f7fe fe73 	bl	80004e4 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b64      	cmp	r3, #100	; 0x64
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e333      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800180c:	4b84      	ldr	r3, [pc, #528]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	029b      	lsls	r3, r3, #10
 8001814:	4013      	ands	r3, r2
 8001816:	d1f0      	bne.n	80017fa <HAL_RCC_OscConfig+0x112>
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d100      	bne.n	8001828 <HAL_RCC_OscConfig+0x140>
 8001826:	e098      	b.n	800195a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	2220      	movs	r2, #32
 8001832:	4013      	ands	r3, r2
 8001834:	d009      	beq.n	800184a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001836:	4b7a      	ldr	r3, [pc, #488]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b79      	ldr	r3, [pc, #484]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800183c:	2120      	movs	r1, #32
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	2220      	movs	r2, #32
 8001846:	4393      	bics	r3, r2
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d13d      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1ea>
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d13a      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800185c:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2204      	movs	r2, #4
 8001862:	4013      	ands	r3, r2
 8001864:	d004      	beq.n	8001870 <HAL_RCC_OscConfig+0x188>
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e301      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a6d      	ldr	r2, [pc, #436]	; (8001a2c <HAL_RCC_OscConfig+0x344>)
 8001876:	4013      	ands	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	021a      	lsls	r2, r3, #8
 8001880:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001886:	4b66      	ldr	r3, [pc, #408]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2209      	movs	r2, #9
 800188c:	4393      	bics	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001898:	f000 fc20 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 800189c:	0001      	movs	r1, r0
 800189e:	4b60      	ldr	r3, [pc, #384]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	220f      	movs	r2, #15
 80018a6:	4013      	ands	r3, r2
 80018a8:	4a61      	ldr	r2, [pc, #388]	; (8001a30 <HAL_RCC_OscConfig+0x348>)
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	000a      	movs	r2, r1
 80018ae:	40da      	lsrs	r2, r3
 80018b0:	4b60      	ldr	r3, [pc, #384]	; (8001a34 <HAL_RCC_OscConfig+0x34c>)
 80018b2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80018b4:	2513      	movs	r5, #19
 80018b6:	197c      	adds	r4, r7, r5
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7fe fddd 	bl	8000478 <HAL_InitTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80018c2:	197b      	adds	r3, r7, r5
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d047      	beq.n	800195a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80018ca:	2313      	movs	r3, #19
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	e2d0      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d027      	beq.n	8001928 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80018d8:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2209      	movs	r2, #9
 80018de:	4393      	bics	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	4b4f      	ldr	r3, [pc, #316]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80018e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7fe fdfb 	bl	80004e4 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f4:	f7fe fdf6 	bl	80004e4 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e2b6      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001906:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2204      	movs	r2, #4
 800190c:	4013      	ands	r3, r2
 800190e:	d0f1      	beq.n	80018f4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a45      	ldr	r2, [pc, #276]	; (8001a2c <HAL_RCC_OscConfig+0x344>)
 8001916:	4013      	ands	r3, r2
 8001918:	0019      	movs	r1, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	021a      	lsls	r2, r3, #8
 8001920:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001922:	430a      	orrs	r2, r1
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	e018      	b.n	800195a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800192e:	2101      	movs	r1, #1
 8001930:	438a      	bics	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7fe fdd6 	bl	80004e4 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193e:	f7fe fdd1 	bl	80004e4 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e291      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2204      	movs	r2, #4
 8001956:	4013      	ands	r3, r2
 8001958:	d1f1      	bne.n	800193e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2210      	movs	r2, #16
 8001960:	4013      	ands	r3, r2
 8001962:	d100      	bne.n	8001966 <HAL_RCC_OscConfig+0x27e>
 8001964:	e09f      	b.n	8001aa6 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d13f      	bne.n	80019ec <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196c:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4013      	ands	r3, r2
 8001976:	d005      	beq.n	8001984 <HAL_RCC_OscConfig+0x29c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e277      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a2b      	ldr	r2, [pc, #172]	; (8001a38 <HAL_RCC_OscConfig+0x350>)
 800198a:	4013      	ands	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	0a19      	lsrs	r1, r3, #8
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	061a      	lsls	r2, r3, #24
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	0b5b      	lsrs	r3, r3, #13
 80019b2:	3301      	adds	r3, #1
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	0212      	lsls	r2, r2, #8
 80019b8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	210f      	movs	r1, #15
 80019c2:	400b      	ands	r3, r1
 80019c4:	491a      	ldr	r1, [pc, #104]	; (8001a30 <HAL_RCC_OscConfig+0x348>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_RCC_OscConfig+0x34c>)
 80019cc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80019ce:	2513      	movs	r5, #19
 80019d0:	197c      	adds	r4, r7, r5
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7fe fd50 	bl	8000478 <HAL_InitTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80019dc:	197b      	adds	r3, r7, r5
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d060      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80019e4:	2313      	movs	r3, #19
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	e243      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d03e      	beq.n	8001a72 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_OscConfig+0x338>)
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	0049      	lsls	r1, r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7fe fd6f 	bl	80004e4 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a0a:	e017      	b.n	8001a3c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a0c:	f7fe fd6a 	bl	80004e4 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d910      	bls.n	8001a3c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e22a      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	40021000 	.word	0x40021000
 8001a24:	fffeffff 	.word	0xfffeffff
 8001a28:	fffbffff 	.word	0xfffbffff
 8001a2c:	ffffe0ff 	.word	0xffffe0ff
 8001a30:	08004c98 	.word	0x08004c98
 8001a34:	20000040 	.word	0x20000040
 8001a38:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a3c:	4bc6      	ldr	r3, [pc, #792]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d0e1      	beq.n	8001a0c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a48:	4bc3      	ldr	r3, [pc, #780]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4ac3      	ldr	r2, [pc, #780]	; (8001d5c <HAL_RCC_OscConfig+0x674>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a56:	4bc0      	ldr	r3, [pc, #768]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5c:	4bbe      	ldr	r3, [pc, #760]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	0a19      	lsrs	r1, r3, #8
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	061a      	lsls	r2, r3, #24
 8001a6a:	4bbb      	ldr	r3, [pc, #748]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	e019      	b.n	8001aa6 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a72:	4bb9      	ldr	r3, [pc, #740]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4bb8      	ldr	r3, [pc, #736]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001a78:	49b9      	ldr	r1, [pc, #740]	; (8001d60 <HAL_RCC_OscConfig+0x678>)
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fd31 	bl	80004e4 <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a88:	f7fe fd2c 	bl	80004e4 <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1ec      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a9a:	4baf      	ldr	r3, [pc, #700]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2208      	movs	r2, #8
 8001aac:	4013      	ands	r3, r2
 8001aae:	d036      	beq.n	8001b1e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d019      	beq.n	8001aec <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab8:	4ba7      	ldr	r3, [pc, #668]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001aba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001abc:	4ba6      	ldr	r3, [pc, #664]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001abe:	2101      	movs	r1, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac4:	f7fe fd0e 	bl	80004e4 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ace:	f7fe fd09 	bl	80004e4 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1c9      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ae0:	4b9d      	ldr	r3, [pc, #628]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d0f1      	beq.n	8001ace <HAL_RCC_OscConfig+0x3e6>
 8001aea:	e018      	b.n	8001b1e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aec:	4b9a      	ldr	r3, [pc, #616]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af0:	4b99      	ldr	r3, [pc, #612]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	438a      	bics	r2, r1
 8001af6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7fe fcf4 	bl	80004e4 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b02:	f7fe fcef 	bl	80004e4 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1af      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b14:	4b90      	ldr	r3, [pc, #576]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d1f1      	bne.n	8001b02 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2204      	movs	r2, #4
 8001b24:	4013      	ands	r3, r2
 8001b26:	d100      	bne.n	8001b2a <HAL_RCC_OscConfig+0x442>
 8001b28:	e0af      	b.n	8001c8a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2323      	movs	r3, #35	; 0x23
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b32:	4b89      	ldr	r3, [pc, #548]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	055b      	lsls	r3, r3, #21
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d10a      	bne.n	8001b54 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b86      	ldr	r3, [pc, #536]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b42:	4b85      	ldr	r3, [pc, #532]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	0549      	lsls	r1, r1, #21
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001b4c:	2323      	movs	r3, #35	; 0x23
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b83      	ldr	r3, [pc, #524]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d11a      	bne.n	8001b96 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b60:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b7f      	ldr	r3, [pc, #508]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b66:	2180      	movs	r1, #128	; 0x80
 8001b68:	0049      	lsls	r1, r1, #1
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6e:	f7fe fcb9 	bl	80004e4 <HAL_GetTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b78:	f7fe fcb4 	bl	80004e4 <HAL_GetTick>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e174      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x67c>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x4ca>
 8001ba2:	4b6d      	ldr	r3, [pc, #436]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ba6:	4b6c      	ldr	r3, [pc, #432]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0049      	lsls	r1, r1, #1
 8001bac:	430a      	orrs	r2, r1
 8001bae:	651a      	str	r2, [r3, #80]	; 0x50
 8001bb0:	e031      	b.n	8001c16 <HAL_RCC_OscConfig+0x52e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4ec>
 8001bba:	4b67      	ldr	r3, [pc, #412]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bbe:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001bc0:	4967      	ldr	r1, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x678>)
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	651a      	str	r2, [r3, #80]	; 0x50
 8001bc6:	4b64      	ldr	r3, [pc, #400]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001bc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bca:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001bcc:	4966      	ldr	r1, [pc, #408]	; (8001d68 <HAL_RCC_OscConfig+0x680>)
 8001bce:	400a      	ands	r2, r1
 8001bd0:	651a      	str	r2, [r3, #80]	; 0x50
 8001bd2:	e020      	b.n	8001c16 <HAL_RCC_OscConfig+0x52e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	23a0      	movs	r3, #160	; 0xa0
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10e      	bne.n	8001bfe <HAL_RCC_OscConfig+0x516>
 8001be0:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001be2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001be4:	4b5c      	ldr	r3, [pc, #368]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	00c9      	lsls	r1, r1, #3
 8001bea:	430a      	orrs	r2, r1
 8001bec:	651a      	str	r2, [r3, #80]	; 0x50
 8001bee:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bf2:	4b59      	ldr	r3, [pc, #356]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	0049      	lsls	r1, r1, #1
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	651a      	str	r2, [r3, #80]	; 0x50
 8001bfc:	e00b      	b.n	8001c16 <HAL_RCC_OscConfig+0x52e>
 8001bfe:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001c00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c02:	4b55      	ldr	r3, [pc, #340]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001c04:	4956      	ldr	r1, [pc, #344]	; (8001d60 <HAL_RCC_OscConfig+0x678>)
 8001c06:	400a      	ands	r2, r1
 8001c08:	651a      	str	r2, [r3, #80]	; 0x50
 8001c0a:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c0e:	4b52      	ldr	r3, [pc, #328]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001c10:	4955      	ldr	r1, [pc, #340]	; (8001d68 <HAL_RCC_OscConfig+0x680>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d015      	beq.n	8001c4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7fe fc61 	bl	80004e4 <HAL_GetTick>
 8001c22:	0003      	movs	r3, r0
 8001c24:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c26:	e009      	b.n	8001c3c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7fe fc5c 	bl	80004e4 <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	4a4e      	ldr	r2, [pc, #312]	; (8001d6c <HAL_RCC_OscConfig+0x684>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e11b      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c3c:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	d0ef      	beq.n	8001c28 <HAL_RCC_OscConfig+0x540>
 8001c48:	e014      	b.n	8001c74 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7fe fc4b 	bl	80004e4 <HAL_GetTick>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c52:	e009      	b.n	8001c68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c54:	f7fe fc46 	bl	80004e4 <HAL_GetTick>
 8001c58:	0002      	movs	r2, r0
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	4a43      	ldr	r2, [pc, #268]	; (8001d6c <HAL_RCC_OscConfig+0x684>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e105      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c68:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4013      	ands	r3, r2
 8001c72:	d1ef      	bne.n	8001c54 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c74:	2323      	movs	r3, #35	; 0x23
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d105      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7e:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c82:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001c84:	493a      	ldr	r1, [pc, #232]	; (8001d70 <HAL_RCC_OscConfig+0x688>)
 8001c86:	400a      	ands	r2, r1
 8001c88:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	4013      	ands	r3, r2
 8001c92:	d049      	beq.n	8001d28 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d026      	beq.n	8001cea <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <HAL_RCC_OscConfig+0x68c>)
 8001cb6:	6a1a      	ldr	r2, [r3, #32]
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <HAL_RCC_OscConfig+0x68c>)
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	0189      	lsls	r1, r1, #6
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7fe fc0f 	bl	80004e4 <HAL_GetTick>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ccc:	f7fe fc0a 	bl	80004e4 <HAL_GetTick>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0ca      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0f1      	beq.n	8001ccc <HAL_RCC_OscConfig+0x5e4>
 8001ce8:	e01e      	b.n	8001d28 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	438a      	bics	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <HAL_RCC_OscConfig+0x68c>)
 8001cf8:	6a1a      	ldr	r2, [r3, #32]
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <HAL_RCC_OscConfig+0x68c>)
 8001cfc:	491e      	ldr	r1, [pc, #120]	; (8001d78 <HAL_RCC_OscConfig+0x690>)
 8001cfe:	400a      	ands	r2, r1
 8001d00:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7fe fbef 	bl	80004e4 <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d0c:	f7fe fbea 	bl	80004e4 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0aa      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d1f1      	bne.n	8001d0c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d100      	bne.n	8001d32 <HAL_RCC_OscConfig+0x64a>
 8001d30:	e09f      	b.n	8001e72 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d100      	bne.n	8001d3a <HAL_RCC_OscConfig+0x652>
 8001d38:	e078      	b.n	8001e2c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d159      	bne.n	8001df6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <HAL_RCC_OscConfig+0x670>)
 8001d48:	490c      	ldr	r1, [pc, #48]	; (8001d7c <HAL_RCC_OscConfig+0x694>)
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe fbc9 	bl	80004e4 <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d56:	e01c      	b.n	8001d92 <HAL_RCC_OscConfig+0x6aa>
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	ffff1fff 	.word	0xffff1fff
 8001d60:	fffffeff 	.word	0xfffffeff
 8001d64:	40007000 	.word	0x40007000
 8001d68:	fffffbff 	.word	0xfffffbff
 8001d6c:	00001388 	.word	0x00001388
 8001d70:	efffffff 	.word	0xefffffff
 8001d74:	40010000 	.word	0x40010000
 8001d78:	ffffdfff 	.word	0xffffdfff
 8001d7c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d80:	f7fe fbb0 	bl	80004e4 <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e070      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d92:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <HAL_RCC_OscConfig+0x794>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	049b      	lsls	r3, r3, #18
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_RCC_OscConfig+0x794>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4a37      	ldr	r2, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x798>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db6:	431a      	orrs	r2, r3
 8001db8:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x794>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <HAL_RCC_OscConfig+0x794>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <HAL_RCC_OscConfig+0x794>)
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	0449      	lsls	r1, r1, #17
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fb8a 	bl	80004e4 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7fe fb85 	bl	80004e4 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e045      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCC_OscConfig+0x794>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	049b      	lsls	r3, r3, #18
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x6ee>
 8001df4:	e03d      	b.n	8001e72 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_RCC_OscConfig+0x794>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCC_OscConfig+0x794>)
 8001dfc:	4921      	ldr	r1, [pc, #132]	; (8001e84 <HAL_RCC_OscConfig+0x79c>)
 8001dfe:	400a      	ands	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7fe fb6f 	bl	80004e4 <HAL_GetTick>
 8001e06:	0003      	movs	r3, r0
 8001e08:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe fb6a 	bl	80004e4 <HAL_GetTick>
 8001e10:	0002      	movs	r2, r0
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e02a      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_RCC_OscConfig+0x794>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	049b      	lsls	r3, r3, #18
 8001e26:	4013      	ands	r3, r2
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x724>
 8001e2a:	e022      	b.n	8001e72 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_RCC_OscConfig+0x794>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	025b      	lsls	r3, r3, #9
 8001e44:	401a      	ands	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d10f      	bne.n	8001e6e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	23f0      	movs	r3, #240	; 0xf0
 8001e52:	039b      	lsls	r3, r3, #14
 8001e54:	401a      	ands	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	23c0      	movs	r3, #192	; 0xc0
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	401a      	ands	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b00a      	add	sp, #40	; 0x28
 8001e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	ff02ffff 	.word	0xff02ffff
 8001e84:	feffffff 	.word	0xfeffffff

08001e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b5b0      	push	{r4, r5, r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e10d      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b88      	ldr	r3, [pc, #544]	; (80020c0 <HAL_RCC_ClockConfig+0x238>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d911      	bls.n	8001ece <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b85      	ldr	r3, [pc, #532]	; (80020c0 <HAL_RCC_ClockConfig+0x238>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4393      	bics	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <HAL_RCC_ClockConfig+0x238>)
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	4b80      	ldr	r3, [pc, #512]	; (80020c0 <HAL_RCC_ClockConfig+0x238>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0f4      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b7a      	ldr	r3, [pc, #488]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	22f0      	movs	r2, #240	; 0xf0
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	4b77      	ldr	r3, [pc, #476]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d100      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x70>
 8001ef6:	e089      	b.n	800200c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f00:	4b70      	ldr	r3, [pc, #448]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d120      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0d3      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	; 0x80
 8001f1e:	049b      	lsls	r3, r3, #18
 8001f20:	4013      	ands	r3, r2
 8001f22:	d114      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0c7      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f30:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2204      	movs	r2, #4
 8001f36:	4013      	ands	r3, r2
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0bc      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f3e:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e0b4      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2203      	movs	r2, #3
 8001f54:	4393      	bics	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f62:	f7fe fabf 	bl	80004e4 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d111      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f72:	e009      	b.n	8001f88 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe fab6 	bl	80004e4 <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e097      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f88:	4b4e      	ldr	r3, [pc, #312]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	220c      	movs	r2, #12
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d1ef      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xec>
 8001f94:	e03a      	b.n	800200c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d111      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9e:	e009      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe faa0 	bl	80004e4 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	4a47      	ldr	r2, [pc, #284]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e081      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb4:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	220c      	movs	r2, #12
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b0c      	cmp	r3, #12
 8001fbe:	d1ef      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x118>
 8001fc0:	e024      	b.n	800200c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d11b      	bne.n	8002002 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fca:	e009      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7fe fa8a 	bl	80004e4 <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	4a3c      	ldr	r2, [pc, #240]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e06b      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe0:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	220c      	movs	r2, #12
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d1ef      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x144>
 8001fec:	e00e      	b.n	800200c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fee:	f7fe fa79 	bl	80004e4 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a33      	ldr	r2, [pc, #204]	; (80020c8 <HAL_RCC_ClockConfig+0x240>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e05a      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	220c      	movs	r2, #12
 8002008:	4013      	ands	r3, r2
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <HAL_RCC_ClockConfig+0x238>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2201      	movs	r2, #1
 8002012:	4013      	ands	r3, r2
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d211      	bcs.n	800203e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_ClockConfig+0x238>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	4393      	bics	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCC_ClockConfig+0x238>)
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_RCC_ClockConfig+0x238>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	4013      	ands	r3, r2
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d001      	beq.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e03c      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2204      	movs	r2, #4
 8002044:	4013      	ands	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_RCC_ClockConfig+0x244>)
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8002058:	430a      	orrs	r2, r1
 800205a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2208      	movs	r2, #8
 8002062:	4013      	ands	r3, r2
 8002064:	d00a      	beq.n	800207c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_RCC_ClockConfig+0x248>)
 800206c:	4013      	ands	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	00da      	lsls	r2, r3, #3
 8002076:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800207c:	f000 f82e 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8002080:	0001      	movs	r1, r0
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <HAL_RCC_ClockConfig+0x23c>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	220f      	movs	r2, #15
 800208a:	4013      	ands	r3, r2
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_RCC_ClockConfig+0x24c>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	000a      	movs	r2, r1
 8002092:	40da      	lsrs	r2, r3
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_ClockConfig+0x250>)
 8002096:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002098:	250b      	movs	r5, #11
 800209a:	197c      	adds	r4, r7, r5
 800209c:	2000      	movs	r0, #0
 800209e:	f7fe f9eb 	bl	8000478 <HAL_InitTick>
 80020a2:	0003      	movs	r3, r0
 80020a4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80020a6:	197b      	adds	r3, r7, r5
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80020ae:	230b      	movs	r3, #11
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	e000      	b.n	80020b8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b004      	add	sp, #16
 80020be:	bdb0      	pop	{r4, r5, r7, pc}
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	00001388 	.word	0x00001388
 80020cc:	fffff8ff 	.word	0xfffff8ff
 80020d0:	ffffc7ff 	.word	0xffffc7ff
 80020d4:	08004c98 	.word	0x08004c98
 80020d8:	20000040 	.word	0x20000040

080020dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	220c      	movs	r2, #12
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d00e      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x34>
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d00f      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x3a>
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d157      	bne.n	80021aa <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2210      	movs	r2, #16
 8002100:	4013      	ands	r3, r2
 8002102:	d002      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002104:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002106:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002108:	e05d      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800210a:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800210c:	613b      	str	r3, [r7, #16]
      break;
 800210e:	e05a      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002110:	4b32      	ldr	r3, [pc, #200]	; (80021dc <HAL_RCC_GetSysClockFreq+0x100>)
 8002112:	613b      	str	r3, [r7, #16]
      break;
 8002114:	e057      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	0c9b      	lsrs	r3, r3, #18
 800211a:	220f      	movs	r2, #15
 800211c:	4013      	ands	r3, r2
 800211e:	4a30      	ldr	r2, [pc, #192]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	0d9b      	lsrs	r3, r3, #22
 8002128:	2203      	movs	r2, #3
 800212a:	4013      	ands	r3, r2
 800212c:	3301      	adds	r3, #1
 800212e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	4013      	ands	r3, r2
 800213a:	d00f      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	000a      	movs	r2, r1
 8002140:	0152      	lsls	r2, r2, #5
 8002142:	1a52      	subs	r2, r2, r1
 8002144:	0193      	lsls	r3, r2, #6
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	185b      	adds	r3, r3, r1
 800214c:	025b      	lsls	r3, r3, #9
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f7fd ffd9 	bl	8000108 <__udivsi3>
 8002156:	0003      	movs	r3, r0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e023      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2210      	movs	r2, #16
 8002162:	4013      	ands	r3, r2
 8002164:	d00f      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	000a      	movs	r2, r1
 800216a:	0152      	lsls	r2, r2, #5
 800216c:	1a52      	subs	r2, r2, r1
 800216e:	0193      	lsls	r3, r2, #6
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	185b      	adds	r3, r3, r1
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	0018      	movs	r0, r3
 800217c:	f7fd ffc4 	bl	8000108 <__udivsi3>
 8002180:	0003      	movs	r3, r0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00e      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	000a      	movs	r2, r1
 800218a:	0152      	lsls	r2, r2, #5
 800218c:	1a52      	subs	r2, r2, r1
 800218e:	0193      	lsls	r3, r2, #6
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	185b      	adds	r3, r3, r1
 8002196:	029b      	lsls	r3, r3, #10
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	0018      	movs	r0, r3
 800219c:	f7fd ffb4 	bl	8000108 <__udivsi3>
 80021a0:	0003      	movs	r3, r0
 80021a2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
      break;
 80021a8:	e00d      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	0b5b      	lsrs	r3, r3, #13
 80021b0:	2207      	movs	r2, #7
 80021b2:	4013      	ands	r3, r2
 80021b4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	0212      	lsls	r2, r2, #8
 80021be:	409a      	lsls	r2, r3
 80021c0:	0013      	movs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
      break;
 80021c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021c6:	693b      	ldr	r3, [r7, #16]
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b006      	add	sp, #24
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	003d0900 	.word	0x003d0900
 80021d8:	00f42400 	.word	0x00f42400
 80021dc:	007a1200 	.word	0x007a1200
 80021e0:	08004cb0 	.word	0x08004cb0

080021e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b02      	ldr	r3, [pc, #8]	; (80021f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	20000040 	.word	0x20000040

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021fc:	f7ff fff2 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002200:	0001      	movs	r1, r0
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	2207      	movs	r2, #7
 800220a:	4013      	ands	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	40d9      	lsrs	r1, r3
 8002212:	000b      	movs	r3, r1
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	40021000 	.word	0x40021000
 8002220:	08004ca8 	.word	0x08004ca8

08002224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002228:	f7ff ffdc 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 800222c:	0001      	movs	r1, r0
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	0adb      	lsrs	r3, r3, #11
 8002234:	2207      	movs	r2, #7
 8002236:	4013      	ands	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_RCC_GetPCLK2Freq+0x28>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	40d9      	lsrs	r1, r3
 800223e:	000b      	movs	r3, r1
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	40021000 	.word	0x40021000
 800224c:	08004ca8 	.word	0x08004ca8

08002250 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2220      	movs	r2, #32
 800225e:	4013      	ands	r3, r2
 8002260:	d100      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002262:	e0c7      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002264:	2317      	movs	r3, #23
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226c:	4b99      	ldr	r3, [pc, #612]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800226e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	055b      	lsls	r3, r3, #21
 8002274:	4013      	ands	r3, r2
 8002276:	d10a      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002278:	4b96      	ldr	r3, [pc, #600]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800227a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800227c:	4b95      	ldr	r3, [pc, #596]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	0549      	lsls	r1, r1, #21
 8002282:	430a      	orrs	r2, r1
 8002284:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002286:	2317      	movs	r3, #23
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	4b92      	ldr	r3, [pc, #584]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4013      	ands	r3, r2
 8002298:	d11a      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229a:	4b8f      	ldr	r3, [pc, #572]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b8e      	ldr	r3, [pc, #568]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0049      	lsls	r1, r1, #1
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a8:	f7fe f91c 	bl	80004e4 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7fe f917 	bl	80004e4 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e102      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b84      	ldr	r3, [pc, #528]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80022d0:	4b80      	ldr	r3, [pc, #512]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	23c0      	movs	r3, #192	; 0xc0
 80022d6:	039b      	lsls	r3, r3, #14
 80022d8:	4013      	ands	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	23c0      	movs	r3, #192	; 0xc0
 80022e2:	039b      	lsls	r3, r3, #14
 80022e4:	4013      	ands	r3, r2
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d013      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	23c0      	movs	r3, #192	; 0xc0
 80022f2:	029b      	lsls	r3, r3, #10
 80022f4:	401a      	ands	r2, r3
 80022f6:	23c0      	movs	r3, #192	; 0xc0
 80022f8:	029b      	lsls	r3, r3, #10
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d10a      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80022fe:	4b75      	ldr	r3, [pc, #468]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	029b      	lsls	r3, r3, #10
 8002306:	401a      	ands	r2, r3
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	029b      	lsls	r3, r3, #10
 800230c:	429a      	cmp	r2, r3
 800230e:	d101      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0da      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002314:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002318:	23c0      	movs	r3, #192	; 0xc0
 800231a:	029b      	lsls	r3, r3, #10
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d03b      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	23c0      	movs	r3, #192	; 0xc0
 800232c:	029b      	lsls	r3, r3, #10
 800232e:	4013      	ands	r3, r2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	429a      	cmp	r2, r3
 8002334:	d033      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2220      	movs	r2, #32
 800233c:	4013      	ands	r3, r2
 800233e:	d02e      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002340:	4b64      	ldr	r3, [pc, #400]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002344:	4a65      	ldr	r2, [pc, #404]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002346:	4013      	ands	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800234a:	4b62      	ldr	r3, [pc, #392]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800234c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800234e:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	0309      	lsls	r1, r1, #12
 8002354:	430a      	orrs	r2, r1
 8002356:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002358:	4b5e      	ldr	r3, [pc, #376]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800235a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800235c:	4b5d      	ldr	r3, [pc, #372]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800235e:	4960      	ldr	r1, [pc, #384]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002360:	400a      	ands	r2, r1
 8002362:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002364:	4b5b      	ldr	r3, [pc, #364]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4013      	ands	r3, r2
 8002372:	d014      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe f8b6 	bl	80004e4 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800237c:	e009      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7fe f8b1 	bl	80004e4 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	4a56      	ldr	r2, [pc, #344]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e09b      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002392:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002394:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4013      	ands	r3, r2
 800239c:	d0ef      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	23c0      	movs	r3, #192	; 0xc0
 80023a4:	029b      	lsls	r3, r3, #10
 80023a6:	401a      	ands	r2, r3
 80023a8:	23c0      	movs	r3, #192	; 0xc0
 80023aa:	029b      	lsls	r3, r3, #10
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d10c      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80023b0:	4b48      	ldr	r3, [pc, #288]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a4c      	ldr	r2, [pc, #304]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	0019      	movs	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	039b      	lsls	r3, r3, #14
 80023c2:	401a      	ands	r2, r3
 80023c4:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	23c0      	movs	r3, #192	; 0xc0
 80023d4:	029b      	lsls	r3, r3, #10
 80023d6:	401a      	ands	r2, r3
 80023d8:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023de:	2317      	movs	r3, #23
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e8:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ec:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023ee:	493f      	ldr	r1, [pc, #252]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2201      	movs	r2, #1
 80023fa:	4013      	ands	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023fe:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	2203      	movs	r2, #3
 8002404:	4393      	bics	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800240e:	430a      	orrs	r2, r1
 8002410:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2202      	movs	r2, #2
 8002418:	4013      	ands	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	220c      	movs	r2, #12
 8002422:	4393      	bics	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800242c:	430a      	orrs	r2, r1
 800242e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2204      	movs	r2, #4
 8002436:	4013      	ands	r3, r2
 8002438:	d009      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	4a2c      	ldr	r2, [pc, #176]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800244a:	430a      	orrs	r2, r1
 800244c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2208      	movs	r2, #8
 8002454:	4013      	ands	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800245e:	4013      	ands	r3, r2
 8002460:	0019      	movs	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002468:	430a      	orrs	r2, r1
 800246a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4013      	ands	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800247e:	4013      	ands	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002488:	430a      	orrs	r2, r1
 800248a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2240      	movs	r2, #64	; 0x40
 8002492:	4013      	ands	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800249c:	4013      	ands	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	4013      	ands	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80024b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b8:	4a10      	ldr	r2, [pc, #64]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b006      	add	sp, #24
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
 80024dc:	fffcffff 	.word	0xfffcffff
 80024e0:	fff7ffff 	.word	0xfff7ffff
 80024e4:	00001388 	.word	0x00001388
 80024e8:	ffcfffff 	.word	0xffcfffff
 80024ec:	efffffff 	.word	0xefffffff
 80024f0:	fffff3ff 	.word	0xfffff3ff
 80024f4:	ffffcfff 	.word	0xffffcfff
 80024f8:	fbffffff 	.word	0xfbffffff
 80024fc:	fff3ffff 	.word	0xfff3ffff

08002500 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e08e      	b.n	8002630 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2221      	movs	r2, #33	; 0x21
 8002516:	5c9b      	ldrb	r3, [r3, r2]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d107      	bne.n	800252e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	2100      	movs	r1, #0
 8002524:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	0018      	movs	r0, r3
 800252a:	f002 f97d 	bl	8004828 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2221      	movs	r2, #33	; 0x21
 8002532:	2102      	movs	r1, #2
 8002534:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	22ca      	movs	r2, #202	; 0xca
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2253      	movs	r2, #83	; 0x53
 8002544:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0018      	movs	r0, r3
 800254a:	f000 fbb2 	bl	8002cb2 <RTC_EnterInitMode>
 800254e:	1e03      	subs	r3, r0, #0
 8002550:	d009      	beq.n	8002566 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	22ff      	movs	r2, #255	; 0xff
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2221      	movs	r2, #33	; 0x21
 800255e:	2104      	movs	r1, #4
 8002560:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e064      	b.n	8002630 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4931      	ldr	r1, [pc, #196]	; (8002638 <HAL_RTC_Init+0x138>)
 8002572:	400a      	ands	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	68d2      	ldr	r2, [r2, #12]
 800259c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6919      	ldr	r1, [r3, #16]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	041a      	lsls	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	438a      	bics	r2, r1
 80025c0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2103      	movs	r1, #3
 80025ce:	438a      	bics	r2, r1
 80025d0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2220      	movs	r2, #32
 80025f2:	4013      	ands	r3, r2
 80025f4:	d113      	bne.n	800261e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 fb33 	bl	8002c64 <HAL_RTC_WaitForSynchro>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d00d      	beq.n	800261e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	22ff      	movs	r2, #255	; 0xff
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2221      	movs	r2, #33	; 0x21
 800260e:	2104      	movs	r1, #4
 8002610:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	2100      	movs	r1, #0
 8002618:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e008      	b.n	8002630 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2221      	movs	r2, #33	; 0x21
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800262e:	2300      	movs	r3, #0
  }
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}
 8002638:	ff8fffbf 	.word	0xff8fffbf

0800263c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2220      	movs	r2, #32
 800264c:	5c9b      	ldrb	r3, [r3, r2]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_RTC_SetTime+0x1a>
 8002652:	2302      	movs	r3, #2
 8002654:	e0ad      	b.n	80027b2 <HAL_RTC_SetTime+0x176>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	2101      	movs	r1, #1
 800265c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2221      	movs	r2, #33	; 0x21
 8002662:	2102      	movs	r1, #2
 8002664:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d125      	bne.n	80026b8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2240      	movs	r2, #64	; 0x40
 8002674:	4013      	ands	r3, r2
 8002676:	d102      	bne.n	800267e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	0018      	movs	r0, r3
 8002684:	f000 fb3f 	bl	8002d06 <RTC_ByteToBcd2>
 8002688:	0003      	movs	r3, r0
 800268a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	785b      	ldrb	r3, [r3, #1]
 8002690:	0018      	movs	r0, r3
 8002692:	f000 fb38 	bl	8002d06 <RTC_ByteToBcd2>
 8002696:	0003      	movs	r3, r0
 8002698:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800269a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	789b      	ldrb	r3, [r3, #2]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 fb30 	bl	8002d06 <RTC_ByteToBcd2>
 80026a6:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80026a8:	0022      	movs	r2, r4
 80026aa:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	78db      	ldrb	r3, [r3, #3]
 80026b0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e017      	b.n	80026e8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2240      	movs	r2, #64	; 0x40
 80026c0:	4013      	ands	r3, r2
 80026c2:	d102      	bne.n	80026ca <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80026d6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80026dc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	78db      	ldrb	r3, [r3, #3]
 80026e2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	22ca      	movs	r2, #202	; 0xca
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2253      	movs	r2, #83	; 0x53
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 fad9 	bl	8002cb2 <RTC_EnterInitMode>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d00d      	beq.n	8002720 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	22ff      	movs	r2, #255	; 0xff
 800270a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2221      	movs	r2, #33	; 0x21
 8002710:	2104      	movs	r1, #4
 8002712:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	2100      	movs	r1, #0
 800271a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e048      	b.n	80027b2 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4925      	ldr	r1, [pc, #148]	; (80027bc <HAL_RTC_SetTime+0x180>)
 8002728:	400a      	ands	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4922      	ldr	r1, [pc, #136]	; (80027c0 <HAL_RTC_SetTime+0x184>)
 8002738:	400a      	ands	r2, r1
 800273a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6899      	ldr	r1, [r3, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	431a      	orrs	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	438a      	bics	r2, r1
 8002762:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2220      	movs	r2, #32
 800276c:	4013      	ands	r3, r2
 800276e:	d113      	bne.n	8002798 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fa76 	bl	8002c64 <HAL_RTC_WaitForSynchro>
 8002778:	1e03      	subs	r3, r0, #0
 800277a:	d00d      	beq.n	8002798 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	22ff      	movs	r2, #255	; 0xff
 8002782:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2221      	movs	r2, #33	; 0x21
 8002788:	2104      	movs	r1, #4
 800278a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e00c      	b.n	80027b2 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	22ff      	movs	r2, #255	; 0xff
 800279e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2221      	movs	r2, #33	; 0x21
 80027a4:	2101      	movs	r1, #1
 80027a6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027b0:	2300      	movs	r3, #0
  }
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b007      	add	sp, #28
 80027b8:	bd90      	pop	{r4, r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	007f7f7f 	.word	0x007f7f7f
 80027c0:	fffbffff 	.word	0xfffbffff

080027c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	5c9b      	ldrb	r3, [r3, r2]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_RTC_SetDate+0x1a>
 80027da:	2302      	movs	r3, #2
 80027dc:	e099      	b.n	8002912 <HAL_RTC_SetDate+0x14e>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2221      	movs	r2, #33	; 0x21
 80027ea:	2102      	movs	r1, #2
 80027ec:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10e      	bne.n	8002812 <HAL_RTC_SetDate+0x4e>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	001a      	movs	r2, r3
 80027fa:	2310      	movs	r3, #16
 80027fc:	4013      	ands	r3, r2
 80027fe:	d008      	beq.n	8002812 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	785b      	ldrb	r3, [r3, #1]
 8002804:	2210      	movs	r2, #16
 8002806:	4393      	bics	r3, r2
 8002808:	b2db      	uxtb	r3, r3
 800280a:	330a      	adds	r3, #10
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11c      	bne.n	8002852 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	78db      	ldrb	r3, [r3, #3]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 fa72 	bl	8002d06 <RTC_ByteToBcd2>
 8002822:	0003      	movs	r3, r0
 8002824:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	785b      	ldrb	r3, [r3, #1]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fa6b 	bl	8002d06 <RTC_ByteToBcd2>
 8002830:	0003      	movs	r3, r0
 8002832:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002834:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	789b      	ldrb	r3, [r3, #2]
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fa63 	bl	8002d06 <RTC_ByteToBcd2>
 8002840:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002842:	0022      	movs	r2, r4
 8002844:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e00e      	b.n	8002870 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	78db      	ldrb	r3, [r3, #3]
 8002856:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800285e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002864:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	22ca      	movs	r2, #202	; 0xca
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2253      	movs	r2, #83	; 0x53
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	0018      	movs	r0, r3
 8002884:	f000 fa15 	bl	8002cb2 <RTC_EnterInitMode>
 8002888:	1e03      	subs	r3, r0, #0
 800288a:	d00d      	beq.n	80028a8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	22ff      	movs	r2, #255	; 0xff
 8002892:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2221      	movs	r2, #33	; 0x21
 8002898:	2104      	movs	r1, #4
 800289a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	2100      	movs	r1, #0
 80028a2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e034      	b.n	8002912 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	491b      	ldr	r1, [pc, #108]	; (800291c <HAL_RTC_SetDate+0x158>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	438a      	bics	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2220      	movs	r2, #32
 80028cc:	4013      	ands	r3, r2
 80028ce:	d113      	bne.n	80028f8 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 f9c6 	bl	8002c64 <HAL_RTC_WaitForSynchro>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d00d      	beq.n	80028f8 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	22ff      	movs	r2, #255	; 0xff
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2221      	movs	r2, #33	; 0x21
 80028e8:	2104      	movs	r1, #4
 80028ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	2100      	movs	r1, #0
 80028f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e00c      	b.n	8002912 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	22ff      	movs	r2, #255	; 0xff
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2221      	movs	r2, #33	; 0x21
 8002904:	2101      	movs	r1, #1
 8002906:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	2100      	movs	r1, #0
 800290e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
  }
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b007      	add	sp, #28
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	00ffff3f 	.word	0x00ffff3f

08002920 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	5c9b      	ldrb	r3, [r3, r2]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_RTC_SetAlarm_IT+0x1a>
 8002936:	2302      	movs	r3, #2
 8002938:	e130      	b.n	8002b9c <HAL_RTC_SetAlarm_IT+0x27c>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	2101      	movs	r1, #1
 8002940:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2221      	movs	r2, #33	; 0x21
 8002946:	2102      	movs	r1, #2
 8002948:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d136      	bne.n	80029be <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2240      	movs	r2, #64	; 0x40
 8002958:	4013      	ands	r3, r2
 800295a:	d102      	bne.n	8002962 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	0018      	movs	r0, r3
 8002968:	f000 f9cd 	bl	8002d06 <RTC_ByteToBcd2>
 800296c:	0003      	movs	r3, r0
 800296e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	785b      	ldrb	r3, [r3, #1]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 f9c6 	bl	8002d06 <RTC_ByteToBcd2>
 800297a:	0003      	movs	r3, r0
 800297c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800297e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	789b      	ldrb	r3, [r3, #2]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f9be 	bl	8002d06 <RTC_ByteToBcd2>
 800298a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800298c:	0022      	movs	r2, r4
 800298e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	78db      	ldrb	r3, [r3, #3]
 8002994:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002996:	431a      	orrs	r2, r3
 8002998:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2220      	movs	r2, #32
 800299e:	5c9b      	ldrb	r3, [r3, r2]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 f9b0 	bl	8002d06 <RTC_ByteToBcd2>
 80029a6:	0003      	movs	r3, r0
 80029a8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80029aa:	0022      	movs	r2, r4
 80029ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	e022      	b.n	8002a04 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2240      	movs	r2, #64	; 0x40
 80029c6:	4013      	ands	r3, r2
 80029c8:	d102      	bne.n	80029d0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2200      	movs	r2, #0
 80029ce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	785b      	ldrb	r3, [r3, #1]
 80029da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80029dc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80029e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	78db      	ldrb	r3, [r3, #3]
 80029e8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80029ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2120      	movs	r1, #32
 80029f0:	5c5b      	ldrb	r3, [r3, r1]
 80029f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80029f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80029fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	22ca      	movs	r2, #202	; 0xca
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2253      	movs	r2, #83	; 0x53
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d14e      	bne.n	8002aca <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	495b      	ldr	r1, [pc, #364]	; (8002ba4 <HAL_RTC_SetAlarm_IT+0x284>)
 8002a38:	400a      	ands	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	22ff      	movs	r2, #255	; 0xff
 8002a44:	401a      	ands	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4957      	ldr	r1, [pc, #348]	; (8002ba8 <HAL_RTC_SetAlarm_IT+0x288>)
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a50:	f7fd fd48 	bl	80004e4 <HAL_GetTick>
 8002a54:	0003      	movs	r3, r0
 8002a56:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a58:	e016      	b.n	8002a88 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a5a:	f7fd fd43 	bl	80004e4 <HAL_GetTick>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	1ad2      	subs	r2, r2, r3
 8002a64:	23fa      	movs	r3, #250	; 0xfa
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d90d      	bls.n	8002a88 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	22ff      	movs	r2, #255	; 0xff
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2221      	movs	r2, #33	; 0x21
 8002a78:	2103      	movs	r1, #3
 8002a7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e089      	b.n	8002b9c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4013      	ands	r3, r2
 8002a92:	d0e2      	beq.n	8002a5a <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2180      	movs	r1, #128	; 0x80
 8002ab0:	0049      	lsls	r1, r1, #1
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0149      	lsls	r1, r1, #5
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	e04d      	b.n	8002b66 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4935      	ldr	r1, [pc, #212]	; (8002bac <HAL_RTC_SetAlarm_IT+0x28c>)
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4931      	ldr	r1, [pc, #196]	; (8002bb0 <HAL_RTC_SetAlarm_IT+0x290>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002aee:	f7fd fcf9 	bl	80004e4 <HAL_GetTick>
 8002af2:	0003      	movs	r3, r0
 8002af4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002af6:	e016      	b.n	8002b26 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002af8:	f7fd fcf4 	bl	80004e4 <HAL_GetTick>
 8002afc:	0002      	movs	r2, r0
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	1ad2      	subs	r2, r2, r3
 8002b02:	23fa      	movs	r3, #250	; 0xfa
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90d      	bls.n	8002b26 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	22ff      	movs	r2, #255	; 0xff
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2221      	movs	r2, #33	; 0x21
 8002b16:	2103      	movs	r1, #3
 8002b18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e03a      	b.n	8002b9c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d0e2      	beq.n	8002af8 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	0089      	lsls	r1, r1, #2
 8002b50:	430a      	orrs	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	0189      	lsls	r1, r1, #6
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RTC_SetAlarm_IT+0x294>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RTC_SetAlarm_IT+0x294>)
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	0289      	lsls	r1, r1, #10
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_RTC_SetAlarm_IT+0x294>)
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_RTC_SetAlarm_IT+0x294>)
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	0289      	lsls	r1, r1, #10
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2221      	movs	r2, #33	; 0x21
 8002b8e:	2101      	movs	r1, #1
 8002b90:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b009      	add	sp, #36	; 0x24
 8002ba2:	bd90      	pop	{r4, r7, pc}
 8002ba4:	fffffeff 	.word	0xfffffeff
 8002ba8:	fffffe7f 	.word	0xfffffe7f
 8002bac:	fffffdff 	.word	0xfffffdff
 8002bb0:	fffffd7f 	.word	0xfffffd7f
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	015b      	lsls	r3, r3, #5
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d014      	beq.n	8002bf8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d00d      	beq.n	8002bf8 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	0018      	movs	r0, r3
 8002be0:	f000 f838 	bl	8002c54 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	22ff      	movs	r2, #255	; 0xff
 8002bec:	401a      	ands	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4915      	ldr	r1, [pc, #84]	; (8002c48 <HAL_RTC_AlarmIRQHandler+0x90>)
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	4013      	ands	r3, r2
 8002c04:	d014      	beq.n	8002c30 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4013      	ands	r3, r2
 8002c12:	d00d      	beq.n	8002c30 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 f89e 	bl	8002d58 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	22ff      	movs	r2, #255	; 0xff
 8002c24:	401a      	ands	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4908      	ldr	r1, [pc, #32]	; (8002c4c <HAL_RTC_AlarmIRQHandler+0x94>)
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	0292      	lsls	r2, r2, #10
 8002c36:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2221      	movs	r2, #33	; 0x21
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	5499      	strb	r1, [r3, r2]
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	fffffe7f 	.word	0xfffffe7f
 8002c4c:	fffffd7f 	.word	0xfffffd7f
 8002c50:	40010400 	.word	0x40010400

08002c54 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	21a0      	movs	r1, #160	; 0xa0
 8002c78:	438a      	bics	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002c7c:	f7fd fc32 	bl	80004e4 <HAL_GetTick>
 8002c80:	0003      	movs	r3, r0
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c84:	e00a      	b.n	8002c9c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c86:	f7fd fc2d 	bl	80004e4 <HAL_GetTick>
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad2      	subs	r2, r2, r3
 8002c90:	23fa      	movs	r3, #250	; 0xfa
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d901      	bls.n	8002c9c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e006      	b.n	8002caa <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d0ee      	beq.n	8002c86 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2240      	movs	r2, #64	; 0x40
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d11a      	bne.n	8002cfc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4252      	negs	r2, r2
 8002cce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002cd0:	f7fd fc08 	bl	80004e4 <HAL_GetTick>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002cd8:	e00a      	b.n	8002cf0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002cda:	f7fd fc03 	bl	80004e4 <HAL_GetTick>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad2      	subs	r2, r2, r3
 8002ce4:	23fa      	movs	r3, #250	; 0xfa
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d901      	bls.n	8002cf0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e006      	b.n	8002cfe <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2240      	movs	r2, #64	; 0x40
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d0ee      	beq.n	8002cda <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b004      	add	sp, #16
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	1dfb      	adds	r3, r7, #7
 8002d10:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002d16:	230b      	movs	r3, #11
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	1dfa      	adds	r2, r7, #7
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002d20:	e008      	b.n	8002d34 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3301      	adds	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002d28:	220b      	movs	r2, #11
 8002d2a:	18bb      	adds	r3, r7, r2
 8002d2c:	18ba      	adds	r2, r7, r2
 8002d2e:	7812      	ldrb	r2, [r2, #0]
 8002d30:	3a0a      	subs	r2, #10
 8002d32:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002d34:	230b      	movs	r3, #11
 8002d36:	18fb      	adds	r3, r7, r3
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b09      	cmp	r3, #9
 8002d3c:	d8f1      	bhi.n	8002d22 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	230b      	movs	r3, #11
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	b2db      	uxtb	r3, r3
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b004      	add	sp, #16
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e059      	b.n	8002e2e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2251      	movs	r2, #81	; 0x51
 8002d84:	5c9b      	ldrb	r3, [r3, r2]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2250      	movs	r2, #80	; 0x50
 8002d90:	2100      	movs	r1, #0
 8002d92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f001 fd66 	bl	8004868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2251      	movs	r2, #81	; 0x51
 8002da0:	2102      	movs	r1, #2
 8002da2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2140      	movs	r1, #64	; 0x40
 8002db0:	438a      	bics	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6999      	ldr	r1, [r3, #24]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	400b      	ands	r3, r1
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	0011      	movs	r1, r2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	0c1b      	lsrs	r3, r3, #16
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	4013      	ands	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4907      	ldr	r1, [pc, #28]	; (8002e38 <HAL_SPI_Init+0xd0>)
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2251      	movs	r2, #81	; 0x51
 8002e28:	2101      	movs	r1, #1
 8002e2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b002      	add	sp, #8
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	fffff7ff 	.word	0xfffff7ff

08002e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e044      	b.n	8002ed8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2270      	movs	r2, #112	; 0x70
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f001 fdad 	bl	80049c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2224      	movs	r2, #36	; 0x24
 8002e6a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2101      	movs	r1, #1
 8002e78:	438a      	bics	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 f966 	bl	8003150 <UART_SetConfig>
 8002e84:	0003      	movs	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e024      	b.n	8002ed8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 fc8d 	bl	80037b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	490d      	ldr	r1, [pc, #52]	; (8002ee0 <HAL_UART_Init+0xa4>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	212a      	movs	r1, #42	; 0x2a
 8002eba:	438a      	bics	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2101      	movs	r1, #1
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 fd25 	bl	8003920 <UART_CheckIdleState>
 8002ed6:	0003      	movs	r3, r0
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b002      	add	sp, #8
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	ffffb7ff 	.word	0xffffb7ff

08002ee4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	220f      	movs	r2, #15
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d112      	bne.n	8002f38 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2220      	movs	r2, #32
 8002f16:	4013      	ands	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d00a      	beq.n	8002f38 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d100      	bne.n	8002f2c <HAL_UART_IRQHandler+0x48>
 8002f2a:	e0f6      	b.n	800311a <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	0010      	movs	r0, r2
 8002f34:	4798      	blx	r3
      }
      return;
 8002f36:	e0f0      	b.n	800311a <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d100      	bne.n	8002f40 <HAL_UART_IRQHandler+0x5c>
 8002f3e:	e0b8      	b.n	80030b2 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2201      	movs	r2, #1
 8002f44:	4013      	ands	r3, r2
 8002f46:	d105      	bne.n	8002f54 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	2390      	movs	r3, #144	; 0x90
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d100      	bne.n	8002f54 <HAL_UART_IRQHandler+0x70>
 8002f52:	e0ae      	b.n	80030b2 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2201      	movs	r2, #1
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_UART_IRQHandler+0x96>
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f72:	2201      	movs	r2, #1
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d00d      	beq.n	8002f9e <HAL_UART_IRQHandler+0xba>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2201      	movs	r2, #1
 8002f86:	4013      	ands	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f96:	2204      	movs	r2, #4
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_UART_IRQHandler+0xde>
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fba:	2202      	movs	r2, #2
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d011      	beq.n	8002fee <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d103      	bne.n	8002fda <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fd8:	d009      	beq.n	8002fee <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2208      	movs	r2, #8
 8002fe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d100      	bne.n	8002ff8 <HAL_UART_IRQHandler+0x114>
 8002ff6:	e092      	b.n	800311e <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00c      	beq.n	800301a <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2220      	movs	r2, #32
 8003004:	4013      	ands	r3, r2
 8003006:	d008      	beq.n	800301a <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	0010      	movs	r0, r2
 8003018:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800301e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2240      	movs	r2, #64	; 0x40
 8003028:	4013      	ands	r3, r2
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d003      	beq.n	8003036 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2208      	movs	r2, #8
 8003032:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003034:	d033      	beq.n	800309e <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 fd01 	bl	8003a40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2240      	movs	r2, #64	; 0x40
 8003046:	4013      	ands	r3, r2
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d123      	bne.n	8003094 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2140      	movs	r1, #64	; 0x40
 8003058:	438a      	bics	r2, r1
 800305a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003068:	4a30      	ldr	r2, [pc, #192]	; (800312c <HAL_UART_IRQHandler+0x248>)
 800306a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003070:	0018      	movs	r0, r3
 8003072:	f7fd fb39 	bl	80006e8 <HAL_DMA_Abort_IT>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d019      	beq.n	80030ae <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003084:	0018      	movs	r0, r3
 8003086:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	e011      	b.n	80030ae <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 f857 	bl	8003140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003092:	e00c      	b.n	80030ae <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0018      	movs	r0, r3
 8003098:	f000 f852 	bl	8003140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	e007      	b.n	80030ae <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 f84d 	bl	8003140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80030ac:	e037      	b.n	800311e <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ae:	46c0      	nop			; (mov r8, r8)
    return;
 80030b0:	e035      	b.n	800311e <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	035b      	lsls	r3, r3, #13
 80030b8:	4013      	ands	r3, r2
 80030ba:	d00e      	beq.n	80030da <HAL_UART_IRQHandler+0x1f6>
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	03db      	lsls	r3, r3, #15
 80030c2:	4013      	ands	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	0352      	lsls	r2, r2, #13
 80030ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 fd05 	bl	8003ae2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030d8:	e024      	b.n	8003124 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	4013      	ands	r3, r2
 80030e0:	d00d      	beq.n	80030fe <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	2280      	movs	r2, #128	; 0x80
 80030e6:	4013      	ands	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d017      	beq.n	8003122 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	0010      	movs	r0, r2
 80030fa:	4798      	blx	r3
    }
    return;
 80030fc:	e011      	b.n	8003122 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	2240      	movs	r2, #64	; 0x40
 8003102:	4013      	ands	r3, r2
 8003104:	d00e      	beq.n	8003124 <HAL_UART_IRQHandler+0x240>
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2240      	movs	r2, #64	; 0x40
 800310a:	4013      	ands	r3, r2
 800310c:	d00a      	beq.n	8003124 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0018      	movs	r0, r3
 8003112:	f000 fccc 	bl	8003aae <UART_EndTransmit_IT>
    return;
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	e004      	b.n	8003124 <HAL_UART_IRQHandler+0x240>
      return;
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	e002      	b.n	8003124 <HAL_UART_IRQHandler+0x240>
    return;
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	e000      	b.n	8003124 <HAL_UART_IRQHandler+0x240>
    return;
 8003122:	46c0      	nop			; (mov r8, r8)
  }

}
 8003124:	46bd      	mov	sp, r7
 8003126:	b008      	add	sp, #32
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	08003a81 	.word	0x08003a81

08003130 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003150:	b5b0      	push	{r4, r5, r7, lr}
 8003152:	b08e      	sub	sp, #56	; 0x38
 8003154:	af00      	add	r7, sp, #0
 8003156:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003158:	231b      	movs	r3, #27
 800315a:	2218      	movs	r2, #24
 800315c:	4694      	mov	ip, r2
 800315e:	44bc      	add	ip, r7
 8003160:	4463      	add	r3, ip
 8003162:	2210      	movs	r2, #16
 8003164:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8003166:	2300      	movs	r3, #0
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800316a:	2313      	movs	r3, #19
 800316c:	2218      	movs	r2, #24
 800316e:	4694      	mov	ip, r2
 8003170:	44bc      	add	ip, r7
 8003172:	4463      	add	r3, ip
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003178:	2300      	movs	r3, #0
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	431a      	orrs	r2, r3
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	431a      	orrs	r2, r3
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4313      	orrs	r3, r2
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4aca      	ldr	r2, [pc, #808]	; (80034c4 <UART_SetConfig+0x374>)
 800319c:	4013      	ands	r3, r2
 800319e:	0019      	movs	r1, r3
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4ac5      	ldr	r2, [pc, #788]	; (80034c8 <UART_SetConfig+0x378>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4abf      	ldr	r2, [pc, #764]	; (80034cc <UART_SetConfig+0x37c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d004      	beq.n	80031dc <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d8:	4313      	orrs	r3, r2
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4abb      	ldr	r2, [pc, #748]	; (80034d0 <UART_SetConfig+0x380>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	0019      	movs	r1, r3
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4ab7      	ldr	r2, [pc, #732]	; (80034d4 <UART_SetConfig+0x384>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d134      	bne.n	8003266 <UART_SetConfig+0x116>
 80031fc:	4bb6      	ldr	r3, [pc, #728]	; (80034d8 <UART_SetConfig+0x388>)
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	2203      	movs	r2, #3
 8003202:	4013      	ands	r3, r2
 8003204:	2b01      	cmp	r3, #1
 8003206:	d015      	beq.n	8003234 <UART_SetConfig+0xe4>
 8003208:	d304      	bcc.n	8003214 <UART_SetConfig+0xc4>
 800320a:	2b02      	cmp	r3, #2
 800320c:	d00a      	beq.n	8003224 <UART_SetConfig+0xd4>
 800320e:	2b03      	cmp	r3, #3
 8003210:	d018      	beq.n	8003244 <UART_SetConfig+0xf4>
 8003212:	e01f      	b.n	8003254 <UART_SetConfig+0x104>
 8003214:	231b      	movs	r3, #27
 8003216:	2218      	movs	r2, #24
 8003218:	4694      	mov	ip, r2
 800321a:	44bc      	add	ip, r7
 800321c:	4463      	add	r3, ip
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e0c5      	b.n	80033b0 <UART_SetConfig+0x260>
 8003224:	231b      	movs	r3, #27
 8003226:	2218      	movs	r2, #24
 8003228:	4694      	mov	ip, r2
 800322a:	44bc      	add	ip, r7
 800322c:	4463      	add	r3, ip
 800322e:	2202      	movs	r2, #2
 8003230:	701a      	strb	r2, [r3, #0]
 8003232:	e0bd      	b.n	80033b0 <UART_SetConfig+0x260>
 8003234:	231b      	movs	r3, #27
 8003236:	2218      	movs	r2, #24
 8003238:	4694      	mov	ip, r2
 800323a:	44bc      	add	ip, r7
 800323c:	4463      	add	r3, ip
 800323e:	2204      	movs	r2, #4
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e0b5      	b.n	80033b0 <UART_SetConfig+0x260>
 8003244:	231b      	movs	r3, #27
 8003246:	2218      	movs	r2, #24
 8003248:	4694      	mov	ip, r2
 800324a:	44bc      	add	ip, r7
 800324c:	4463      	add	r3, ip
 800324e:	2208      	movs	r2, #8
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e0ad      	b.n	80033b0 <UART_SetConfig+0x260>
 8003254:	231b      	movs	r3, #27
 8003256:	2218      	movs	r2, #24
 8003258:	4694      	mov	ip, r2
 800325a:	44bc      	add	ip, r7
 800325c:	4463      	add	r3, ip
 800325e:	2210      	movs	r2, #16
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	e0a4      	b.n	80033b0 <UART_SetConfig+0x260>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a9c      	ldr	r2, [pc, #624]	; (80034dc <UART_SetConfig+0x38c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d137      	bne.n	80032e0 <UART_SetConfig+0x190>
 8003270:	4b99      	ldr	r3, [pc, #612]	; (80034d8 <UART_SetConfig+0x388>)
 8003272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003274:	220c      	movs	r2, #12
 8003276:	4013      	ands	r3, r2
 8003278:	2b04      	cmp	r3, #4
 800327a:	d018      	beq.n	80032ae <UART_SetConfig+0x15e>
 800327c:	d802      	bhi.n	8003284 <UART_SetConfig+0x134>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <UART_SetConfig+0x13e>
 8003282:	e024      	b.n	80032ce <UART_SetConfig+0x17e>
 8003284:	2b08      	cmp	r3, #8
 8003286:	d00a      	beq.n	800329e <UART_SetConfig+0x14e>
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d018      	beq.n	80032be <UART_SetConfig+0x16e>
 800328c:	e01f      	b.n	80032ce <UART_SetConfig+0x17e>
 800328e:	231b      	movs	r3, #27
 8003290:	2218      	movs	r2, #24
 8003292:	4694      	mov	ip, r2
 8003294:	44bc      	add	ip, r7
 8003296:	4463      	add	r3, ip
 8003298:	2200      	movs	r2, #0
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e088      	b.n	80033b0 <UART_SetConfig+0x260>
 800329e:	231b      	movs	r3, #27
 80032a0:	2218      	movs	r2, #24
 80032a2:	4694      	mov	ip, r2
 80032a4:	44bc      	add	ip, r7
 80032a6:	4463      	add	r3, ip
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e080      	b.n	80033b0 <UART_SetConfig+0x260>
 80032ae:	231b      	movs	r3, #27
 80032b0:	2218      	movs	r2, #24
 80032b2:	4694      	mov	ip, r2
 80032b4:	44bc      	add	ip, r7
 80032b6:	4463      	add	r3, ip
 80032b8:	2204      	movs	r2, #4
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e078      	b.n	80033b0 <UART_SetConfig+0x260>
 80032be:	231b      	movs	r3, #27
 80032c0:	2218      	movs	r2, #24
 80032c2:	4694      	mov	ip, r2
 80032c4:	44bc      	add	ip, r7
 80032c6:	4463      	add	r3, ip
 80032c8:	2208      	movs	r2, #8
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e070      	b.n	80033b0 <UART_SetConfig+0x260>
 80032ce:	231b      	movs	r3, #27
 80032d0:	2218      	movs	r2, #24
 80032d2:	4694      	mov	ip, r2
 80032d4:	44bc      	add	ip, r7
 80032d6:	4463      	add	r3, ip
 80032d8:	2210      	movs	r2, #16
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	e067      	b.n	80033b0 <UART_SetConfig+0x260>
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a7e      	ldr	r2, [pc, #504]	; (80034e0 <UART_SetConfig+0x390>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d107      	bne.n	80032fa <UART_SetConfig+0x1aa>
 80032ea:	231b      	movs	r3, #27
 80032ec:	2218      	movs	r2, #24
 80032ee:	4694      	mov	ip, r2
 80032f0:	44bc      	add	ip, r7
 80032f2:	4463      	add	r3, ip
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e05a      	b.n	80033b0 <UART_SetConfig+0x260>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a79      	ldr	r2, [pc, #484]	; (80034e4 <UART_SetConfig+0x394>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d107      	bne.n	8003314 <UART_SetConfig+0x1c4>
 8003304:	231b      	movs	r3, #27
 8003306:	2218      	movs	r2, #24
 8003308:	4694      	mov	ip, r2
 800330a:	44bc      	add	ip, r7
 800330c:	4463      	add	r3, ip
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e04d      	b.n	80033b0 <UART_SetConfig+0x260>
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a6c      	ldr	r2, [pc, #432]	; (80034cc <UART_SetConfig+0x37c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d141      	bne.n	80033a2 <UART_SetConfig+0x252>
 800331e:	4b6e      	ldr	r3, [pc, #440]	; (80034d8 <UART_SetConfig+0x388>)
 8003320:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003322:	23c0      	movs	r3, #192	; 0xc0
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	4013      	ands	r3, r2
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	00d2      	lsls	r2, r2, #3
 800332c:	4293      	cmp	r3, r2
 800332e:	d01f      	beq.n	8003370 <UART_SetConfig+0x220>
 8003330:	2280      	movs	r2, #128	; 0x80
 8003332:	00d2      	lsls	r2, r2, #3
 8003334:	4293      	cmp	r3, r2
 8003336:	d802      	bhi.n	800333e <UART_SetConfig+0x1ee>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <UART_SetConfig+0x200>
 800333c:	e028      	b.n	8003390 <UART_SetConfig+0x240>
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	0112      	lsls	r2, r2, #4
 8003342:	4293      	cmp	r3, r2
 8003344:	d00c      	beq.n	8003360 <UART_SetConfig+0x210>
 8003346:	22c0      	movs	r2, #192	; 0xc0
 8003348:	0112      	lsls	r2, r2, #4
 800334a:	4293      	cmp	r3, r2
 800334c:	d018      	beq.n	8003380 <UART_SetConfig+0x230>
 800334e:	e01f      	b.n	8003390 <UART_SetConfig+0x240>
 8003350:	231b      	movs	r3, #27
 8003352:	2218      	movs	r2, #24
 8003354:	4694      	mov	ip, r2
 8003356:	44bc      	add	ip, r7
 8003358:	4463      	add	r3, ip
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
 800335e:	e027      	b.n	80033b0 <UART_SetConfig+0x260>
 8003360:	231b      	movs	r3, #27
 8003362:	2218      	movs	r2, #24
 8003364:	4694      	mov	ip, r2
 8003366:	44bc      	add	ip, r7
 8003368:	4463      	add	r3, ip
 800336a:	2202      	movs	r2, #2
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	e01f      	b.n	80033b0 <UART_SetConfig+0x260>
 8003370:	231b      	movs	r3, #27
 8003372:	2218      	movs	r2, #24
 8003374:	4694      	mov	ip, r2
 8003376:	44bc      	add	ip, r7
 8003378:	4463      	add	r3, ip
 800337a:	2204      	movs	r2, #4
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e017      	b.n	80033b0 <UART_SetConfig+0x260>
 8003380:	231b      	movs	r3, #27
 8003382:	2218      	movs	r2, #24
 8003384:	4694      	mov	ip, r2
 8003386:	44bc      	add	ip, r7
 8003388:	4463      	add	r3, ip
 800338a:	2208      	movs	r2, #8
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e00f      	b.n	80033b0 <UART_SetConfig+0x260>
 8003390:	231b      	movs	r3, #27
 8003392:	2218      	movs	r2, #24
 8003394:	4694      	mov	ip, r2
 8003396:	44bc      	add	ip, r7
 8003398:	4463      	add	r3, ip
 800339a:	2210      	movs	r2, #16
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	e006      	b.n	80033b0 <UART_SetConfig+0x260>
 80033a2:	231b      	movs	r3, #27
 80033a4:	2218      	movs	r2, #24
 80033a6:	4694      	mov	ip, r2
 80033a8:	44bc      	add	ip, r7
 80033aa:	4463      	add	r3, ip
 80033ac:	2210      	movs	r2, #16
 80033ae:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a45      	ldr	r2, [pc, #276]	; (80034cc <UART_SetConfig+0x37c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d000      	beq.n	80033bc <UART_SetConfig+0x26c>
 80033ba:	e09d      	b.n	80034f8 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033bc:	231b      	movs	r3, #27
 80033be:	2218      	movs	r2, #24
 80033c0:	4694      	mov	ip, r2
 80033c2:	44bc      	add	ip, r7
 80033c4:	4463      	add	r3, ip
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d00d      	beq.n	80033e8 <UART_SetConfig+0x298>
 80033cc:	dc02      	bgt.n	80033d4 <UART_SetConfig+0x284>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <UART_SetConfig+0x28e>
 80033d2:	e01d      	b.n	8003410 <UART_SetConfig+0x2c0>
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d012      	beq.n	80033fe <UART_SetConfig+0x2ae>
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d015      	beq.n	8003408 <UART_SetConfig+0x2b8>
 80033dc:	e018      	b.n	8003410 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80033de:	f7fe ff0b 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 80033e2:	0003      	movs	r3, r0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033e6:	e01b      	b.n	8003420 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033e8:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <UART_SetConfig+0x388>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2210      	movs	r2, #16
 80033ee:	4013      	ands	r3, r2
 80033f0:	d002      	beq.n	80033f8 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80033f2:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <UART_SetConfig+0x398>)
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80033f6:	e013      	b.n	8003420 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80033f8:	4b3c      	ldr	r3, [pc, #240]	; (80034ec <UART_SetConfig+0x39c>)
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033fc:	e010      	b.n	8003420 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80033fe:	f7fe fe6d 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8003402:	0003      	movs	r3, r0
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003406:	e00b      	b.n	8003420 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800340e:	e007      	b.n	8003420 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003410:	2313      	movs	r3, #19
 8003412:	2218      	movs	r2, #24
 8003414:	4694      	mov	ip, r2
 8003416:	44bc      	add	ip, r7
 8003418:	4463      	add	r3, ip
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
        break;
 800341e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d100      	bne.n	8003428 <UART_SetConfig+0x2d8>
 8003426:	e1a6      	b.n	8003776 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	0013      	movs	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	189b      	adds	r3, r3, r2
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	429a      	cmp	r2, r3
 8003436:	d305      	bcc.n	8003444 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	429a      	cmp	r2, r3
 8003442:	d907      	bls.n	8003454 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 8003444:	2313      	movs	r3, #19
 8003446:	2218      	movs	r2, #24
 8003448:	4694      	mov	ip, r2
 800344a:	44bc      	add	ip, r7
 800344c:	4463      	add	r3, ip
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e190      	b.n	8003776 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	6939      	ldr	r1, [r7, #16]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	000b      	movs	r3, r1
 8003462:	0e1b      	lsrs	r3, r3, #24
 8003464:	0010      	movs	r0, r2
 8003466:	0205      	lsls	r5, r0, #8
 8003468:	431d      	orrs	r5, r3
 800346a:	000b      	movs	r3, r1
 800346c:	021c      	lsls	r4, r3, #8
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	085b      	lsrs	r3, r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68b8      	ldr	r0, [r7, #8]
 800347c:	68f9      	ldr	r1, [r7, #12]
 800347e:	1900      	adds	r0, r0, r4
 8003480:	4169      	adcs	r1, r5
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f7fc fec6 	bl	8000220 <__aeabi_uldivmod>
 8003494:	0003      	movs	r3, r0
 8003496:	000c      	movs	r4, r1
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <UART_SetConfig+0x3a0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d908      	bls.n	80034b4 <UART_SetConfig+0x364>
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <UART_SetConfig+0x3a4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d804      	bhi.n	80034b4 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	e160      	b.n	8003776 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 80034b4:	2313      	movs	r3, #19
 80034b6:	2218      	movs	r2, #24
 80034b8:	4694      	mov	ip, r2
 80034ba:	44bc      	add	ip, r7
 80034bc:	4463      	add	r3, ip
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e158      	b.n	8003776 <UART_SetConfig+0x626>
 80034c4:	efff69f3 	.word	0xefff69f3
 80034c8:	ffffcfff 	.word	0xffffcfff
 80034cc:	40004800 	.word	0x40004800
 80034d0:	fffff4ff 	.word	0xfffff4ff
 80034d4:	40013800 	.word	0x40013800
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40004400 	.word	0x40004400
 80034e0:	40004c00 	.word	0x40004c00
 80034e4:	40005000 	.word	0x40005000
 80034e8:	003d0900 	.word	0x003d0900
 80034ec:	00f42400 	.word	0x00f42400
 80034f0:	000002ff 	.word	0x000002ff
 80034f4:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	429a      	cmp	r2, r3
 8003502:	d000      	beq.n	8003506 <UART_SetConfig+0x3b6>
 8003504:	e0a9      	b.n	800365a <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8003506:	231b      	movs	r3, #27
 8003508:	2218      	movs	r2, #24
 800350a:	4694      	mov	ip, r2
 800350c:	44bc      	add	ip, r7
 800350e:	4463      	add	r3, ip
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b08      	cmp	r3, #8
 8003514:	d86d      	bhi.n	80035f2 <UART_SetConfig+0x4a2>
 8003516:	009a      	lsls	r2, r3, #2
 8003518:	4b9f      	ldr	r3, [pc, #636]	; (8003798 <UART_SetConfig+0x648>)
 800351a:	18d3      	adds	r3, r2, r3
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003520:	f7fe fe6a 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8003524:	0003      	movs	r3, r0
 8003526:	005a      	lsls	r2, r3, #1
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	18d2      	adds	r2, r2, r3
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0019      	movs	r1, r3
 8003536:	0010      	movs	r0, r2
 8003538:	f7fc fde6 	bl	8000108 <__udivsi3>
 800353c:	0003      	movs	r3, r0
 800353e:	b29b      	uxth	r3, r3
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003542:	e05e      	b.n	8003602 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003544:	f7fe fe6e 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8003548:	0003      	movs	r3, r0
 800354a:	005a      	lsls	r2, r3, #1
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	18d2      	adds	r2, r2, r3
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	0019      	movs	r1, r3
 800355a:	0010      	movs	r0, r2
 800355c:	f7fc fdd4 	bl	8000108 <__udivsi3>
 8003560:	0003      	movs	r3, r0
 8003562:	b29b      	uxth	r3, r3
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003566:	e04c      	b.n	8003602 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003568:	4b8c      	ldr	r3, [pc, #560]	; (800379c <UART_SetConfig+0x64c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2210      	movs	r2, #16
 800356e:	4013      	ands	r3, r2
 8003570:	d00e      	beq.n	8003590 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	4a89      	ldr	r2, [pc, #548]	; (80037a0 <UART_SetConfig+0x650>)
 800357a:	189a      	adds	r2, r3, r2
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0019      	movs	r1, r3
 8003582:	0010      	movs	r0, r2
 8003584:	f7fc fdc0 	bl	8000108 <__udivsi3>
 8003588:	0003      	movs	r3, r0
 800358a:	b29b      	uxth	r3, r3
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800358e:	e038      	b.n	8003602 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	4a83      	ldr	r2, [pc, #524]	; (80037a4 <UART_SetConfig+0x654>)
 8003598:	189a      	adds	r2, r3, r2
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0019      	movs	r1, r3
 80035a0:	0010      	movs	r0, r2
 80035a2:	f7fc fdb1 	bl	8000108 <__udivsi3>
 80035a6:	0003      	movs	r3, r0
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035ac:	e029      	b.n	8003602 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80035ae:	f7fe fd95 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 80035b2:	0003      	movs	r3, r0
 80035b4:	005a      	lsls	r2, r3, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	085b      	lsrs	r3, r3, #1
 80035bc:	18d2      	adds	r2, r2, r3
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	0019      	movs	r1, r3
 80035c4:	0010      	movs	r0, r2
 80035c6:	f7fc fd9f 	bl	8000108 <__udivsi3>
 80035ca:	0003      	movs	r3, r0
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035d0:	e017      	b.n	8003602 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	0252      	lsls	r2, r2, #9
 80035dc:	189a      	adds	r2, r3, r2
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	0019      	movs	r1, r3
 80035e4:	0010      	movs	r0, r2
 80035e6:	f7fc fd8f 	bl	8000108 <__udivsi3>
 80035ea:	0003      	movs	r3, r0
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035f0:	e007      	b.n	8003602 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80035f2:	2313      	movs	r3, #19
 80035f4:	2218      	movs	r2, #24
 80035f6:	4694      	mov	ip, r2
 80035f8:	44bc      	add	ip, r7
 80035fa:	4463      	add	r3, ip
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
        break;
 8003600:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d920      	bls.n	800364a <UART_SetConfig+0x4fa>
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	4a67      	ldr	r2, [pc, #412]	; (80037a8 <UART_SetConfig+0x658>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d81c      	bhi.n	800364a <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	b29a      	uxth	r2, r3
 8003614:	200a      	movs	r0, #10
 8003616:	2418      	movs	r4, #24
 8003618:	193b      	adds	r3, r7, r4
 800361a:	181b      	adds	r3, r3, r0
 800361c:	210f      	movs	r1, #15
 800361e:	438a      	bics	r2, r1
 8003620:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	b29b      	uxth	r3, r3
 8003628:	2207      	movs	r2, #7
 800362a:	4013      	ands	r3, r2
 800362c:	b299      	uxth	r1, r3
 800362e:	193b      	adds	r3, r7, r4
 8003630:	181b      	adds	r3, r3, r0
 8003632:	193a      	adds	r2, r7, r4
 8003634:	1812      	adds	r2, r2, r0
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	193a      	adds	r2, r7, r4
 8003642:	1812      	adds	r2, r2, r0
 8003644:	8812      	ldrh	r2, [r2, #0]
 8003646:	60da      	str	r2, [r3, #12]
 8003648:	e095      	b.n	8003776 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800364a:	2313      	movs	r3, #19
 800364c:	2218      	movs	r2, #24
 800364e:	4694      	mov	ip, r2
 8003650:	44bc      	add	ip, r7
 8003652:	4463      	add	r3, ip
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	e08d      	b.n	8003776 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 800365a:	231b      	movs	r3, #27
 800365c:	2218      	movs	r2, #24
 800365e:	4694      	mov	ip, r2
 8003660:	44bc      	add	ip, r7
 8003662:	4463      	add	r3, ip
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b08      	cmp	r3, #8
 8003668:	d86a      	bhi.n	8003740 <UART_SetConfig+0x5f0>
 800366a:	009a      	lsls	r2, r3, #2
 800366c:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <UART_SetConfig+0x65c>)
 800366e:	18d3      	adds	r3, r2, r3
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003674:	f7fe fdc0 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8003678:	0002      	movs	r2, r0
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	18d2      	adds	r2, r2, r3
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	0019      	movs	r1, r3
 8003688:	0010      	movs	r0, r2
 800368a:	f7fc fd3d 	bl	8000108 <__udivsi3>
 800368e:	0003      	movs	r3, r0
 8003690:	b29b      	uxth	r3, r3
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003694:	e05c      	b.n	8003750 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003696:	f7fe fdc5 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 800369a:	0002      	movs	r2, r0
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	18d2      	adds	r2, r2, r3
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	0019      	movs	r1, r3
 80036aa:	0010      	movs	r0, r2
 80036ac:	f7fc fd2c 	bl	8000108 <__udivsi3>
 80036b0:	0003      	movs	r3, r0
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036b6:	e04b      	b.n	8003750 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b8:	4b38      	ldr	r3, [pc, #224]	; (800379c <UART_SetConfig+0x64c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2210      	movs	r2, #16
 80036be:	4013      	ands	r3, r2
 80036c0:	d00e      	beq.n	80036e0 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	4a39      	ldr	r2, [pc, #228]	; (80037b0 <UART_SetConfig+0x660>)
 80036ca:	189a      	adds	r2, r3, r2
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	0019      	movs	r1, r3
 80036d2:	0010      	movs	r0, r2
 80036d4:	f7fc fd18 	bl	8000108 <__udivsi3>
 80036d8:	0003      	movs	r3, r0
 80036da:	b29b      	uxth	r3, r3
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80036de:	e037      	b.n	8003750 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	4a33      	ldr	r2, [pc, #204]	; (80037b4 <UART_SetConfig+0x664>)
 80036e8:	189a      	adds	r2, r3, r2
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	0019      	movs	r1, r3
 80036f0:	0010      	movs	r0, r2
 80036f2:	f7fc fd09 	bl	8000108 <__udivsi3>
 80036f6:	0003      	movs	r3, r0
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036fc:	e028      	b.n	8003750 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80036fe:	f7fe fced 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8003702:	0002      	movs	r2, r0
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	18d2      	adds	r2, r2, r3
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	0019      	movs	r1, r3
 8003712:	0010      	movs	r0, r2
 8003714:	f7fc fcf8 	bl	8000108 <__udivsi3>
 8003718:	0003      	movs	r3, r0
 800371a:	b29b      	uxth	r3, r3
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800371e:	e017      	b.n	8003750 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	0212      	lsls	r2, r2, #8
 800372a:	189a      	adds	r2, r3, r2
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	0019      	movs	r1, r3
 8003732:	0010      	movs	r0, r2
 8003734:	f7fc fce8 	bl	8000108 <__udivsi3>
 8003738:	0003      	movs	r3, r0
 800373a:	b29b      	uxth	r3, r3
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800373e:	e007      	b.n	8003750 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003740:	2313      	movs	r3, #19
 8003742:	2218      	movs	r2, #24
 8003744:	4694      	mov	ip, r2
 8003746:	44bc      	add	ip, r7
 8003748:	4463      	add	r3, ip
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
        break;
 800374e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	2b0f      	cmp	r3, #15
 8003754:	d908      	bls.n	8003768 <UART_SetConfig+0x618>
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <UART_SetConfig+0x658>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d804      	bhi.n	8003768 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	e006      	b.n	8003776 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8003768:	2313      	movs	r3, #19
 800376a:	2218      	movs	r2, #24
 800376c:	4694      	mov	ip, r2
 800376e:	44bc      	add	ip, r7
 8003770:	4463      	add	r3, ip
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	2200      	movs	r2, #0
 800377a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2200      	movs	r2, #0
 8003780:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003782:	2313      	movs	r3, #19
 8003784:	2218      	movs	r2, #24
 8003786:	4694      	mov	ip, r2
 8003788:	44bc      	add	ip, r7
 800378a:	4463      	add	r3, ip
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b00e      	add	sp, #56	; 0x38
 8003794:	bdb0      	pop	{r4, r5, r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	08004c2c 	.word	0x08004c2c
 800379c:	40021000 	.word	0x40021000
 80037a0:	007a1200 	.word	0x007a1200
 80037a4:	01e84800 	.word	0x01e84800
 80037a8:	0000ffff 	.word	0x0000ffff
 80037ac:	08004c50 	.word	0x08004c50
 80037b0:	003d0900 	.word	0x003d0900
 80037b4:	00f42400 	.word	0x00f42400

080037b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	2201      	movs	r2, #1
 80037c6:	4013      	ands	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4a4a      	ldr	r2, [pc, #296]	; (80038fc <UART_AdvFeatureConfig+0x144>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	0019      	movs	r1, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	2202      	movs	r2, #2
 80037e8:	4013      	ands	r3, r2
 80037ea:	d00b      	beq.n	8003804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4a43      	ldr	r2, [pc, #268]	; (8003900 <UART_AdvFeatureConfig+0x148>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	2204      	movs	r2, #4
 800380a:	4013      	ands	r3, r2
 800380c:	d00b      	beq.n	8003826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a3b      	ldr	r2, [pc, #236]	; (8003904 <UART_AdvFeatureConfig+0x14c>)
 8003816:	4013      	ands	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2208      	movs	r2, #8
 800382c:	4013      	ands	r3, r2
 800382e:	d00b      	beq.n	8003848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a34      	ldr	r2, [pc, #208]	; (8003908 <UART_AdvFeatureConfig+0x150>)
 8003838:	4013      	ands	r3, r2
 800383a:	0019      	movs	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	2210      	movs	r2, #16
 800384e:	4013      	ands	r3, r2
 8003850:	d00b      	beq.n	800386a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4a2c      	ldr	r2, [pc, #176]	; (800390c <UART_AdvFeatureConfig+0x154>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	2220      	movs	r2, #32
 8003870:	4013      	ands	r3, r2
 8003872:	d00b      	beq.n	800388c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	4a25      	ldr	r2, [pc, #148]	; (8003910 <UART_AdvFeatureConfig+0x158>)
 800387c:	4013      	ands	r3, r2
 800387e:	0019      	movs	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2240      	movs	r2, #64	; 0x40
 8003892:	4013      	ands	r3, r2
 8003894:	d01d      	beq.n	80038d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <UART_AdvFeatureConfig+0x15c>)
 800389e:	4013      	ands	r3, r2
 80038a0:	0019      	movs	r1, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	035b      	lsls	r3, r3, #13
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d10b      	bne.n	80038d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a15      	ldr	r2, [pc, #84]	; (8003918 <UART_AdvFeatureConfig+0x160>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	0019      	movs	r1, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	2280      	movs	r2, #128	; 0x80
 80038d8:	4013      	ands	r3, r2
 80038da:	d00b      	beq.n	80038f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4a0e      	ldr	r2, [pc, #56]	; (800391c <UART_AdvFeatureConfig+0x164>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	605a      	str	r2, [r3, #4]
  }
}
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	fffdffff 	.word	0xfffdffff
 8003900:	fffeffff 	.word	0xfffeffff
 8003904:	fffbffff 	.word	0xfffbffff
 8003908:	ffff7fff 	.word	0xffff7fff
 800390c:	ffffefff 	.word	0xffffefff
 8003910:	ffffdfff 	.word	0xffffdfff
 8003914:	ffefffff 	.word	0xffefffff
 8003918:	ff9fffff 	.word	0xff9fffff
 800391c:	fff7ffff 	.word	0xfff7ffff

08003920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800392e:	f7fc fdd9 	bl	80004e4 <HAL_GetTick>
 8003932:	0003      	movs	r3, r0
 8003934:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2208      	movs	r2, #8
 800393e:	4013      	ands	r3, r2
 8003940:	2b08      	cmp	r3, #8
 8003942:	d10d      	bne.n	8003960 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	0399      	lsls	r1, r3, #14
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <UART_CheckIdleState+0x88>)
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	0013      	movs	r3, r2
 8003952:	2200      	movs	r2, #0
 8003954:	f000 f82a 	bl	80039ac <UART_WaitOnFlagUntilTimeout>
 8003958:	1e03      	subs	r3, r0, #0
 800395a:	d001      	beq.n	8003960 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e01f      	b.n	80039a0 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2204      	movs	r2, #4
 8003968:	4013      	ands	r3, r2
 800396a:	2b04      	cmp	r3, #4
 800396c:	d10d      	bne.n	800398a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	03d9      	lsls	r1, r3, #15
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <UART_CheckIdleState+0x88>)
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	0013      	movs	r3, r2
 800397c:	2200      	movs	r2, #0
 800397e:	f000 f815 	bl	80039ac <UART_WaitOnFlagUntilTimeout>
 8003982:	1e03      	subs	r3, r0, #0
 8003984:	d001      	beq.n	800398a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e00a      	b.n	80039a0 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2270      	movs	r2, #112	; 0x70
 800399a:	2100      	movs	r1, #0
 800399c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b004      	add	sp, #16
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	01ffffff 	.word	0x01ffffff

080039ac <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	1dfb      	adds	r3, r7, #7
 80039ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039bc:	e029      	b.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	3301      	adds	r3, #1
 80039c2:	d026      	beq.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c4:	f7fc fd8e 	bl	80004e4 <HAL_GetTick>
 80039c8:	0002      	movs	r2, r0
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d302      	bcc.n	80039da <UART_WaitOnFlagUntilTimeout+0x2e>
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d11b      	bne.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4915      	ldr	r1, [pc, #84]	; (8003a3c <UART_WaitOnFlagUntilTimeout+0x90>)
 80039e6:	400a      	ands	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2101      	movs	r1, #1
 80039f6:	438a      	bics	r2, r1
 80039f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2270      	movs	r2, #112	; 0x70
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e00f      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	425a      	negs	r2, r3
 8003a22:	4153      	adcs	r3, r2
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	001a      	movs	r2, r3
 8003a28:	1dfb      	adds	r3, r7, #7
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d0c6      	beq.n	80039be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	0018      	movs	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b004      	add	sp, #16
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	fffffe5f 	.word	0xfffffe5f

08003a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	490a      	ldr	r1, [pc, #40]	; (8003a7c <UART_EndRxTransfer+0x3c>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2101      	movs	r1, #1
 8003a64:	438a      	bics	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b002      	add	sp, #8
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	fffffedf 	.word	0xfffffedf

08003a80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	225a      	movs	r2, #90	; 0x5a
 8003a92:	2100      	movs	r1, #0
 8003a94:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2252      	movs	r2, #82	; 0x52
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7ff fb4d 	bl	8003140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b004      	add	sp, #16
 8003aac:	bd80      	pop	{r7, pc}

08003aae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2140      	movs	r1, #64	; 0x40
 8003ac2:	438a      	bics	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7ff fb2b 	bl	8003130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b002      	add	sp, #8
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b002      	add	sp, #8
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e03f      	b.n	8003b86 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2249      	movs	r2, #73	; 0x49
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2248      	movs	r2, #72	; 0x48
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 ff0b 	bl	8004938 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2249      	movs	r2, #73	; 0x49
 8003b26:	2102      	movs	r1, #2
 8003b28:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2101      	movs	r1, #1
 8003b36:	438a      	bics	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 f91d 	bl	8003d7c <USART_SetConfig>
 8003b42:	0003      	movs	r3, r0
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e01c      	b.n	8003b86 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	490e      	ldr	r1, [pc, #56]	; (8003b90 <HAL_USART_Init+0x9c>)
 8003b58:	400a      	ands	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	212a      	movs	r1, #42	; 0x2a
 8003b68:	438a      	bics	r2, r1
 8003b6a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2101      	movs	r1, #1
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
  
  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 fa66 	bl	8004050 <USART_CheckIdleState>
 8003b84:	0003      	movs	r3, r0
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b002      	add	sp, #8
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	ffffbfff 	.word	0xffffbfff

08003b94 <HAL_USART_Transmit>:
  * @param  Size Amount of data to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	1dbb      	adds	r3, r7, #6
 8003ba2:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2249      	movs	r2, #73	; 0x49
 8003ba8:	5c9b      	ldrb	r3, [r3, r2]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d000      	beq.n	8003bb2 <HAL_USART_Transmit+0x1e>
 8003bb0:	e0a9      	b.n	8003d06 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_USART_Transmit+0x2c>
 8003bb8:	1dbb      	adds	r3, r7, #6
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0a1      	b.n	8003d08 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	015b      	lsls	r3, r3, #5
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d109      	bne.n	8003be4 <HAL_USART_Transmit+0x50>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d001      	beq.n	8003be4 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e091      	b.n	8003d08 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2248      	movs	r2, #72	; 0x48
 8003be8:	5c9b      	ldrb	r3, [r3, r2]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_USART_Transmit+0x5e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e08a      	b.n	8003d08 <HAL_USART_Transmit+0x174>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2248      	movs	r2, #72	; 0x48
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2249      	movs	r2, #73	; 0x49
 8003c04:	2112      	movs	r1, #18
 8003c06:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c08:	f7fc fc6c 	bl	80004e4 <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1dba      	adds	r2, r7, #6
 8003c14:	8812      	ldrh	r2, [r2, #0]
 8003c16:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1dba      	adds	r2, r7, #6
 8003c1c:	8812      	ldrh	r2, [r2, #0]
 8003c1e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	015b      	lsls	r3, r3, #5
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d108      	bne.n	8003c3e <HAL_USART_Transmit+0xaa>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	e003      	b.n	8003c46 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8003c46:	e02a      	b.n	8003c9e <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	0013      	movs	r3, r2
 8003c52:	2200      	movs	r2, #0
 8003c54:	2180      	movs	r1, #128	; 0x80
 8003c56:	f000 f85b 	bl	8003d10 <USART_WaitOnFlagUntilTimeout>
 8003c5a:	1e03      	subs	r3, r0, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e052      	b.n	8003d08 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10b      	bne.n	8003c80 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	001a      	movs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	05d2      	lsls	r2, r2, #23
 8003c74:	0dd2      	lsrs	r2, r2, #23
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	e007      	b.n	8003c90 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1cf      	bne.n	8003c48 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	0013      	movs	r3, r2
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2140      	movs	r1, #64	; 0x40
 8003cb6:	f000 f82b 	bl	8003d10 <USART_WaitOnFlagUntilTimeout>
 8003cba:	1e03      	subs	r3, r0, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e022      	b.n	8003d08 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2240      	movs	r2, #64	; 0x40
 8003cc8:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2208      	movs	r2, #8
 8003cd0:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2108      	movs	r1, #8
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2110      	movs	r1, #16
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2249      	movs	r2, #73	; 0x49
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2248      	movs	r2, #72	; 0x48
 8003cfe:	2100      	movs	r1, #0
 8003d00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e000      	b.n	8003d08 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
  }
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b008      	add	sp, #32
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <USART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003d20:	e017      	b.n	8003d52 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	3301      	adds	r3, #1
 8003d26:	d014      	beq.n	8003d52 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d28:	f7fc fbdc 	bl	80004e4 <HAL_GetTick>
 8003d2c:	0002      	movs	r2, r0
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d302      	bcc.n	8003d3e <USART_WaitOnFlagUntilTimeout+0x2e>
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2249      	movs	r2, #73	; 0x49
 8003d42:	2101      	movs	r1, #1
 8003d44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2248      	movs	r2, #72	; 0x48
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e00f      	b.n	8003d72 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	425a      	negs	r2, r3
 8003d62:	4153      	adcs	r3, r2
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	001a      	movs	r2, r3
 8003d68:	1dfb      	adds	r3, r7, #7
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d0d8      	beq.n	8003d22 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	0018      	movs	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b004      	add	sp, #16
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8003d84:	2316      	movs	r3, #22
 8003d86:	18fb      	adds	r3, r7, r3
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	0212      	lsls	r2, r2, #8
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a9d      	ldr	r2, [pc, #628]	; (8004024 <USART_SetConfig+0x2a8>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4a8e      	ldr	r2, [pc, #568]	; (8004028 <USART_SetConfig+0x2ac>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	0019      	movs	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a8a      	ldr	r2, [pc, #552]	; (800402c <USART_SetConfig+0x2b0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d125      	bne.n	8003e54 <USART_SetConfig+0xd8>
 8003e08:	4b89      	ldr	r3, [pc, #548]	; (8004030 <USART_SetConfig+0x2b4>)
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d00f      	beq.n	8003e34 <USART_SetConfig+0xb8>
 8003e14:	d304      	bcc.n	8003e20 <USART_SetConfig+0xa4>
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d007      	beq.n	8003e2a <USART_SetConfig+0xae>
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d00f      	beq.n	8003e3e <USART_SetConfig+0xc2>
 8003e1e:	e013      	b.n	8003e48 <USART_SetConfig+0xcc>
 8003e20:	2317      	movs	r3, #23
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e05a      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003e2a:	2317      	movs	r3, #23
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	2202      	movs	r2, #2
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e055      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003e34:	2317      	movs	r3, #23
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	2204      	movs	r2, #4
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e050      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003e3e:	2317      	movs	r3, #23
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	2208      	movs	r2, #8
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	e04b      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003e48:	2317      	movs	r3, #23
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	2210      	movs	r2, #16
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	e045      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a76      	ldr	r2, [pc, #472]	; (8004034 <USART_SetConfig+0x2b8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d128      	bne.n	8003eb0 <USART_SetConfig+0x134>
 8003e5e:	4b74      	ldr	r3, [pc, #464]	; (8004030 <USART_SetConfig+0x2b4>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	220c      	movs	r2, #12
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d012      	beq.n	8003e90 <USART_SetConfig+0x114>
 8003e6a:	d802      	bhi.n	8003e72 <USART_SetConfig+0xf6>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <USART_SetConfig+0x100>
 8003e70:	e018      	b.n	8003ea4 <USART_SetConfig+0x128>
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d007      	beq.n	8003e86 <USART_SetConfig+0x10a>
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d00f      	beq.n	8003e9a <USART_SetConfig+0x11e>
 8003e7a:	e013      	b.n	8003ea4 <USART_SetConfig+0x128>
 8003e7c:	2317      	movs	r3, #23
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e02c      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003e86:	2317      	movs	r3, #23
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e027      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003e90:	2317      	movs	r3, #23
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	2204      	movs	r2, #4
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	e022      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003e9a:	2317      	movs	r3, #23
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e01d      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003ea4:	2317      	movs	r3, #23
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	46c0      	nop			; (mov r8, r8)
 8003eae:	e017      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a60      	ldr	r2, [pc, #384]	; (8004038 <USART_SetConfig+0x2bc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d104      	bne.n	8003ec4 <USART_SetConfig+0x148>
 8003eba:	2317      	movs	r3, #23
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e00d      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a5c      	ldr	r2, [pc, #368]	; (800403c <USART_SetConfig+0x2c0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d104      	bne.n	8003ed8 <USART_SetConfig+0x15c>
 8003ece:	2317      	movs	r3, #23
 8003ed0:	18fb      	adds	r3, r7, r3
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	e003      	b.n	8003ee0 <USART_SetConfig+0x164>
 8003ed8:	2317      	movs	r3, #23
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	2210      	movs	r2, #16
 8003ede:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8003ee0:	2317      	movs	r3, #23
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d867      	bhi.n	8003fba <USART_SetConfig+0x23e>
 8003eea:	009a      	lsls	r2, r3, #2
 8003eec:	4b54      	ldr	r3, [pc, #336]	; (8004040 <USART_SetConfig+0x2c4>)
 8003eee:	18d3      	adds	r3, r2, r3
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	469f      	mov	pc, r3
  {
    case USART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate));
 8003ef4:	f7fe f980 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	005a      	lsls	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	18d2      	adds	r2, r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	0019      	movs	r1, r3
 8003f0a:	0010      	movs	r0, r2
 8003f0c:	f7fc f8fc 	bl	8000108 <__udivsi3>
 8003f10:	0003      	movs	r3, r0
 8003f12:	613b      	str	r3, [r7, #16]
      break;
 8003f14:	e056      	b.n	8003fc4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate));
 8003f16:	f7fe f985 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	005a      	lsls	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	18d2      	adds	r2, r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	0010      	movs	r0, r2
 8003f2e:	f7fc f8eb 	bl	8000108 <__udivsi3>
 8003f32:	0003      	movs	r3, r0
 8003f34:	613b      	str	r3, [r7, #16]
      break;
 8003f36:	e045      	b.n	8003fc4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f38:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <USART_SetConfig+0x2b4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d00d      	beq.n	8003f5e <USART_SetConfig+0x1e2>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> 2U), husart->Init.BaudRate));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	4a3e      	ldr	r2, [pc, #248]	; (8004044 <USART_SetConfig+0x2c8>)
 8003f4a:	189a      	adds	r2, r3, r2
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	0019      	movs	r1, r3
 8003f52:	0010      	movs	r0, r2
 8003f54:	f7fc f8d8 	bl	8000108 <__udivsi3>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
      }
      break;
 8003f5c:	e032      	b.n	8003fc4 <USART_SetConfig+0x248>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	4a38      	ldr	r2, [pc, #224]	; (8004048 <USART_SetConfig+0x2cc>)
 8003f66:	189a      	adds	r2, r3, r2
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	0010      	movs	r0, r2
 8003f70:	f7fc f8ca 	bl	8000108 <__udivsi3>
 8003f74:	0003      	movs	r3, r0
 8003f76:	613b      	str	r3, [r7, #16]
      break;
 8003f78:	e024      	b.n	8003fc4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), husart->Init.BaudRate));
 8003f7a:	f7fe f8af 	bl	80020dc <HAL_RCC_GetSysClockFreq>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	005a      	lsls	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	18d2      	adds	r2, r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	0019      	movs	r1, r3
 8003f90:	0010      	movs	r0, r2
 8003f92:	f7fc f8b9 	bl	8000108 <__udivsi3>
 8003f96:	0003      	movs	r3, r0
 8003f98:	613b      	str	r3, [r7, #16]
      break;
 8003f9a:	e013      	b.n	8003fc4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	2280      	movs	r2, #128	; 0x80
 8003fa4:	0252      	lsls	r2, r2, #9
 8003fa6:	189a      	adds	r2, r3, r2
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	0019      	movs	r1, r3
 8003fae:	0010      	movs	r0, r2
 8003fb0:	f7fc f8aa 	bl	8000108 <__udivsi3>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	613b      	str	r3, [r7, #16]
      break;
 8003fb8:	e004      	b.n	8003fc4 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8003fba:	2316      	movs	r3, #22
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	701a      	strb	r2, [r3, #0]
      break;
 8003fc2:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b0f      	cmp	r3, #15
 8003fc8:	d91b      	bls.n	8004002 <USART_SetConfig+0x286>
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	; (800404c <USART_SetConfig+0x2d0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d817      	bhi.n	8004002 <USART_SetConfig+0x286>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	200a      	movs	r0, #10
 8003fd8:	183b      	adds	r3, r7, r0
 8003fda:	210f      	movs	r1, #15
 8003fdc:	438a      	bics	r2, r1
 8003fde:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2207      	movs	r2, #7
 8003fe8:	4013      	ands	r3, r2
 8003fea:	b299      	uxth	r1, r3
 8003fec:	183b      	adds	r3, r7, r0
 8003fee:	183a      	adds	r2, r7, r0
 8003ff0:	8812      	ldrh	r2, [r2, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	183a      	adds	r2, r7, r0
 8003ffc:	8812      	ldrh	r2, [r2, #0]
 8003ffe:	60da      	str	r2, [r3, #12]
 8004000:	e003      	b.n	800400a <USART_SetConfig+0x28e>
  }
  else
  {
    ret = HAL_ERROR;
 8004002:	2316      	movs	r3, #22
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	2201      	movs	r2, #1
 8004008:	701a      	strb	r2, [r3, #0]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8004016:	2316      	movs	r3, #22
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	781b      	ldrb	r3, [r3, #0]
}
 800401c:	0018      	movs	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	b006      	add	sp, #24
 8004022:	bd80      	pop	{r7, pc}
 8004024:	efff69f3 	.word	0xefff69f3
 8004028:	ffffc0ff 	.word	0xffffc0ff
 800402c:	40013800 	.word	0x40013800
 8004030:	40021000 	.word	0x40021000
 8004034:	40004400 	.word	0x40004400
 8004038:	40004c00 	.word	0x40004c00
 800403c:	40005000 	.word	0x40005000
 8004040:	08004c74 	.word	0x08004c74
 8004044:	007a1200 	.word	0x007a1200
 8004048:	01e84800 	.word	0x01e84800
 800404c:	0000ffff 	.word	0x0000ffff

08004050 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af02      	add	r7, sp, #8
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800405e:	f7fc fa41 	bl	80004e4 <HAL_GetTick>
 8004062:	0003      	movs	r3, r0
 8004064:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2208      	movs	r2, #8
 800406e:	4013      	ands	r3, r2
 8004070:	2b08      	cmp	r3, #8
 8004072:	d10e      	bne.n	8004092 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	0399      	lsls	r1, r3, #14
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	23fa      	movs	r3, #250	; 0xfa
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	0013      	movs	r3, r2
 8004084:	2200      	movs	r2, #0
 8004086:	f7ff fe43 	bl	8003d10 <USART_WaitOnFlagUntilTimeout>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d001      	beq.n	8004092 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e01e      	b.n	80040d0 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2204      	movs	r2, #4
 800409a:	4013      	ands	r3, r2
 800409c:	2b04      	cmp	r3, #4
 800409e:	d10e      	bne.n	80040be <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	03d9      	lsls	r1, r3, #15
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	23fa      	movs	r3, #250	; 0xfa
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	0013      	movs	r3, r2
 80040b0:	2200      	movs	r2, #0
 80040b2:	f7ff fe2d 	bl	8003d10 <USART_WaitOnFlagUntilTimeout>
 80040b6:	1e03      	subs	r3, r0, #0
 80040b8:	d001      	beq.n	80040be <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e008      	b.n	80040d0 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2249      	movs	r2, #73	; 0x49
 80040c2:	2101      	movs	r1, #1
 80040c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2248      	movs	r2, #72	; 0x48
 80040ca:	2100      	movs	r1, #0
 80040cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b004      	add	sp, #16
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040de:	f7fc f9ab 	bl	8000438 <HAL_Init>

  //HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, 0);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040e2:	f000 f8e7 	bl	80042b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // Implémentation de RDP
  if (HAL_FLASH_Unlock() == HAL_OK){
 80040e6:	f7fc fb47 	bl	8000778 <HAL_FLASH_Unlock>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d11e      	bne.n	800412c <main+0x54>


	  if(HAL_FLASH_OB_Unlock() == HAL_OK){
 80040ee:	f7fc fba7 	bl	8000840 <HAL_FLASH_OB_Unlock>
 80040f2:	1e03      	subs	r3, r0, #0
 80040f4:	d118      	bne.n	8004128 <main+0x50>

		  HAL_FLASHEx_OBGetConfig(&myconf);
 80040f6:	4b67      	ldr	r3, [pc, #412]	; (8004294 <main+0x1bc>)
 80040f8:	0018      	movs	r0, r3
 80040fa:	f7fc fdab 	bl	8000c54 <HAL_FLASHEx_OBGetConfig>


		  if(myconf.RDPLevel == OB_RDP_LEVEL0){
 80040fe:	4b65      	ldr	r3, [pc, #404]	; (8004294 <main+0x1bc>)
 8004100:	7c1b      	ldrb	r3, [r3, #16]
 8004102:	2baa      	cmp	r3, #170	; 0xaa
 8004104:	d110      	bne.n	8004128 <main+0x50>

			  //myconfAdv.PCROPSector = OB_PCROP_Pages0to31;
			  //myconfAdv.PCROPSector2 = OB_PCROP2_AllPages;
			  //myconfAdv.PCROPState = OB_PCROP_STATE_ENABLE;

		  	  myconf.RDPLevel = OB_RDP_LEVEL0;	//Mettre à 1 pour avoir le niveau 1
 8004106:	4b63      	ldr	r3, [pc, #396]	; (8004294 <main+0x1bc>)
 8004108:	22aa      	movs	r2, #170	; 0xaa
 800410a:	741a      	strb	r2, [r3, #16]

		  	  HAL_FLASHEx_AdvOBProgram(&myconfAdv);
 800410c:	4b62      	ldr	r3, [pc, #392]	; (8004298 <main+0x1c0>)
 800410e:	0018      	movs	r0, r3
 8004110:	f7fc fdcd 	bl	8000cae <HAL_FLASHEx_AdvOBProgram>
		  	  HAL_FLASHEx_OB_SelectPCROP();
 8004114:	f7fc fdfc 	bl	8000d10 <HAL_FLASHEx_OB_SelectPCROP>
		  	  HAL_FLASHEx_OBProgram(&myconf);
 8004118:	4b5e      	ldr	r3, [pc, #376]	; (8004294 <main+0x1bc>)
 800411a:	0018      	movs	r0, r3
 800411c:	f7fc fcfa 	bl	8000b14 <HAL_FLASHEx_OBProgram>
		  	  HAL_FLASH_OB_Launch();
 8004120:	f7fc fbd4 	bl	80008cc <HAL_FLASH_OB_Launch>
		  	  HAL_FLASH_OB_Lock();
 8004124:	f7fc fbc4 	bl	80008b0 <HAL_FLASH_OB_Lock>
		  }

	  }
	  HAL_FLASH_Lock();
 8004128:	f7fc fb76 	bl	8000818 <HAL_FLASH_Lock>

  //HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 1);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800412c:	f000 fa74 	bl	8004618 <MX_GPIO_Init>
  MX_RTC_Init();
 8004130:	f000 f93c 	bl	80043ac <MX_RTC_Init>
  MX_SPI1_Init();
 8004134:	f000 f9da 	bl	80044ec <MX_SPI1_Init>
  MX_USART1_Init();
 8004138:	f000 fa10 	bl	800455c <MX_USART1_Init>
  MX_USART2_UART_Init();
 800413c:	f000 fa3c 	bl	80045b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, 0);
 8004140:	4b56      	ldr	r3, [pc, #344]	; (800429c <main+0x1c4>)
 8004142:	2200      	movs	r2, #0
 8004144:	2140      	movs	r1, #64	; 0x40
 8004146:	0018      	movs	r0, r3
 8004148:	f7fd fa79 	bl	800163e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 0);
 800414c:	4b53      	ldr	r3, [pc, #332]	; (800429c <main+0x1c4>)
 800414e:	2200      	movs	r2, #0
 8004150:	2120      	movs	r1, #32
 8004152:	0018      	movs	r0, r3
 8004154:	f7fd fa73 	bl	800163e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8004158:	4b50      	ldr	r3, [pc, #320]	; (800429c <main+0x1c4>)
 800415a:	2200      	movs	r2, #0
 800415c:	2180      	movs	r1, #128	; 0x80
 800415e:	0018      	movs	r0, r3
 8004160:	f7fd fa6d 	bl	800163e <HAL_GPIO_WritePin>



  for (int i = 0; i < 16; i++ ){
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e013      	b.n	8004192 <main+0xba>

	  buffer[0] = SECRET_KEY[i];
 800416a:	4b4d      	ldr	r3, [pc, #308]	; (80042a0 <main+0x1c8>)
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	0092      	lsls	r2, r2, #2
 8004170:	58d3      	ldr	r3, [r2, r3]
 8004172:	b2da      	uxtb	r2, r3
 8004174:	4b4b      	ldr	r3, [pc, #300]	; (80042a4 <main+0x1cc>)
 8004176:	701a      	strb	r2, [r3, #0]

	  buffer[1] = '\n';
 8004178:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <main+0x1cc>)
 800417a:	220a      	movs	r2, #10
 800417c:	705a      	strb	r2, [r3, #1]
	  HAL_USART_Transmit(&husart1, buffer, sizeof(buffer), 1000);
 800417e:	23fa      	movs	r3, #250	; 0xfa
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4948      	ldr	r1, [pc, #288]	; (80042a4 <main+0x1cc>)
 8004184:	4848      	ldr	r0, [pc, #288]	; (80042a8 <main+0x1d0>)
 8004186:	2202      	movs	r2, #2
 8004188:	f7ff fd04 	bl	8003b94 <HAL_USART_Transmit>
  for (int i = 0; i < 16; i++ ){
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3301      	adds	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	dde8      	ble.n	800416a <main+0x92>
  }

  for (int i = 0; i < 16; i++ ){
 8004198:	2300      	movs	r3, #0
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	e01e      	b.n	80041dc <main+0x104>
	  *pI = (unsigned int)i;
 800419e:	4b43      	ldr	r3, [pc, #268]	; (80042ac <main+0x1d4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	601a      	str	r2, [r3, #0]
	  MySecretFunction(pI, data, i);
 80041a6:	4b41      	ldr	r3, [pc, #260]	; (80042ac <main+0x1d4>)
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	4b41      	ldr	r3, [pc, #260]	; (80042b0 <main+0x1d8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	0019      	movs	r1, r3
 80041b2:	f000 fb0b 	bl	80047cc <MySecretFunction>
	  buffer[0] = *data;
 80041b6:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <main+0x1d8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <main+0x1cc>)
 80041c0:	701a      	strb	r2, [r3, #0]

	  buffer[1] = '\n';
 80041c2:	4b38      	ldr	r3, [pc, #224]	; (80042a4 <main+0x1cc>)
 80041c4:	220a      	movs	r2, #10
 80041c6:	705a      	strb	r2, [r3, #1]
	  HAL_USART_Transmit(&husart1, buffer, sizeof(buffer), 1000);
 80041c8:	23fa      	movs	r3, #250	; 0xfa
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4935      	ldr	r1, [pc, #212]	; (80042a4 <main+0x1cc>)
 80041ce:	4836      	ldr	r0, [pc, #216]	; (80042a8 <main+0x1d0>)
 80041d0:	2202      	movs	r2, #2
 80041d2:	f7ff fcdf 	bl	8003b94 <HAL_USART_Transmit>
  for (int i = 0; i < 16; i++ ){
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	3301      	adds	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b0f      	cmp	r3, #15
 80041e0:	dddd      	ble.n	800419e <main+0xc6>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for (int i = 0; i < 16; i++ ){
 80041e2:	2300      	movs	r3, #0
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	e010      	b.n	800420a <main+0x132>
		  buffer[0] = SECRET_KEY[i];
 80041e8:	4b2d      	ldr	r3, [pc, #180]	; (80042a0 <main+0x1c8>)
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	58d3      	ldr	r3, [r2, r3]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <main+0x1cc>)
 80041f4:	701a      	strb	r2, [r3, #0]
		  HAL_USART_Transmit(&husart1, buffer, sizeof(buffer), 1000);
 80041f6:	23fa      	movs	r3, #250	; 0xfa
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	492a      	ldr	r1, [pc, #168]	; (80042a4 <main+0x1cc>)
 80041fc:	482a      	ldr	r0, [pc, #168]	; (80042a8 <main+0x1d0>)
 80041fe:	2202      	movs	r2, #2
 8004200:	f7ff fcc8 	bl	8003b94 <HAL_USART_Transmit>
	  for (int i = 0; i < 16; i++ ){
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3301      	adds	r3, #1
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b0f      	cmp	r3, #15
 800420e:	ddeb      	ble.n	80041e8 <main+0x110>
	  }
	  buffer[0] = '\n';
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <main+0x1cc>)
 8004212:	220a      	movs	r2, #10
 8004214:	701a      	strb	r2, [r3, #0]
	  HAL_USART_Transmit(&husart1, buffer, sizeof(buffer), 1000);
 8004216:	23fa      	movs	r3, #250	; 0xfa
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4922      	ldr	r1, [pc, #136]	; (80042a4 <main+0x1cc>)
 800421c:	4822      	ldr	r0, [pc, #136]	; (80042a8 <main+0x1d0>)
 800421e:	2202      	movs	r2, #2
 8004220:	f7ff fcb8 	bl	8003b94 <HAL_USART_Transmit>

	  HAL_Delay(1000);
 8004224:	23fa      	movs	r3, #250	; 0xfa
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	0018      	movs	r0, r3
 800422a:	f7fc f965 	bl	80004f8 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(BP_USER_GPIO_Port, BP_USER_Pin) == 0){
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <main+0x1c4>)
 8004230:	2104      	movs	r1, #4
 8004232:	0018      	movs	r0, r3
 8004234:	f7fd f9e6 	bl	8001604 <HAL_GPIO_ReadPin>
 8004238:	1e03      	subs	r3, r0, #0
 800423a:	d112      	bne.n	8004262 <main+0x18a>
		  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, 0);
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <main+0x1c4>)
 800423e:	2200      	movs	r2, #0
 8004240:	2140      	movs	r1, #64	; 0x40
 8004242:	0018      	movs	r0, r3
 8004244:	f7fd f9fb 	bl	800163e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 0);
 8004248:	4b14      	ldr	r3, [pc, #80]	; (800429c <main+0x1c4>)
 800424a:	2200      	movs	r2, #0
 800424c:	2120      	movs	r1, #32
 800424e:	0018      	movs	r0, r3
 8004250:	f7fd f9f5 	bl	800163e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8004254:	4b11      	ldr	r3, [pc, #68]	; (800429c <main+0x1c4>)
 8004256:	2200      	movs	r2, #0
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	0018      	movs	r0, r3
 800425c:	f7fd f9ef 	bl	800163e <HAL_GPIO_WritePin>
 8004260:	e7bf      	b.n	80041e2 <main+0x10a>
	  }
	  else{
		  //HAL_Delay(1000);
		  HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 8004262:	4b0e      	ldr	r3, [pc, #56]	; (800429c <main+0x1c4>)
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	0018      	movs	r0, r3
 8004268:	f7fd fa06 	bl	8001678 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 800426c:	23fa      	movs	r3, #250	; 0xfa
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	0018      	movs	r0, r3
 8004272:	f7fc f941 	bl	80004f8 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 8004276:	4b09      	ldr	r3, [pc, #36]	; (800429c <main+0x1c4>)
 8004278:	2140      	movs	r1, #64	; 0x40
 800427a:	0018      	movs	r0, r3
 800427c:	f7fd f9fc 	bl	8001678 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 8004280:	20fa      	movs	r0, #250	; 0xfa
 8004282:	f7fc f939 	bl	80004f8 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <main+0x1c4>)
 8004288:	2120      	movs	r1, #32
 800428a:	0018      	movs	r0, r3
 800428c:	f7fd f9f4 	bl	8001678 <HAL_GPIO_TogglePin>
	  for (int i = 0; i < 16; i++ ){
 8004290:	e7a7      	b.n	80041e2 <main+0x10a>
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	200001e8 	.word	0x200001e8
 8004298:	20000080 	.word	0x20000080
 800429c:	50000400 	.word	0x50000400
 80042a0:	20000000 	.word	0x20000000
 80042a4:	20000094 	.word	0x20000094
 80042a8:	20000198 	.word	0x20000198
 80042ac:	2000007c 	.word	0x2000007c
 80042b0:	200000bc 	.word	0x200000bc

080042b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b09d      	sub	sp, #116	; 0x74
 80042b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042ba:	2438      	movs	r4, #56	; 0x38
 80042bc:	193b      	adds	r3, r7, r4
 80042be:	0018      	movs	r0, r3
 80042c0:	2338      	movs	r3, #56	; 0x38
 80042c2:	001a      	movs	r2, r3
 80042c4:	2100      	movs	r1, #0
 80042c6:	f000 fc9d 	bl	8004c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042ca:	2324      	movs	r3, #36	; 0x24
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	0018      	movs	r0, r3
 80042d0:	2314      	movs	r3, #20
 80042d2:	001a      	movs	r2, r3
 80042d4:	2100      	movs	r1, #0
 80042d6:	f000 fc95 	bl	8004c04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042da:	003b      	movs	r3, r7
 80042dc:	0018      	movs	r0, r3
 80042de:	2324      	movs	r3, #36	; 0x24
 80042e0:	001a      	movs	r2, r3
 80042e2:	2100      	movs	r1, #0
 80042e4:	f000 fc8e 	bl	8004c04 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042e8:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <SystemClock_Config+0xf0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a2e      	ldr	r2, [pc, #184]	; (80043a8 <SystemClock_Config+0xf4>)
 80042ee:	401a      	ands	r2, r3
 80042f0:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <SystemClock_Config+0xf0>)
 80042f2:	2180      	movs	r1, #128	; 0x80
 80042f4:	0109      	lsls	r1, r1, #4
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80042fa:	0021      	movs	r1, r4
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	220a      	movs	r2, #10
 8004300:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004302:	187b      	adds	r3, r7, r1
 8004304:	2201      	movs	r2, #1
 8004306:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004308:	187b      	adds	r3, r7, r1
 800430a:	2210      	movs	r2, #16
 800430c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800430e:	187b      	adds	r3, r7, r1
 8004310:	2201      	movs	r2, #1
 8004312:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004314:	187b      	adds	r3, r7, r1
 8004316:	2202      	movs	r2, #2
 8004318:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800431a:	187b      	adds	r3, r7, r1
 800431c:	2200      	movs	r2, #0
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8004320:	187b      	adds	r3, r7, r1
 8004322:	2280      	movs	r2, #128	; 0x80
 8004324:	0312      	lsls	r2, r2, #12
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8004328:	187b      	adds	r3, r7, r1
 800432a:	2280      	movs	r2, #128	; 0x80
 800432c:	0412      	lsls	r2, r2, #16
 800432e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004330:	187b      	adds	r3, r7, r1
 8004332:	0018      	movs	r0, r3
 8004334:	f7fd f9d8 	bl	80016e8 <HAL_RCC_OscConfig>
 8004338:	1e03      	subs	r3, r0, #0
 800433a:	d001      	beq.n	8004340 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800433c:	f000 fa5b 	bl	80047f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004340:	2124      	movs	r1, #36	; 0x24
 8004342:	187b      	adds	r3, r7, r1
 8004344:	220f      	movs	r2, #15
 8004346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004348:	187b      	adds	r3, r7, r1
 800434a:	2203      	movs	r2, #3
 800434c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800434e:	187b      	adds	r3, r7, r1
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004354:	187b      	adds	r3, r7, r1
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800435a:	187b      	adds	r3, r7, r1
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004360:	187b      	adds	r3, r7, r1
 8004362:	2101      	movs	r1, #1
 8004364:	0018      	movs	r0, r3
 8004366:	f7fd fd8f 	bl	8001e88 <HAL_RCC_ClockConfig>
 800436a:	1e03      	subs	r3, r0, #0
 800436c:	d001      	beq.n	8004372 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800436e:	f000 fa42 	bl	80047f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004372:	003b      	movs	r3, r7
 8004374:	2223      	movs	r2, #35	; 0x23
 8004376:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004378:	003b      	movs	r3, r7
 800437a:	2200      	movs	r2, #0
 800437c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800437e:	003b      	movs	r3, r7
 8004380:	2200      	movs	r2, #0
 8004382:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004384:	003b      	movs	r3, r7
 8004386:	2280      	movs	r2, #128	; 0x80
 8004388:	0292      	lsls	r2, r2, #10
 800438a:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800438c:	003b      	movs	r3, r7
 800438e:	0018      	movs	r0, r3
 8004390:	f7fd ff5e 	bl	8002250 <HAL_RCCEx_PeriphCLKConfig>
 8004394:	1e03      	subs	r3, r0, #0
 8004396:	d001      	beq.n	800439c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8004398:	f000 fa2d 	bl	80047f6 <Error_Handler>
  }
}
 800439c:	46c0      	nop			; (mov r8, r8)
 800439e:	46bd      	mov	sp, r7
 80043a0:	b01d      	add	sp, #116	; 0x74
 80043a2:	bd90      	pop	{r4, r7, pc}
 80043a4:	40007000 	.word	0x40007000
 80043a8:	ffffe7ff 	.word	0xffffe7ff

080043ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b090      	sub	sp, #64	; 0x40
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80043b2:	232c      	movs	r3, #44	; 0x2c
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	0018      	movs	r0, r3
 80043b8:	2314      	movs	r3, #20
 80043ba:	001a      	movs	r2, r3
 80043bc:	2100      	movs	r1, #0
 80043be:	f000 fc21 	bl	8004c04 <memset>
  RTC_DateTypeDef sDate = {0};
 80043c2:	2328      	movs	r3, #40	; 0x28
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80043ca:	003b      	movs	r3, r7
 80043cc:	0018      	movs	r0, r3
 80043ce:	2328      	movs	r3, #40	; 0x28
 80043d0:	001a      	movs	r2, r3
 80043d2:	2100      	movs	r1, #0
 80043d4:	f000 fc16 	bl	8004c04 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80043d8:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <MX_RTC_Init+0x134>)
 80043da:	4a42      	ldr	r2, [pc, #264]	; (80044e4 <MX_RTC_Init+0x138>)
 80043dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80043de:	4b40      	ldr	r3, [pc, #256]	; (80044e0 <MX_RTC_Init+0x134>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 80043e4:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <MX_RTC_Init+0x134>)
 80043e6:	221f      	movs	r2, #31
 80043e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 80043ea:	4b3d      	ldr	r3, [pc, #244]	; (80044e0 <MX_RTC_Init+0x134>)
 80043ec:	4a3e      	ldr	r2, [pc, #248]	; (80044e8 <MX_RTC_Init+0x13c>)
 80043ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80043f0:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <MX_RTC_Init+0x134>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80043f6:	4b3a      	ldr	r3, [pc, #232]	; (80044e0 <MX_RTC_Init+0x134>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80043fc:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <MX_RTC_Init+0x134>)
 80043fe:	2200      	movs	r2, #0
 8004400:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004402:	4b37      	ldr	r3, [pc, #220]	; (80044e0 <MX_RTC_Init+0x134>)
 8004404:	2200      	movs	r2, #0
 8004406:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004408:	4b35      	ldr	r3, [pc, #212]	; (80044e0 <MX_RTC_Init+0x134>)
 800440a:	0018      	movs	r0, r3
 800440c:	f7fe f878 	bl	8002500 <HAL_RTC_Init>
 8004410:	1e03      	subs	r3, r0, #0
 8004412:	d001      	beq.n	8004418 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8004414:	f000 f9ef 	bl	80047f6 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	187b      	adds	r3, r7, r1
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8004420:	187b      	adds	r3, r7, r1
 8004422:	2200      	movs	r2, #0
 8004424:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8004426:	187b      	adds	r3, r7, r1
 8004428:	2200      	movs	r2, #0
 800442a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800442c:	187b      	adds	r3, r7, r1
 800442e:	2200      	movs	r2, #0
 8004430:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004432:	187b      	adds	r3, r7, r1
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004438:	1879      	adds	r1, r7, r1
 800443a:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <MX_RTC_Init+0x134>)
 800443c:	2200      	movs	r2, #0
 800443e:	0018      	movs	r0, r3
 8004440:	f7fe f8fc 	bl	800263c <HAL_RTC_SetTime>
 8004444:	1e03      	subs	r3, r0, #0
 8004446:	d001      	beq.n	800444c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8004448:	f000 f9d5 	bl	80047f6 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800444c:	2128      	movs	r1, #40	; 0x28
 800444e:	187b      	adds	r3, r7, r1
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004454:	187b      	adds	r3, r7, r1
 8004456:	2201      	movs	r2, #1
 8004458:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800445a:	187b      	adds	r3, r7, r1
 800445c:	2201      	movs	r2, #1
 800445e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8004460:	187b      	adds	r3, r7, r1
 8004462:	2200      	movs	r2, #0
 8004464:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004466:	1879      	adds	r1, r7, r1
 8004468:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <MX_RTC_Init+0x134>)
 800446a:	2200      	movs	r2, #0
 800446c:	0018      	movs	r0, r3
 800446e:	f7fe f9a9 	bl	80027c4 <HAL_RTC_SetDate>
 8004472:	1e03      	subs	r3, r0, #0
 8004474:	d001      	beq.n	800447a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8004476:	f000 f9be 	bl	80047f6 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800447a:	003b      	movs	r3, r7
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8004480:	003b      	movs	r3, r7
 8004482:	2200      	movs	r2, #0
 8004484:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8004486:	003b      	movs	r3, r7
 8004488:	2200      	movs	r2, #0
 800448a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800448c:	003b      	movs	r3, r7
 800448e:	2200      	movs	r2, #0
 8004490:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004492:	003b      	movs	r3, r7
 8004494:	2200      	movs	r2, #0
 8004496:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004498:	003b      	movs	r3, r7
 800449a:	2200      	movs	r2, #0
 800449c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800449e:	003b      	movs	r3, r7
 80044a0:	2200      	movs	r2, #0
 80044a2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80044a4:	003b      	movs	r3, r7
 80044a6:	22f0      	movs	r2, #240	; 0xf0
 80044a8:	0512      	lsls	r2, r2, #20
 80044aa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80044ac:	003b      	movs	r3, r7
 80044ae:	2200      	movs	r2, #0
 80044b0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80044b2:	003b      	movs	r3, r7
 80044b4:	2220      	movs	r2, #32
 80044b6:	2101      	movs	r1, #1
 80044b8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80044ba:	003b      	movs	r3, r7
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	0052      	lsls	r2, r2, #1
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80044c2:	0039      	movs	r1, r7
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <MX_RTC_Init+0x134>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	0018      	movs	r0, r3
 80044ca:	f7fe fa29 	bl	8002920 <HAL_RTC_SetAlarm_IT>
 80044ce:	1e03      	subs	r3, r0, #0
 80044d0:	d001      	beq.n	80044d6 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80044d2:	f000 f990 	bl	80047f6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	46bd      	mov	sp, r7
 80044da:	b010      	add	sp, #64	; 0x40
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	20000098 	.word	0x20000098
 80044e4:	40002800 	.word	0x40002800
 80044e8:	000003ff 	.word	0x000003ff

080044ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80044f0:	4b18      	ldr	r3, [pc, #96]	; (8004554 <MX_SPI1_Init+0x68>)
 80044f2:	4a19      	ldr	r2, [pc, #100]	; (8004558 <MX_SPI1_Init+0x6c>)
 80044f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80044f6:	4b17      	ldr	r3, [pc, #92]	; (8004554 <MX_SPI1_Init+0x68>)
 80044f8:	2282      	movs	r2, #130	; 0x82
 80044fa:	0052      	lsls	r2, r2, #1
 80044fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <MX_SPI1_Init+0x68>)
 8004500:	2200      	movs	r2, #0
 8004502:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <MX_SPI1_Init+0x68>)
 8004506:	2200      	movs	r2, #0
 8004508:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <MX_SPI1_Init+0x68>)
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004510:	4b10      	ldr	r3, [pc, #64]	; (8004554 <MX_SPI1_Init+0x68>)
 8004512:	2200      	movs	r2, #0
 8004514:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004516:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <MX_SPI1_Init+0x68>)
 8004518:	2280      	movs	r2, #128	; 0x80
 800451a:	0092      	lsls	r2, r2, #2
 800451c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <MX_SPI1_Init+0x68>)
 8004520:	2220      	movs	r2, #32
 8004522:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <MX_SPI1_Init+0x68>)
 8004526:	2200      	movs	r2, #0
 8004528:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <MX_SPI1_Init+0x68>)
 800452c:	2200      	movs	r2, #0
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004530:	4b08      	ldr	r3, [pc, #32]	; (8004554 <MX_SPI1_Init+0x68>)
 8004532:	2200      	movs	r2, #0
 8004534:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <MX_SPI1_Init+0x68>)
 8004538:	2207      	movs	r2, #7
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <MX_SPI1_Init+0x68>)
 800453e:	0018      	movs	r0, r3
 8004540:	f7fe fc12 	bl	8002d68 <HAL_SPI_Init>
 8004544:	1e03      	subs	r3, r0, #0
 8004546:	d001      	beq.n	800454c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004548:	f000 f955 	bl	80047f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800454c:	46c0      	nop			; (mov r8, r8)
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	200000c0 	.word	0x200000c0
 8004558:	40013000 	.word	0x40013000

0800455c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8004560:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <MX_USART1_Init+0x54>)
 8004562:	4a14      	ldr	r2, [pc, #80]	; (80045b4 <MX_USART1_Init+0x58>)
 8004564:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <MX_USART1_Init+0x54>)
 8004568:	22e1      	movs	r2, #225	; 0xe1
 800456a:	0252      	lsls	r2, r2, #9
 800456c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800456e:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <MX_USART1_Init+0x54>)
 8004570:	2200      	movs	r2, #0
 8004572:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <MX_USART1_Init+0x54>)
 8004576:	2200      	movs	r2, #0
 8004578:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <MX_USART1_Init+0x54>)
 800457c:	2200      	movs	r2, #0
 800457e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <MX_USART1_Init+0x54>)
 8004582:	220c      	movs	r2, #12
 8004584:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <MX_USART1_Init+0x54>)
 8004588:	2200      	movs	r2, #0
 800458a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <MX_USART1_Init+0x54>)
 800458e:	2200      	movs	r2, #0
 8004590:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8004592:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <MX_USART1_Init+0x54>)
 8004594:	2200      	movs	r2, #0
 8004596:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <MX_USART1_Init+0x54>)
 800459a:	0018      	movs	r0, r3
 800459c:	f7ff faaa 	bl	8003af4 <HAL_USART_Init>
 80045a0:	1e03      	subs	r3, r0, #0
 80045a2:	d001      	beq.n	80045a8 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80045a4:	f000 f927 	bl	80047f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	20000198 	.word	0x20000198
 80045b4:	40013800 	.word	0x40013800

080045b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045bc:	4b14      	ldr	r3, [pc, #80]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <MX_USART2_UART_Init+0x5c>)
 80045c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045c4:	22e1      	movs	r2, #225	; 0xe1
 80045c6:	0252      	lsls	r2, r2, #9
 80045c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045d6:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045de:	220c      	movs	r2, #12
 80045e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <MX_USART2_UART_Init+0x58>)
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7fe fc1d 	bl	8002e3c <HAL_UART_Init>
 8004602:	1e03      	subs	r3, r0, #0
 8004604:	d001      	beq.n	800460a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004606:	f000 f8f6 	bl	80047f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000118 	.word	0x20000118
 8004614:	40004400 	.word	0x40004400

08004618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004618:	b590      	push	{r4, r7, lr}
 800461a:	b08b      	sub	sp, #44	; 0x2c
 800461c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461e:	2414      	movs	r4, #20
 8004620:	193b      	adds	r3, r7, r4
 8004622:	0018      	movs	r0, r3
 8004624:	2314      	movs	r3, #20
 8004626:	001a      	movs	r2, r3
 8004628:	2100      	movs	r1, #0
 800462a:	f000 faeb 	bl	8004c04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800462e:	4b62      	ldr	r3, [pc, #392]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 8004630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004632:	4b61      	ldr	r3, [pc, #388]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 8004634:	2101      	movs	r1, #1
 8004636:	430a      	orrs	r2, r1
 8004638:	62da      	str	r2, [r3, #44]	; 0x2c
 800463a:	4b5f      	ldr	r3, [pc, #380]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	2201      	movs	r2, #1
 8004640:	4013      	ands	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004646:	4b5c      	ldr	r3, [pc, #368]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 8004648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464a:	4b5b      	ldr	r3, [pc, #364]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 800464c:	2102      	movs	r1, #2
 800464e:	430a      	orrs	r2, r1
 8004650:	62da      	str	r2, [r3, #44]	; 0x2c
 8004652:	4b59      	ldr	r3, [pc, #356]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	2202      	movs	r2, #2
 8004658:	4013      	ands	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800465e:	4b56      	ldr	r3, [pc, #344]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 8004660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004662:	4b55      	ldr	r3, [pc, #340]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 8004664:	2104      	movs	r1, #4
 8004666:	430a      	orrs	r2, r1
 8004668:	62da      	str	r2, [r3, #44]	; 0x2c
 800466a:	4b53      	ldr	r3, [pc, #332]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	2204      	movs	r2, #4
 8004670:	4013      	ands	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
 8004674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004676:	4b50      	ldr	r3, [pc, #320]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	4b4f      	ldr	r3, [pc, #316]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	430a      	orrs	r2, r1
 8004680:	62da      	str	r2, [r3, #44]	; 0x2c
 8004682:	4b4d      	ldr	r3, [pc, #308]	; (80047b8 <MX_GPIO_Init+0x1a0>)
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	4013      	ands	r3, r2
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 800468e:	494b      	ldr	r1, [pc, #300]	; (80047bc <MX_GPIO_Init+0x1a4>)
 8004690:	23a0      	movs	r3, #160	; 0xa0
 8004692:	05db      	lsls	r3, r3, #23
 8004694:	2200      	movs	r2, #0
 8004696:	0018      	movs	r0, r3
 8004698:	f7fc ffd1 	bl	800163e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Green_Pin|LED_Blue_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 800469c:	4b48      	ldr	r3, [pc, #288]	; (80047c0 <MX_GPIO_Init+0x1a8>)
 800469e:	2200      	movs	r2, #0
 80046a0:	21e0      	movs	r1, #224	; 0xe0
 80046a2:	0018      	movs	r0, r3
 80046a4:	f7fc ffcb 	bl	800163e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 80046a8:	4b46      	ldr	r3, [pc, #280]	; (80047c4 <MX_GPIO_Init+0x1ac>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	2107      	movs	r1, #7
 80046ae:	0018      	movs	r0, r3
 80046b0:	f7fc ffc5 	bl	800163e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 80046b4:	193b      	adds	r3, r7, r4
 80046b6:	4a41      	ldr	r2, [pc, #260]	; (80047bc <MX_GPIO_Init+0x1a4>)
 80046b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046ba:	193b      	adds	r3, r7, r4
 80046bc:	2201      	movs	r2, #1
 80046be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	2200      	movs	r2, #0
 80046c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046c6:	193b      	adds	r3, r7, r4
 80046c8:	2202      	movs	r2, #2
 80046ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046cc:	193a      	adds	r2, r7, r4
 80046ce:	23a0      	movs	r3, #160	; 0xa0
 80046d0:	05db      	lsls	r3, r3, #23
 80046d2:	0011      	movs	r1, r2
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7fc fe17 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Green_Pin LED_Blue_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Blue_Pin|LED_Red_Pin;
 80046da:	0021      	movs	r1, r4
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	22e0      	movs	r2, #224	; 0xe0
 80046e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	2201      	movs	r2, #1
 80046e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	2202      	movs	r2, #2
 80046ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	2200      	movs	r2, #0
 80046f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046f4:	000c      	movs	r4, r1
 80046f6:	187b      	adds	r3, r7, r1
 80046f8:	4a31      	ldr	r2, [pc, #196]	; (80047c0 <MX_GPIO_Init+0x1a8>)
 80046fa:	0019      	movs	r1, r3
 80046fc:	0010      	movs	r0, r2
 80046fe:	f7fc fe03 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 8004702:	0021      	movs	r1, r4
 8004704:	187b      	adds	r3, r7, r1
 8004706:	2213      	movs	r2, #19
 8004708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800470a:	187b      	adds	r3, r7, r1
 800470c:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <MX_GPIO_Init+0x1b0>)
 800470e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004710:	187b      	adds	r3, r7, r1
 8004712:	2200      	movs	r2, #0
 8004714:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004716:	000c      	movs	r4, r1
 8004718:	187b      	adds	r3, r7, r1
 800471a:	4a29      	ldr	r2, [pc, #164]	; (80047c0 <MX_GPIO_Init+0x1a8>)
 800471c:	0019      	movs	r1, r3
 800471e:	0010      	movs	r0, r2
 8004720:	f7fc fdf2 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8004724:	0021      	movs	r1, r4
 8004726:	187b      	adds	r3, r7, r1
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	0192      	lsls	r2, r2, #6
 800472c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800472e:	187b      	adds	r3, r7, r1
 8004730:	4a25      	ldr	r2, [pc, #148]	; (80047c8 <MX_GPIO_Init+0x1b0>)
 8004732:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004734:	187b      	adds	r3, r7, r1
 8004736:	2200      	movs	r2, #0
 8004738:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 800473a:	000c      	movs	r4, r1
 800473c:	187b      	adds	r3, r7, r1
 800473e:	4a21      	ldr	r2, [pc, #132]	; (80047c4 <MX_GPIO_Init+0x1ac>)
 8004740:	0019      	movs	r1, r3
 8004742:	0010      	movs	r0, r2
 8004744:	f7fc fde0 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8004748:	0021      	movs	r1, r4
 800474a:	187b      	adds	r3, r7, r1
 800474c:	2207      	movs	r2, #7
 800474e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004750:	187b      	adds	r3, r7, r1
 8004752:	2201      	movs	r2, #1
 8004754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	187b      	adds	r3, r7, r1
 8004758:	2200      	movs	r2, #0
 800475a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800475c:	187b      	adds	r3, r7, r1
 800475e:	2202      	movs	r2, #2
 8004760:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004762:	000c      	movs	r4, r1
 8004764:	187b      	adds	r3, r7, r1
 8004766:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <MX_GPIO_Init+0x1ac>)
 8004768:	0019      	movs	r1, r3
 800476a:	0010      	movs	r0, r2
 800476c:	f7fc fdcc 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP_USER_Pin */
  GPIO_InitStruct.Pin = BP_USER_Pin;
 8004770:	0021      	movs	r1, r4
 8004772:	187b      	adds	r3, r7, r1
 8004774:	2204      	movs	r2, #4
 8004776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004778:	187b      	adds	r3, r7, r1
 800477a:	2200      	movs	r2, #0
 800477c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800477e:	187b      	adds	r3, r7, r1
 8004780:	2202      	movs	r2, #2
 8004782:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BP_USER_GPIO_Port, &GPIO_InitStruct);
 8004784:	187b      	adds	r3, r7, r1
 8004786:	4a0e      	ldr	r2, [pc, #56]	; (80047c0 <MX_GPIO_Init+0x1a8>)
 8004788:	0019      	movs	r1, r3
 800478a:	0010      	movs	r0, r2
 800478c:	f7fc fdbc 	bl	8001308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004790:	2200      	movs	r2, #0
 8004792:	2100      	movs	r1, #0
 8004794:	2005      	movs	r0, #5
 8004796:	f7fb ff75 	bl	8000684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800479a:	2005      	movs	r0, #5
 800479c:	f7fb ff87 	bl	80006ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80047a0:	2200      	movs	r2, #0
 80047a2:	2100      	movs	r1, #0
 80047a4:	2007      	movs	r0, #7
 80047a6:	f7fb ff6d 	bl	8000684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80047aa:	2007      	movs	r0, #7
 80047ac:	f7fb ff7f 	bl	80006ae <HAL_NVIC_EnableIRQ>

}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b00b      	add	sp, #44	; 0x2c
 80047b6:	bd90      	pop	{r4, r7, pc}
 80047b8:	40021000 	.word	0x40021000
 80047bc:	00009002 	.word	0x00009002
 80047c0:	50000400 	.word	0x50000400
 80047c4:	50000800 	.word	0x50000800
 80047c8:	10110000 	.word	0x10110000

080047cc <MySecretFunction>:

/* USER CODE BEGIN 4 */

void MySecretFunction(unsigned int *pnumber1, unsigned int* pout, unsigned int multi){
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]

	*pout = *pnumber1 + *pnumber1;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	005a      	lsls	r2, r3, #1
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	601a      	str	r2, [r3, #0]
	*pout = *pout * multi;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	435a      	muls	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	601a      	str	r2, [r3, #0]
}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b004      	add	sp, #16
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <HAL_MspInit+0x24>)
 8004806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_MspInit+0x24>)
 800480a:	2101      	movs	r1, #1
 800480c:	430a      	orrs	r2, r1
 800480e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004810:	4b04      	ldr	r3, [pc, #16]	; (8004824 <HAL_MspInit+0x24>)
 8004812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004814:	4b03      	ldr	r3, [pc, #12]	; (8004824 <HAL_MspInit+0x24>)
 8004816:	2180      	movs	r1, #128	; 0x80
 8004818:	0549      	lsls	r1, r1, #21
 800481a:	430a      	orrs	r2, r1
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000

08004828 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a0a      	ldr	r2, [pc, #40]	; (8004860 <HAL_RTC_MspInit+0x38>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d10e      	bne.n	8004858 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <HAL_RTC_MspInit+0x3c>)
 800483c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RTC_MspInit+0x3c>)
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	02c9      	lsls	r1, r1, #11
 8004844:	430a      	orrs	r2, r1
 8004846:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004848:	2200      	movs	r2, #0
 800484a:	2100      	movs	r1, #0
 800484c:	2002      	movs	r0, #2
 800484e:	f7fb ff19 	bl	8000684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8004852:	2002      	movs	r0, #2
 8004854:	f7fb ff2b 	bl	80006ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40002800 	.word	0x40002800
 8004864:	40021000 	.word	0x40021000

08004868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b08b      	sub	sp, #44	; 0x2c
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004870:	2314      	movs	r3, #20
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	0018      	movs	r0, r3
 8004876:	2314      	movs	r3, #20
 8004878:	001a      	movs	r2, r3
 800487a:	2100      	movs	r1, #0
 800487c:	f000 f9c2 	bl	8004c04 <memset>
  if(hspi->Instance==SPI1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a29      	ldr	r2, [pc, #164]	; (800492c <HAL_SPI_MspInit+0xc4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d14c      	bne.n	8004924 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800488a:	4b29      	ldr	r3, [pc, #164]	; (8004930 <HAL_SPI_MspInit+0xc8>)
 800488c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800488e:	4b28      	ldr	r3, [pc, #160]	; (8004930 <HAL_SPI_MspInit+0xc8>)
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	0149      	lsls	r1, r1, #5
 8004894:	430a      	orrs	r2, r1
 8004896:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004898:	4b25      	ldr	r3, [pc, #148]	; (8004930 <HAL_SPI_MspInit+0xc8>)
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_SPI_MspInit+0xc8>)
 800489e:	2102      	movs	r1, #2
 80048a0:	430a      	orrs	r2, r1
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <HAL_SPI_MspInit+0xc8>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	2202      	movs	r2, #2
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b0:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <HAL_SPI_MspInit+0xc8>)
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <HAL_SPI_MspInit+0xc8>)
 80048b6:	2101      	movs	r1, #1
 80048b8:	430a      	orrs	r2, r1
 80048ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80048bc:	4b1c      	ldr	r3, [pc, #112]	; (8004930 <HAL_SPI_MspInit+0xc8>)
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	2201      	movs	r2, #1
 80048c2:	4013      	ands	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 80048c8:	2114      	movs	r1, #20
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	2208      	movs	r2, #8
 80048ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	2202      	movs	r2, #2
 80048d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d6:	187b      	adds	r3, r7, r1
 80048d8:	2200      	movs	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048dc:	187b      	adds	r3, r7, r1
 80048de:	2203      	movs	r2, #3
 80048e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80048e2:	187b      	adds	r3, r7, r1
 80048e4:	2200      	movs	r2, #0
 80048e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 80048e8:	000c      	movs	r4, r1
 80048ea:	187b      	adds	r3, r7, r1
 80048ec:	4a11      	ldr	r2, [pc, #68]	; (8004934 <HAL_SPI_MspInit+0xcc>)
 80048ee:	0019      	movs	r1, r3
 80048f0:	0010      	movs	r0, r2
 80048f2:	f7fc fd09 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 80048f6:	0021      	movs	r1, r4
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	22c0      	movs	r2, #192	; 0xc0
 80048fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048fe:	187b      	adds	r3, r7, r1
 8004900:	2202      	movs	r2, #2
 8004902:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004904:	187b      	adds	r3, r7, r1
 8004906:	2200      	movs	r2, #0
 8004908:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490a:	187b      	adds	r3, r7, r1
 800490c:	2203      	movs	r2, #3
 800490e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004910:	187b      	adds	r3, r7, r1
 8004912:	2200      	movs	r2, #0
 8004914:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004916:	187a      	adds	r2, r7, r1
 8004918:	23a0      	movs	r3, #160	; 0xa0
 800491a:	05db      	lsls	r3, r3, #23
 800491c:	0011      	movs	r1, r2
 800491e:	0018      	movs	r0, r3
 8004920:	f7fc fcf2 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	46bd      	mov	sp, r7
 8004928:	b00b      	add	sp, #44	; 0x2c
 800492a:	bd90      	pop	{r4, r7, pc}
 800492c:	40013000 	.word	0x40013000
 8004930:	40021000 	.word	0x40021000
 8004934:	50000400 	.word	0x50000400

08004938 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004940:	230c      	movs	r3, #12
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	0018      	movs	r0, r3
 8004946:	2314      	movs	r3, #20
 8004948:	001a      	movs	r2, r3
 800494a:	2100      	movs	r1, #0
 800494c:	f000 f95a 	bl	8004c04 <memset>
  if(husart->Instance==USART1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <HAL_USART_MspInit+0x80>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d12a      	bne.n	80049b0 <HAL_USART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800495a:	4b18      	ldr	r3, [pc, #96]	; (80049bc <HAL_USART_MspInit+0x84>)
 800495c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495e:	4b17      	ldr	r3, [pc, #92]	; (80049bc <HAL_USART_MspInit+0x84>)
 8004960:	2180      	movs	r1, #128	; 0x80
 8004962:	01c9      	lsls	r1, r1, #7
 8004964:	430a      	orrs	r2, r1
 8004966:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <HAL_USART_MspInit+0x84>)
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	4b13      	ldr	r3, [pc, #76]	; (80049bc <HAL_USART_MspInit+0x84>)
 800496e:	2101      	movs	r1, #1
 8004970:	430a      	orrs	r2, r1
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <HAL_USART_MspInit+0x84>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	2201      	movs	r2, #1
 800497a:	4013      	ands	r3, r2
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 8004980:	210c      	movs	r1, #12
 8004982:	187b      	adds	r3, r7, r1
 8004984:	22e0      	movs	r2, #224	; 0xe0
 8004986:	00d2      	lsls	r2, r2, #3
 8004988:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498a:	187b      	adds	r3, r7, r1
 800498c:	2202      	movs	r2, #2
 800498e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	187b      	adds	r3, r7, r1
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004996:	187b      	adds	r3, r7, r1
 8004998:	2203      	movs	r2, #3
 800499a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800499c:	187b      	adds	r3, r7, r1
 800499e:	2204      	movs	r2, #4
 80049a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a2:	187a      	adds	r2, r7, r1
 80049a4:	23a0      	movs	r3, #160	; 0xa0
 80049a6:	05db      	lsls	r3, r3, #23
 80049a8:	0011      	movs	r1, r2
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7fc fcac 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b008      	add	sp, #32
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40013800 	.word	0x40013800
 80049bc:	40021000 	.word	0x40021000

080049c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c8:	230c      	movs	r3, #12
 80049ca:	18fb      	adds	r3, r7, r3
 80049cc:	0018      	movs	r0, r3
 80049ce:	2314      	movs	r3, #20
 80049d0:	001a      	movs	r2, r3
 80049d2:	2100      	movs	r1, #0
 80049d4:	f000 f916 	bl	8004c04 <memset>
  if(huart->Instance==USART2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1c      	ldr	r2, [pc, #112]	; (8004a50 <HAL_UART_MspInit+0x90>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d131      	bne.n	8004a46 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049e2:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <HAL_UART_MspInit+0x94>)
 80049e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e6:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <HAL_UART_MspInit+0x94>)
 80049e8:	2180      	movs	r1, #128	; 0x80
 80049ea:	0289      	lsls	r1, r1, #10
 80049ec:	430a      	orrs	r2, r1
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f0:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <HAL_UART_MspInit+0x94>)
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <HAL_UART_MspInit+0x94>)
 80049f6:	2101      	movs	r1, #1
 80049f8:	430a      	orrs	r2, r1
 80049fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80049fc:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <HAL_UART_MspInit+0x94>)
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	2201      	movs	r2, #1
 8004a02:	4013      	ands	r3, r2
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004a08:	210c      	movs	r1, #12
 8004a0a:	187b      	adds	r3, r7, r1
 8004a0c:	220c      	movs	r2, #12
 8004a0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	2202      	movs	r2, #2
 8004a14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a16:	187b      	adds	r3, r7, r1
 8004a18:	2200      	movs	r2, #0
 8004a1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1c:	187b      	adds	r3, r7, r1
 8004a1e:	2203      	movs	r2, #3
 8004a20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004a22:	187b      	adds	r3, r7, r1
 8004a24:	2204      	movs	r2, #4
 8004a26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a28:	187a      	adds	r2, r7, r1
 8004a2a:	23a0      	movs	r3, #160	; 0xa0
 8004a2c:	05db      	lsls	r3, r3, #23
 8004a2e:	0011      	movs	r1, r2
 8004a30:	0018      	movs	r0, r3
 8004a32:	f7fc fc69 	bl	8001308 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a36:	2200      	movs	r2, #0
 8004a38:	2100      	movs	r1, #0
 8004a3a:	201c      	movs	r0, #28
 8004a3c:	f7fb fe22 	bl	8000684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a40:	201c      	movs	r0, #28
 8004a42:	f7fb fe34 	bl	80006ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b008      	add	sp, #32
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	40004400 	.word	0x40004400
 8004a54:	40021000 	.word	0x40021000

08004a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a66:	e7fe      	b.n	8004a66 <HardFault_Handler+0x4>

08004a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a80:	f7fb fd24 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004a90:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <RTC_IRQHandler+0x14>)
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7fe f890 	bl	8002bb8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	20000098 	.word	0x20000098

08004aa4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7fc fdf7 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004aae:	2002      	movs	r0, #2
 8004ab0:	f7fc fdf4 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004abe:	2010      	movs	r0, #16
 8004ac0:	f7fc fdec 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	019b      	lsls	r3, r3, #6
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fc fde7 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <USART2_IRQHandler+0x14>)
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7fe fa02 	bl	8002ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	20000118 	.word	0x20000118

08004aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <SystemInit+0x64>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <SystemInit+0x64>)
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	0049      	lsls	r1, r1, #1
 8004afa:	430a      	orrs	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <SystemInit+0x64>)
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <SystemInit+0x64>)
 8004b04:	4913      	ldr	r1, [pc, #76]	; (8004b54 <SystemInit+0x68>)
 8004b06:	400a      	ands	r2, r1
 8004b08:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004b0a:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <SystemInit+0x64>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <SystemInit+0x64>)
 8004b10:	4911      	ldr	r1, [pc, #68]	; (8004b58 <SystemInit+0x6c>)
 8004b12:	400a      	ands	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <SystemInit+0x64>)
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <SystemInit+0x64>)
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	438a      	bics	r2, r1
 8004b20:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <SystemInit+0x64>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <SystemInit+0x64>)
 8004b28:	490c      	ldr	r1, [pc, #48]	; (8004b5c <SystemInit+0x70>)
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <SystemInit+0x64>)
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <SystemInit+0x64>)
 8004b34:	490a      	ldr	r1, [pc, #40]	; (8004b60 <SystemInit+0x74>)
 8004b36:	400a      	ands	r2, r1
 8004b38:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <SystemInit+0x64>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <SystemInit+0x78>)
 8004b42:	2280      	movs	r2, #128	; 0x80
 8004b44:	0512      	lsls	r2, r2, #20
 8004b46:	609a      	str	r2, [r3, #8]
#endif
}
 8004b48:	46c0      	nop			; (mov r8, r8)
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	40021000 	.word	0x40021000
 8004b54:	88ff400c 	.word	0x88ff400c
 8004b58:	fef6fff6 	.word	0xfef6fff6
 8004b5c:	fffbffff 	.word	0xfffbffff
 8004b60:	ff02ffff 	.word	0xff02ffff
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004b68:	480d      	ldr	r0, [pc, #52]	; (8004ba0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004b6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004b6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b6e:	e003      	b.n	8004b78 <LoopCopyDataInit>

08004b70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004b72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b76:	3104      	adds	r1, #4

08004b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b78:	480b      	ldr	r0, [pc, #44]	; (8004ba8 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <LoopForever+0xe>)
  adds  r2, r0, r1
 8004b7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b80:	d3f6      	bcc.n	8004b70 <CopyDataInit>
  ldr  r2, =_sbss
 8004b82:	4a0b      	ldr	r2, [pc, #44]	; (8004bb0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8004b84:	e002      	b.n	8004b8c <LoopFillZerobss>

08004b86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004b86:	2300      	movs	r3, #0
  str  r3, [r2]
 8004b88:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b8a:	3204      	adds	r2, #4

08004b8c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <LoopForever+0x16>)
  cmp  r2, r3
 8004b8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b90:	d3f9      	bcc.n	8004b86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004b92:	f7ff ffab 	bl	8004aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b96:	f000 f811 	bl	8004bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b9a:	f7ff fa9d 	bl	80040d8 <main>

08004b9e <LoopForever>:

LoopForever:
    b LoopForever
 8004b9e:	e7fe      	b.n	8004b9e <LoopForever>
   ldr   r0, =_estack
 8004ba0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004ba4:	08004ccc 	.word	0x08004ccc
  ldr  r0, =_sdata
 8004ba8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004bac:	20000044 	.word	0x20000044
  ldr  r2, =_sbss
 8004bb0:	20000044 	.word	0x20000044
  ldr  r3, = _ebss
 8004bb4:	200001fc 	.word	0x200001fc

08004bb8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bb8:	e7fe      	b.n	8004bb8 <ADC1_COMP_IRQHandler>
	...

08004bbc <__libc_init_array>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	2600      	movs	r6, #0
 8004bc0:	4d0c      	ldr	r5, [pc, #48]	; (8004bf4 <__libc_init_array+0x38>)
 8004bc2:	4c0d      	ldr	r4, [pc, #52]	; (8004bf8 <__libc_init_array+0x3c>)
 8004bc4:	1b64      	subs	r4, r4, r5
 8004bc6:	10a4      	asrs	r4, r4, #2
 8004bc8:	42a6      	cmp	r6, r4
 8004bca:	d109      	bne.n	8004be0 <__libc_init_array+0x24>
 8004bcc:	2600      	movs	r6, #0
 8004bce:	f000 f821 	bl	8004c14 <_init>
 8004bd2:	4d0a      	ldr	r5, [pc, #40]	; (8004bfc <__libc_init_array+0x40>)
 8004bd4:	4c0a      	ldr	r4, [pc, #40]	; (8004c00 <__libc_init_array+0x44>)
 8004bd6:	1b64      	subs	r4, r4, r5
 8004bd8:	10a4      	asrs	r4, r4, #2
 8004bda:	42a6      	cmp	r6, r4
 8004bdc:	d105      	bne.n	8004bea <__libc_init_array+0x2e>
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	00b3      	lsls	r3, r6, #2
 8004be2:	58eb      	ldr	r3, [r5, r3]
 8004be4:	4798      	blx	r3
 8004be6:	3601      	adds	r6, #1
 8004be8:	e7ee      	b.n	8004bc8 <__libc_init_array+0xc>
 8004bea:	00b3      	lsls	r3, r6, #2
 8004bec:	58eb      	ldr	r3, [r5, r3]
 8004bee:	4798      	blx	r3
 8004bf0:	3601      	adds	r6, #1
 8004bf2:	e7f2      	b.n	8004bda <__libc_init_array+0x1e>
 8004bf4:	08004cc4 	.word	0x08004cc4
 8004bf8:	08004cc4 	.word	0x08004cc4
 8004bfc:	08004cc4 	.word	0x08004cc4
 8004c00:	08004cc8 	.word	0x08004cc8

08004c04 <memset>:
 8004c04:	0003      	movs	r3, r0
 8004c06:	1812      	adds	r2, r2, r0
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memset+0xa>
 8004c0c:	4770      	bx	lr
 8004c0e:	7019      	strb	r1, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	e7f9      	b.n	8004c08 <memset+0x4>

08004c14 <_init>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr

08004c20 <_fini>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c26:	bc08      	pop	{r3}
 8004c28:	469e      	mov	lr, r3
 8004c2a:	4770      	bx	lr
