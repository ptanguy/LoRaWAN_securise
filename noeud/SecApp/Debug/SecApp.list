
SecApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .PCROPedCode  00000030  08008000  08008000  00028000  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003f9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000090  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080040ec  080040ec  00028030  2**0
                  CONTENTS
  5 .ARM          00000008  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080040f4  080040f4  00028030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000044  20000000  080040fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000001a4  20000044  08004140  00020044  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  08004140  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00028030  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c45f  00000000  00000000  00028058  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001eb5  00000000  00000000  000344b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000cf8  00000000  00000000  00036370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000be0  00000000  00000000  00037068  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000146d7  00000000  00000000  00037c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ab39  00000000  00000000  0004c31f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00081277  00000000  00000000  00056e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d80cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002dbc  00000000  00000000  000d814c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .PCROPedCode:

08008000 <MySecret_fct>:
 */


#include "MySecret.h"

unsigned char MySecret_fct(unsigned char number){
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	0002      	movs	r2, r0
 8008008:	1dfb      	adds	r3, r7, #7
 800800a:	701a      	strb	r2, [r3, #0]
	if (256 > (number*number)){
 800800c:	1dfb      	adds	r3, r7, #7
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	1dfa      	adds	r2, r7, #7
 8008012:	7812      	ldrb	r2, [r2, #0]
 8008014:	4353      	muls	r3, r2
 8008016:	2bff      	cmp	r3, #255	; 0xff
 8008018:	dc05      	bgt.n	8008026 <MySecret_fct+0x26>
		return number*number;
 800801a:	1dfb      	adds	r3, r7, #7
 800801c:	781a      	ldrb	r2, [r3, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	4353      	muls	r3, r2
 8008022:	b2db      	uxtb	r3, r3
 8008024:	e000      	b.n	8008028 <MySecret_fct+0x28>
		}
	else{
		return 0;
 8008026:	2300      	movs	r3, #0
		}
}
 8008028:	0018      	movs	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	b002      	add	sp, #8
 800802e:	bd80      	pop	{r7, pc}

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	.short	0x4b05
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	e0004804 	.word	0xe0004804
 80000d4:	bf00      	nop
 80000d6:	2301      	.short	0x2301
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	.short	0xbd10
 80000dc:	0044      	lsls	r4, r0, #1
 80000de:	2000      	movs	r0, #0
 80000e0:	0000      	movs	r0, r0
 80000e2:	0000      	.short	0x0000
 80000e4:	4044      	eors	r4, r0
 80000e6:	0800      	lsrs	r0, r0, #32

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	48044903 	.word	0x48044903
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	.short	0xbf00
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	.short	0x46c0
 80000fc:	0000      	movs	r0, r0
 80000fe:	0000      	.short	0x0000
 8000100:	0048      	lsls	r0, r1, #1
 8000102:	2000      	.short	0x2000
 8000104:	4044      	eors	r4, r0
 8000106:	0800      	lsrs	r0, r0, #32

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	.short	0x0843
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	.short	0xd374
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	.short	0x428b
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	.short	0x0a03
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	.short	0xd344
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	.short	0x428b
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	.short	0x0c03
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	020922ff 	.word	0x020922ff
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	.short	0xd302
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	d319428b 	.word	0xd319428b
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	.short	0x0a09
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	.short	0x428b
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	.short	0x03cb
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	.short	0x4152
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	.short	0x428b
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	.short	0x4152
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	.short	0x428b
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	.short	0x034b
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	41521ac0 	.word	0x41521ac0
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	.short	0x428b
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	.short	0x02cb
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	.short	0x4152
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	.short	0x428b
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	.short	0x028b
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	.short	0x4152
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	.short	0x428b
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	.short	0x024b
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	.short	0x4152
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	.short	0x428b
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	.short	0x020b
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	.short	0x4152
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	.short	0x09c3
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	1ac001cb 	.word	0x1ac001cb
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	1ac0018b 	.word	0x1ac0018b
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	.short	0x1ac0
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	.short	0x0903
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	.short	0xd301
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	08c34152 	.word	0x08c34152
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	.short	0xd301
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	.short	0x1ac0
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	.short	0x0883
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	.short	0xd301
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	d301428b 	.word	0xd301428b
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_Init+0x3c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_Init+0x3c>)
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f811 	bl	8000478 <HAL_InitTick>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d003      	beq.n	8000462 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e001      	b.n	8000466 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000462:	f003 fbe5 	bl	8003c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
}
 800046a:	0018      	movs	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	0099      	lsls	r1, r3, #2
 8000490:	0010      	movs	r0, r2
 8000492:	f7ff fe39 	bl	8000108 <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 f918 	bl	80006ce <HAL_SYSTICK_Config>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d004      	beq.n	80004ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e006      	b.n	80004ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f8e5 	bl	8000684 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000040 	.word	0x20000040

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_IncTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_IncTick+0x14>)
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000064 	.word	0x20000064

080004e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return uwTick;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_GetTick+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000064 	.word	0x20000064

080004f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000500:	f7ff fff0 	bl	80004e4 <HAL_GetTick>
 8000504:	0003      	movs	r3, r0
 8000506:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	d002      	beq.n	8000518 <HAL_Delay+0x20>
  {
    wait++;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	f7ff ffe3 	bl	80004e4 <HAL_GetTick>
 800051e:	0002      	movs	r2, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d8f7      	bhi.n	800051a <HAL_Delay+0x22>
  {
  }
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b004      	add	sp, #16
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000540:	1dfb      	adds	r3, r7, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	231f      	movs	r3, #31
 8000548:	401a      	ands	r2, r3
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <NVIC_EnableIRQ+0x28>)
 800054c:	2101      	movs	r1, #1
 800054e:	4091      	lsls	r1, r2
 8000550:	000a      	movs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}
 800055c:	e000e100 	.word	0xe000e100

08000560 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	0002      	movs	r2, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b7f      	cmp	r3, #127	; 0x7f
 8000574:	d932      	bls.n	80005dc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000576:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <NVIC_SetPriority+0xd4>)
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	0019      	movs	r1, r3
 800057e:	230f      	movs	r3, #15
 8000580:	400b      	ands	r3, r1
 8000582:	3b08      	subs	r3, #8
 8000584:	089b      	lsrs	r3, r3, #2
 8000586:	3306      	adds	r3, #6
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	18d3      	adds	r3, r2, r3
 800058c:	3304      	adds	r3, #4
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	1dfa      	adds	r2, r7, #7
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	0011      	movs	r1, r2
 8000596:	2203      	movs	r2, #3
 8000598:	400a      	ands	r2, r1
 800059a:	00d2      	lsls	r2, r2, #3
 800059c:	21ff      	movs	r1, #255	; 0xff
 800059e:	4091      	lsls	r1, r2
 80005a0:	000a      	movs	r2, r1
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	401a      	ands	r2, r3
 80005a6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	019b      	lsls	r3, r3, #6
 80005ac:	22ff      	movs	r2, #255	; 0xff
 80005ae:	401a      	ands	r2, r3
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	0018      	movs	r0, r3
 80005b6:	2303      	movs	r3, #3
 80005b8:	4003      	ands	r3, r0
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005be:	481d      	ldr	r0, [pc, #116]	; (8000634 <NVIC_SetPriority+0xd4>)
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	001c      	movs	r4, r3
 80005c6:	230f      	movs	r3, #15
 80005c8:	4023      	ands	r3, r4
 80005ca:	3b08      	subs	r3, #8
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	430a      	orrs	r2, r1
 80005d0:	3306      	adds	r3, #6
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	18c3      	adds	r3, r0, r3
 80005d6:	3304      	adds	r3, #4
 80005d8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005da:	e027      	b.n	800062c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005dc:	4a16      	ldr	r2, [pc, #88]	; (8000638 <NVIC_SetPriority+0xd8>)
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b25b      	sxtb	r3, r3
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	33c0      	adds	r3, #192	; 0xc0
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	589b      	ldr	r3, [r3, r2]
 80005ec:	1dfa      	adds	r2, r7, #7
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	0011      	movs	r1, r2
 80005f2:	2203      	movs	r2, #3
 80005f4:	400a      	ands	r2, r1
 80005f6:	00d2      	lsls	r2, r2, #3
 80005f8:	21ff      	movs	r1, #255	; 0xff
 80005fa:	4091      	lsls	r1, r2
 80005fc:	000a      	movs	r2, r1
 80005fe:	43d2      	mvns	r2, r2
 8000600:	401a      	ands	r2, r3
 8000602:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	019b      	lsls	r3, r3, #6
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	401a      	ands	r2, r3
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	0018      	movs	r0, r3
 8000612:	2303      	movs	r3, #3
 8000614:	4003      	ands	r3, r0
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <NVIC_SetPriority+0xd8>)
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	430a      	orrs	r2, r1
 8000626:	33c0      	adds	r3, #192	; 0xc0
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	501a      	str	r2, [r3, r0]
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b003      	add	sp, #12
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	e000e100 	.word	0xe000e100

0800063c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <SysTick_Config+0x40>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d901      	bls.n	8000652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064e:	2301      	movs	r3, #1
 8000650:	e010      	b.n	8000674 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <SysTick_Config+0x44>)
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	3a01      	subs	r2, #1
 8000658:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065a:	2301      	movs	r3, #1
 800065c:	425b      	negs	r3, r3
 800065e:	2103      	movs	r1, #3
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ff7d 	bl	8000560 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <SysTick_Config+0x44>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <SysTick_Config+0x44>)
 800066e:	2207      	movs	r2, #7
 8000670:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000672:	2300      	movs	r3, #0
}
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b002      	add	sp, #8
 800067a:	bd80      	pop	{r7, pc}
 800067c:	00ffffff 	.word	0x00ffffff
 8000680:	e000e010 	.word	0xe000e010

08000684 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	210f      	movs	r1, #15
 8000690:	187b      	adds	r3, r7, r1
 8000692:	1c02      	adds	r2, r0, #0
 8000694:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	187b      	adds	r3, r7, r1
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b25b      	sxtb	r3, r3
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f7ff ff5d 	bl	8000560 <NVIC_SetPriority>
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b004      	add	sp, #16
 80006ac:	bd80      	pop	{r7, pc}

080006ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	0002      	movs	r2, r0
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	0018      	movs	r0, r3
 80006c2:	f7ff ff37 	bl	8000534 <NVIC_EnableIRQ>
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b002      	add	sp, #8
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff ffaf 	bl	800063c <SysTick_Config>
 80006de:	0003      	movs	r3, r0
}
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80006f0:	230f      	movs	r3, #15
 80006f2:	18fb      	adds	r3, r7, r3
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2225      	movs	r2, #37	; 0x25
 80006fc:	5c9b      	ldrb	r3, [r3, r2]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b02      	cmp	r3, #2
 8000702:	d007      	beq.n	8000714 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2204      	movs	r2, #4
 8000708:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800070a:	230f      	movs	r3, #15
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e02a      	b.n	800076a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	210e      	movs	r1, #14
 8000720:	438a      	bics	r2, r1
 8000722:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2101      	movs	r1, #1
 8000730:	438a      	bics	r2, r1
 8000732:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000738:	221c      	movs	r2, #28
 800073a:	401a      	ands	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	2101      	movs	r1, #1
 8000742:	4091      	lsls	r1, r2
 8000744:	000a      	movs	r2, r1
 8000746:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2225      	movs	r2, #37	; 0x25
 800074c:	2101      	movs	r1, #1
 800074e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2224      	movs	r2, #36	; 0x24
 8000754:	2100      	movs	r1, #0
 8000756:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075c:	2b00      	cmp	r3, #0
 800075e:	d004      	beq.n	800076a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	0010      	movs	r0, r2
 8000768:	4798      	blx	r3
    }
  }
  return status;
 800076a:	230f      	movs	r3, #15
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	781b      	ldrb	r3, [r3, #0]
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b004      	add	sp, #16
 8000776:	bd80      	pop	{r7, pc}

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800078e:	e155      	b.n	8000a3c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2101      	movs	r1, #1
 8000796:	697a      	ldr	r2, [r7, #20]
 8000798:	4091      	lsls	r1, r2
 800079a:	000a      	movs	r2, r1
 800079c:	4013      	ands	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d100      	bne.n	80007a8 <HAL_GPIO_Init+0x30>
 80007a6:	e146      	b.n	8000a36 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d003      	beq.n	80007b8 <HAL_GPIO_Init+0x40>
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	2b12      	cmp	r3, #18
 80007b6:	d123      	bne.n	8000800 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	08da      	lsrs	r2, r3, #3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3208      	adds	r2, #8
 80007c0:	0092      	lsls	r2, r2, #2
 80007c2:	58d3      	ldr	r3, [r2, r3]
 80007c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	2207      	movs	r2, #7
 80007ca:	4013      	ands	r3, r2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	220f      	movs	r2, #15
 80007d0:	409a      	lsls	r2, r3
 80007d2:	0013      	movs	r3, r2
 80007d4:	43da      	mvns	r2, r3
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	4013      	ands	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	691a      	ldr	r2, [r3, #16]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	2107      	movs	r1, #7
 80007e4:	400b      	ands	r3, r1
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	409a      	lsls	r2, r3
 80007ea:	0013      	movs	r3, r2
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	08da      	lsrs	r2, r3, #3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3208      	adds	r2, #8
 80007fa:	0092      	lsls	r2, r2, #2
 80007fc:	6939      	ldr	r1, [r7, #16]
 80007fe:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d00b      	beq.n	8000820 <HAL_GPIO_Init+0xa8>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d007      	beq.n	8000820 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000814:	2b11      	cmp	r3, #17
 8000816:	d003      	beq.n	8000820 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b12      	cmp	r3, #18
 800081e:	d130      	bne.n	8000882 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	2203      	movs	r2, #3
 800082c:	409a      	lsls	r2, r3
 800082e:	0013      	movs	r3, r2
 8000830:	43da      	mvns	r2, r3
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	68da      	ldr	r2, [r3, #12]
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	409a      	lsls	r2, r3
 8000842:	0013      	movs	r3, r2
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	4313      	orrs	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000856:	2201      	movs	r2, #1
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	409a      	lsls	r2, r3
 800085c:	0013      	movs	r3, r2
 800085e:	43da      	mvns	r2, r3
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	4013      	ands	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	091b      	lsrs	r3, r3, #4
 800086c:	2201      	movs	r2, #1
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
 8000874:	0013      	movs	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	4313      	orrs	r3, r2
 800087a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	2203      	movs	r2, #3
 800088e:	409a      	lsls	r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	43da      	mvns	r2, r3
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	4013      	ands	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2203      	movs	r2, #3
 80008a0:	401a      	ands	r2, r3
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	409a      	lsls	r2, r3
 80008a8:	0013      	movs	r3, r2
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	2203      	movs	r2, #3
 80008c2:	409a      	lsls	r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	43da      	mvns	r2, r3
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	4013      	ands	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	409a      	lsls	r2, r3
 80008d8:	0013      	movs	r3, r2
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685a      	ldr	r2, [r3, #4]
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	055b      	lsls	r3, r3, #21
 80008ee:	4013      	ands	r3, r2
 80008f0:	d100      	bne.n	80008f4 <HAL_GPIO_Init+0x17c>
 80008f2:	e0a0      	b.n	8000a36 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f4:	4b57      	ldr	r3, [pc, #348]	; (8000a54 <HAL_GPIO_Init+0x2dc>)
 80008f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f8:	4b56      	ldr	r3, [pc, #344]	; (8000a54 <HAL_GPIO_Init+0x2dc>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	430a      	orrs	r2, r1
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000900:	4a55      	ldr	r2, [pc, #340]	; (8000a58 <HAL_GPIO_Init+0x2e0>)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	089b      	lsrs	r3, r3, #2
 8000906:	3302      	adds	r3, #2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	589b      	ldr	r3, [r3, r2]
 800090c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	2203      	movs	r2, #3
 8000912:	4013      	ands	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	220f      	movs	r2, #15
 8000918:	409a      	lsls	r2, r3
 800091a:	0013      	movs	r3, r2
 800091c:	43da      	mvns	r2, r3
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	4013      	ands	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	23a0      	movs	r3, #160	; 0xa0
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	429a      	cmp	r2, r3
 800092c:	d01f      	beq.n	800096e <HAL_GPIO_Init+0x1f6>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a4a      	ldr	r2, [pc, #296]	; (8000a5c <HAL_GPIO_Init+0x2e4>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d019      	beq.n	800096a <HAL_GPIO_Init+0x1f2>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a49      	ldr	r2, [pc, #292]	; (8000a60 <HAL_GPIO_Init+0x2e8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d013      	beq.n	8000966 <HAL_GPIO_Init+0x1ee>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a48      	ldr	r2, [pc, #288]	; (8000a64 <HAL_GPIO_Init+0x2ec>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d00d      	beq.n	8000962 <HAL_GPIO_Init+0x1ea>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a47      	ldr	r2, [pc, #284]	; (8000a68 <HAL_GPIO_Init+0x2f0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d007      	beq.n	800095e <HAL_GPIO_Init+0x1e6>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a46      	ldr	r2, [pc, #280]	; (8000a6c <HAL_GPIO_Init+0x2f4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d101      	bne.n	800095a <HAL_GPIO_Init+0x1e2>
 8000956:	2305      	movs	r3, #5
 8000958:	e00a      	b.n	8000970 <HAL_GPIO_Init+0x1f8>
 800095a:	2306      	movs	r3, #6
 800095c:	e008      	b.n	8000970 <HAL_GPIO_Init+0x1f8>
 800095e:	2304      	movs	r3, #4
 8000960:	e006      	b.n	8000970 <HAL_GPIO_Init+0x1f8>
 8000962:	2303      	movs	r3, #3
 8000964:	e004      	b.n	8000970 <HAL_GPIO_Init+0x1f8>
 8000966:	2302      	movs	r3, #2
 8000968:	e002      	b.n	8000970 <HAL_GPIO_Init+0x1f8>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <HAL_GPIO_Init+0x1f8>
 800096e:	2300      	movs	r3, #0
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	2103      	movs	r1, #3
 8000974:	400a      	ands	r2, r1
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	4093      	lsls	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000980:	4935      	ldr	r1, [pc, #212]	; (8000a58 <HAL_GPIO_Init+0x2e0>)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	3302      	adds	r3, #2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <HAL_GPIO_Init+0x2f8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	43da      	mvns	r2, r3
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	4013      	ands	r3, r2
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <HAL_GPIO_Init+0x2f8>)
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <HAL_GPIO_Init+0x2f8>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	43da      	mvns	r2, r3
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	029b      	lsls	r3, r3, #10
 80009d0:	4013      	ands	r3, r2
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <HAL_GPIO_Init+0x2f8>)
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <HAL_GPIO_Init+0x2f8>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	43da      	mvns	r2, r3
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4013      	ands	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	035b      	lsls	r3, r3, #13
 80009fa:	4013      	ands	r3, r2
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <HAL_GPIO_Init+0x2f8>)
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_GPIO_Init+0x2f8>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	43da      	mvns	r2, r3
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	039b      	lsls	r3, r3, #14
 8000a24:	4013      	ands	r3, r2
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <HAL_GPIO_Init+0x2f8>)
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	40da      	lsrs	r2, r3
 8000a44:	1e13      	subs	r3, r2, #0
 8000a46:	d000      	beq.n	8000a4a <HAL_GPIO_Init+0x2d2>
 8000a48:	e6a2      	b.n	8000790 <HAL_GPIO_Init+0x18>
  }
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b006      	add	sp, #24
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010000 	.word	0x40010000
 8000a5c:	50000400 	.word	0x50000400
 8000a60:	50000800 	.word	0x50000800
 8000a64:	50000c00 	.word	0x50000c00
 8000a68:	50001000 	.word	0x50001000
 8000a6c:	50001c00 	.word	0x50001c00
 8000a70:	40010400 	.word	0x40010400

08000a74 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	1cbb      	adds	r3, r7, #2
 8000a80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	1cba      	adds	r2, r7, #2
 8000a88:	8812      	ldrh	r2, [r2, #0]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	d004      	beq.n	8000a98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000a8e:	230f      	movs	r3, #15
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	e003      	b.n	8000aa0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a98:	230f      	movs	r3, #15
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	781b      	ldrb	r3, [r3, #0]
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b004      	add	sp, #16
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	0008      	movs	r0, r1
 8000ab8:	0011      	movs	r1, r2
 8000aba:	1cbb      	adds	r3, r7, #2
 8000abc:	1c02      	adds	r2, r0, #0
 8000abe:	801a      	strh	r2, [r3, #0]
 8000ac0:	1c7b      	adds	r3, r7, #1
 8000ac2:	1c0a      	adds	r2, r1, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000ac6:	1c7b      	adds	r3, r7, #1
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ace:	1cbb      	adds	r3, r7, #2
 8000ad0:	881a      	ldrh	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ad6:	e003      	b.n	8000ae0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ad8:	1cbb      	adds	r3, r7, #2
 8000ada:	881a      	ldrh	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	000a      	movs	r2, r1
 8000af2:	1cbb      	adds	r3, r7, #2
 8000af4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	695a      	ldr	r2, [r3, #20]
 8000afa:	1cbb      	adds	r3, r7, #2
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	405a      	eors	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	615a      	str	r2, [r3, #20]
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	1dbb      	adds	r3, r7, #6
 8000b16:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	1dba      	adds	r2, r7, #6
 8000b1e:	8812      	ldrh	r2, [r2, #0]
 8000b20:	4013      	ands	r3, r2
 8000b22:	d008      	beq.n	8000b36 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000b26:	1dba      	adds	r2, r7, #6
 8000b28:	8812      	ldrh	r2, [r2, #0]
 8000b2a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b2c:	1dbb      	adds	r3, r7, #6
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 f807 	bl	8000b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	40010400 	.word	0x40010400

08000b44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	1dbb      	adds	r3, r7, #6
 8000b4e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	f000 fbbc 	bl	80012e4 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b6c:	4bc8      	ldr	r3, [pc, #800]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	220c      	movs	r2, #12
 8000b72:	4013      	ands	r3, r2
 8000b74:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b76:	4bc6      	ldr	r3, [pc, #792]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	025b      	lsls	r3, r3, #9
 8000b7e:	4013      	ands	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2201      	movs	r2, #1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d100      	bne.n	8000b8e <HAL_RCC_OscConfig+0x36>
 8000b8c:	e07e      	b.n	8000c8c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d007      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	2b0c      	cmp	r3, #12
 8000b98:	d112      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x68>
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	025b      	lsls	r3, r3, #9
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d10d      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba4:	4bba      	ldr	r3, [pc, #744]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	029b      	lsls	r3, r3, #10
 8000bac:	4013      	ands	r3, r2
 8000bae:	d100      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x5a>
 8000bb0:	e06b      	b.n	8000c8a <HAL_RCC_OscConfig+0x132>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d167      	bne.n	8000c8a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f000 fb92 	bl	80012e4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	025b      	lsls	r3, r3, #9
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d107      	bne.n	8000bdc <HAL_RCC_OscConfig+0x84>
 8000bcc:	4bb0      	ldr	r3, [pc, #704]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4baf      	ldr	r3, [pc, #700]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	0249      	lsls	r1, r1, #9
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	e027      	b.n	8000c2c <HAL_RCC_OscConfig+0xd4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	23a0      	movs	r3, #160	; 0xa0
 8000be2:	02db      	lsls	r3, r3, #11
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d10e      	bne.n	8000c06 <HAL_RCC_OscConfig+0xae>
 8000be8:	4ba9      	ldr	r3, [pc, #676]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4ba8      	ldr	r3, [pc, #672]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	02c9      	lsls	r1, r1, #11
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	4ba6      	ldr	r3, [pc, #664]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4ba5      	ldr	r3, [pc, #660]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0249      	lsls	r1, r1, #9
 8000c00:	430a      	orrs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	e012      	b.n	8000c2c <HAL_RCC_OscConfig+0xd4>
 8000c06:	4ba2      	ldr	r3, [pc, #648]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4ba1      	ldr	r3, [pc, #644]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c0c:	49a1      	ldr	r1, [pc, #644]	; (8000e94 <HAL_RCC_OscConfig+0x33c>)
 8000c0e:	400a      	ands	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	4b9f      	ldr	r3, [pc, #636]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	025b      	lsls	r3, r3, #9
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4b9b      	ldr	r3, [pc, #620]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b9a      	ldr	r3, [pc, #616]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c26:	499c      	ldr	r1, [pc, #624]	; (8000e98 <HAL_RCC_OscConfig+0x340>)
 8000c28:	400a      	ands	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d015      	beq.n	8000c60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fc56 	bl	80004e4 <HAL_GetTick>
 8000c38:	0003      	movs	r3, r0
 8000c3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c3c:	e009      	b.n	8000c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c3e:	f7ff fc51 	bl	80004e4 <HAL_GetTick>
 8000c42:	0002      	movs	r2, r0
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	2b64      	cmp	r3, #100	; 0x64
 8000c4a:	d902      	bls.n	8000c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	f000 fb49 	bl	80012e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c52:	4b8f      	ldr	r3, [pc, #572]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	029b      	lsls	r3, r3, #10
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d0ef      	beq.n	8000c3e <HAL_RCC_OscConfig+0xe6>
 8000c5e:	e015      	b.n	8000c8c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fc40 	bl	80004e4 <HAL_GetTick>
 8000c64:	0003      	movs	r3, r0
 8000c66:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c68:	e008      	b.n	8000c7c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c6a:	f7ff fc3b 	bl	80004e4 <HAL_GetTick>
 8000c6e:	0002      	movs	r2, r0
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b64      	cmp	r3, #100	; 0x64
 8000c76:	d901      	bls.n	8000c7c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e333      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c7c:	4b84      	ldr	r3, [pc, #528]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	029b      	lsls	r3, r3, #10
 8000c84:	4013      	ands	r3, r2
 8000c86:	d1f0      	bne.n	8000c6a <HAL_RCC_OscConfig+0x112>
 8000c88:	e000      	b.n	8000c8c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2202      	movs	r2, #2
 8000c92:	4013      	ands	r3, r2
 8000c94:	d100      	bne.n	8000c98 <HAL_RCC_OscConfig+0x140>
 8000c96:	e098      	b.n	8000dca <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	d009      	beq.n	8000cba <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000ca6:	4b7a      	ldr	r3, [pc, #488]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b79      	ldr	r3, [pc, #484]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000cac:	2120      	movs	r1, #32
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	4393      	bics	r3, r2
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d005      	beq.n	8000ccc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	2b0c      	cmp	r3, #12
 8000cc4:	d13d      	bne.n	8000d42 <HAL_RCC_OscConfig+0x1ea>
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d13a      	bne.n	8000d42 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000ccc:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d004      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x188>
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e301      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce0:	4b6b      	ldr	r3, [pc, #428]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a6d      	ldr	r2, [pc, #436]	; (8000e9c <HAL_RCC_OscConfig+0x344>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	0019      	movs	r1, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	021a      	lsls	r2, r3, #8
 8000cf0:	4b67      	ldr	r3, [pc, #412]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000cf6:	4b66      	ldr	r3, [pc, #408]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2209      	movs	r2, #9
 8000cfc:	4393      	bics	r3, r2
 8000cfe:	0019      	movs	r1, r3
 8000d00:	4b63      	ldr	r3, [pc, #396]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d08:	f000 fc20 	bl	800154c <HAL_RCC_GetSysClockFreq>
 8000d0c:	0001      	movs	r1, r0
 8000d0e:	4b60      	ldr	r3, [pc, #384]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	220f      	movs	r2, #15
 8000d16:	4013      	ands	r3, r2
 8000d18:	4a61      	ldr	r2, [pc, #388]	; (8000ea0 <HAL_RCC_OscConfig+0x348>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	40da      	lsrs	r2, r3
 8000d20:	4b60      	ldr	r3, [pc, #384]	; (8000ea4 <HAL_RCC_OscConfig+0x34c>)
 8000d22:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000d24:	2513      	movs	r5, #19
 8000d26:	197c      	adds	r4, r7, r5
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff fba5 	bl	8000478 <HAL_InitTick>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000d32:	197b      	adds	r3, r7, r5
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d047      	beq.n	8000dca <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8000d3a:	2313      	movs	r3, #19
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	e2d0      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d027      	beq.n	8000d98 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d48:	4b51      	ldr	r3, [pc, #324]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2209      	movs	r2, #9
 8000d4e:	4393      	bics	r3, r2
 8000d50:	0019      	movs	r1, r3
 8000d52:	4b4f      	ldr	r3, [pc, #316]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d56:	430a      	orrs	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5a:	f7ff fbc3 	bl	80004e4 <HAL_GetTick>
 8000d5e:	0003      	movs	r3, r0
 8000d60:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d64:	f7ff fbbe 	bl	80004e4 <HAL_GetTick>
 8000d68:	0002      	movs	r2, r0
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e2b6      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d76:	4b46      	ldr	r3, [pc, #280]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d0f1      	beq.n	8000d64 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d80:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4a45      	ldr	r2, [pc, #276]	; (8000e9c <HAL_RCC_OscConfig+0x344>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	0019      	movs	r1, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	021a      	lsls	r2, r3, #8
 8000d90:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d92:	430a      	orrs	r2, r1
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	e018      	b.n	8000dca <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d98:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d9e:	2101      	movs	r1, #1
 8000da0:	438a      	bics	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fb9e 	bl	80004e4 <HAL_GetTick>
 8000da8:	0003      	movs	r3, r0
 8000daa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dae:	f7ff fb99 	bl	80004e4 <HAL_GetTick>
 8000db2:	0002      	movs	r2, r0
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e291      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000dc0:	4b33      	ldr	r3, [pc, #204]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d1f1      	bne.n	8000dae <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2210      	movs	r2, #16
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d100      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x27e>
 8000dd4:	e09f      	b.n	8000f16 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d13f      	bne.n	8000e5c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ddc:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4013      	ands	r3, r2
 8000de6:	d005      	beq.n	8000df4 <HAL_RCC_OscConfig+0x29c>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e277      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4a2b      	ldr	r2, [pc, #172]	; (8000ea8 <HAL_RCC_OscConfig+0x350>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e02:	4b23      	ldr	r3, [pc, #140]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e04:	430a      	orrs	r2, r1
 8000e06:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	021b      	lsls	r3, r3, #8
 8000e0e:	0a19      	lsrs	r1, r3, #8
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	061a      	lsls	r2, r3, #24
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	0b5b      	lsrs	r3, r3, #13
 8000e22:	3301      	adds	r3, #1
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	0212      	lsls	r2, r2, #8
 8000e28:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	210f      	movs	r1, #15
 8000e32:	400b      	ands	r3, r1
 8000e34:	491a      	ldr	r1, [pc, #104]	; (8000ea0 <HAL_RCC_OscConfig+0x348>)
 8000e36:	5ccb      	ldrb	r3, [r1, r3]
 8000e38:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_RCC_OscConfig+0x34c>)
 8000e3c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000e3e:	2513      	movs	r5, #19
 8000e40:	197c      	adds	r4, r7, r5
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff fb18 	bl	8000478 <HAL_InitTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000e4c:	197b      	adds	r3, r7, r5
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d060      	beq.n	8000f16 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8000e54:	2313      	movs	r3, #19
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	e243      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69db      	ldr	r3, [r3, #28]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d03e      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	0049      	lsls	r1, r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e72:	f7ff fb37 	bl	80004e4 <HAL_GetTick>
 8000e76:	0003      	movs	r3, r0
 8000e78:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e7a:	e017      	b.n	8000eac <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fb32 	bl	80004e4 <HAL_GetTick>
 8000e80:	0002      	movs	r2, r0
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d910      	bls.n	8000eac <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e22a      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40021000 	.word	0x40021000
 8000e94:	fffeffff 	.word	0xfffeffff
 8000e98:	fffbffff 	.word	0xfffbffff
 8000e9c:	ffffe0ff 	.word	0xffffe0ff
 8000ea0:	080040c8 	.word	0x080040c8
 8000ea4:	20000040 	.word	0x20000040
 8000ea8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000eac:	4bc6      	ldr	r3, [pc, #792]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d0e1      	beq.n	8000e7c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb8:	4bc3      	ldr	r3, [pc, #780]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4ac3      	ldr	r2, [pc, #780]	; (80011cc <HAL_RCC_OscConfig+0x674>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ec6:	4bc0      	ldr	r3, [pc, #768]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ecc:	4bbe      	ldr	r3, [pc, #760]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	0a19      	lsrs	r1, r3, #8
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	061a      	lsls	r2, r3, #24
 8000eda:	4bbb      	ldr	r3, [pc, #748]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000edc:	430a      	orrs	r2, r1
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	e019      	b.n	8000f16 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ee2:	4bb9      	ldr	r3, [pc, #740]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4bb8      	ldr	r3, [pc, #736]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000ee8:	49b9      	ldr	r1, [pc, #740]	; (80011d0 <HAL_RCC_OscConfig+0x678>)
 8000eea:	400a      	ands	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff faf9 	bl	80004e4 <HAL_GetTick>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef8:	f7ff faf4 	bl	80004e4 <HAL_GetTick>
 8000efc:	0002      	movs	r2, r0
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e1ec      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000f0a:	4baf      	ldr	r3, [pc, #700]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4013      	ands	r3, r2
 8000f14:	d1f0      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d036      	beq.n	8000f8e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d019      	beq.n	8000f5c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f28:	4ba7      	ldr	r3, [pc, #668]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000f2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f2c:	4ba6      	ldr	r3, [pc, #664]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f34:	f7ff fad6 	bl	80004e4 <HAL_GetTick>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fad1 	bl	80004e4 <HAL_GetTick>
 8000f42:	0002      	movs	r2, r0
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e1c9      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000f50:	4b9d      	ldr	r3, [pc, #628]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f54:	2202      	movs	r2, #2
 8000f56:	4013      	ands	r3, r2
 8000f58:	d0f1      	beq.n	8000f3e <HAL_RCC_OscConfig+0x3e6>
 8000f5a:	e018      	b.n	8000f8e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5c:	4b9a      	ldr	r3, [pc, #616]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000f5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f60:	4b99      	ldr	r3, [pc, #612]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000f62:	2101      	movs	r1, #1
 8000f64:	438a      	bics	r2, r1
 8000f66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f68:	f7ff fabc 	bl	80004e4 <HAL_GetTick>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f72:	f7ff fab7 	bl	80004e4 <HAL_GetTick>
 8000f76:	0002      	movs	r2, r0
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e1af      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000f84:	4b90      	ldr	r3, [pc, #576]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f88:	2202      	movs	r2, #2
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d1f1      	bne.n	8000f72 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2204      	movs	r2, #4
 8000f94:	4013      	ands	r3, r2
 8000f96:	d100      	bne.n	8000f9a <HAL_RCC_OscConfig+0x442>
 8000f98:	e0af      	b.n	80010fa <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f9a:	2323      	movs	r3, #35	; 0x23
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa2:	4b89      	ldr	r3, [pc, #548]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	055b      	lsls	r3, r3, #21
 8000faa:	4013      	ands	r3, r2
 8000fac:	d10a      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b86      	ldr	r3, [pc, #536]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fb2:	4b85      	ldr	r3, [pc, #532]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	0549      	lsls	r1, r1, #21
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8000fbc:	2323      	movs	r3, #35	; 0x23
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	4b83      	ldr	r3, [pc, #524]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d11a      	bne.n	8001006 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fd0:	4b80      	ldr	r3, [pc, #512]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b7f      	ldr	r3, [pc, #508]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	0049      	lsls	r1, r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fa81 	bl	80004e4 <HAL_GetTick>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe8:	f7ff fa7c 	bl	80004e4 <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e174      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffa:	4b76      	ldr	r3, [pc, #472]	; (80011d4 <HAL_RCC_OscConfig+0x67c>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4013      	ands	r3, r2
 8001004:	d0f0      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	429a      	cmp	r2, r3
 8001010:	d107      	bne.n	8001022 <HAL_RCC_OscConfig+0x4ca>
 8001012:	4b6d      	ldr	r3, [pc, #436]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001016:	4b6c      	ldr	r3, [pc, #432]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0049      	lsls	r1, r1, #1
 800101c:	430a      	orrs	r2, r1
 800101e:	651a      	str	r2, [r3, #80]	; 0x50
 8001020:	e031      	b.n	8001086 <HAL_RCC_OscConfig+0x52e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10c      	bne.n	8001044 <HAL_RCC_OscConfig+0x4ec>
 800102a:	4b67      	ldr	r3, [pc, #412]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 800102c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800102e:	4b66      	ldr	r3, [pc, #408]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001030:	4967      	ldr	r1, [pc, #412]	; (80011d0 <HAL_RCC_OscConfig+0x678>)
 8001032:	400a      	ands	r2, r1
 8001034:	651a      	str	r2, [r3, #80]	; 0x50
 8001036:	4b64      	ldr	r3, [pc, #400]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 800103c:	4966      	ldr	r1, [pc, #408]	; (80011d8 <HAL_RCC_OscConfig+0x680>)
 800103e:	400a      	ands	r2, r1
 8001040:	651a      	str	r2, [r3, #80]	; 0x50
 8001042:	e020      	b.n	8001086 <HAL_RCC_OscConfig+0x52e>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	23a0      	movs	r3, #160	; 0xa0
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	429a      	cmp	r2, r3
 800104e:	d10e      	bne.n	800106e <HAL_RCC_OscConfig+0x516>
 8001050:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001054:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	00c9      	lsls	r1, r1, #3
 800105a:	430a      	orrs	r2, r1
 800105c:	651a      	str	r2, [r3, #80]	; 0x50
 800105e:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001062:	4b59      	ldr	r3, [pc, #356]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001064:	2180      	movs	r1, #128	; 0x80
 8001066:	0049      	lsls	r1, r1, #1
 8001068:	430a      	orrs	r2, r1
 800106a:	651a      	str	r2, [r3, #80]	; 0x50
 800106c:	e00b      	b.n	8001086 <HAL_RCC_OscConfig+0x52e>
 800106e:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001072:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001074:	4956      	ldr	r1, [pc, #344]	; (80011d0 <HAL_RCC_OscConfig+0x678>)
 8001076:	400a      	ands	r2, r1
 8001078:	651a      	str	r2, [r3, #80]	; 0x50
 800107a:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 800107c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800107e:	4b52      	ldr	r3, [pc, #328]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001080:	4955      	ldr	r1, [pc, #340]	; (80011d8 <HAL_RCC_OscConfig+0x680>)
 8001082:	400a      	ands	r2, r1
 8001084:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d015      	beq.n	80010ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108e:	f7ff fa29 	bl	80004e4 <HAL_GetTick>
 8001092:	0003      	movs	r3, r0
 8001094:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001096:	e009      	b.n	80010ac <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001098:	f7ff fa24 	bl	80004e4 <HAL_GetTick>
 800109c:	0002      	movs	r2, r0
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	4a4e      	ldr	r2, [pc, #312]	; (80011dc <HAL_RCC_OscConfig+0x684>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e11b      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010ac:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 80010ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4013      	ands	r3, r2
 80010b6:	d0ef      	beq.n	8001098 <HAL_RCC_OscConfig+0x540>
 80010b8:	e014      	b.n	80010e4 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fa13 	bl	80004e4 <HAL_GetTick>
 80010be:	0003      	movs	r3, r0
 80010c0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80010c2:	e009      	b.n	80010d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c4:	f7ff fa0e 	bl	80004e4 <HAL_GetTick>
 80010c8:	0002      	movs	r2, r0
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	4a43      	ldr	r2, [pc, #268]	; (80011dc <HAL_RCC_OscConfig+0x684>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e105      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 80010da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4013      	ands	r3, r2
 80010e2:	d1ef      	bne.n	80010c4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010e4:	2323      	movs	r3, #35	; 0x23
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d105      	bne.n	80010fa <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ee:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 80010f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 80010f4:	493a      	ldr	r1, [pc, #232]	; (80011e0 <HAL_RCC_OscConfig+0x688>)
 80010f6:	400a      	ands	r2, r1
 80010f8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2220      	movs	r2, #32
 8001100:	4013      	ands	r3, r2
 8001102:	d049      	beq.n	8001198 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d026      	beq.n	800115a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800110c:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001112:	2101      	movs	r1, #1
 8001114:	430a      	orrs	r2, r1
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 800111a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800111c:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 800111e:	2101      	movs	r1, #1
 8001120:	430a      	orrs	r2, r1
 8001122:	635a      	str	r2, [r3, #52]	; 0x34
 8001124:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <HAL_RCC_OscConfig+0x68c>)
 8001126:	6a1a      	ldr	r2, [r3, #32]
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <HAL_RCC_OscConfig+0x68c>)
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	0189      	lsls	r1, r1, #6
 800112e:	430a      	orrs	r2, r1
 8001130:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff f9d7 	bl	80004e4 <HAL_GetTick>
 8001136:	0003      	movs	r3, r0
 8001138:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800113c:	f7ff f9d2 	bl	80004e4 <HAL_GetTick>
 8001140:	0002      	movs	r2, r0
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e0ca      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	d0f1      	beq.n	800113c <HAL_RCC_OscConfig+0x5e4>
 8001158:	e01e      	b.n	8001198 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001160:	2101      	movs	r1, #1
 8001162:	438a      	bics	r2, r1
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_RCC_OscConfig+0x68c>)
 8001168:	6a1a      	ldr	r2, [r3, #32]
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_RCC_OscConfig+0x68c>)
 800116c:	491e      	ldr	r1, [pc, #120]	; (80011e8 <HAL_RCC_OscConfig+0x690>)
 800116e:	400a      	ands	r2, r1
 8001170:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff f9b7 	bl	80004e4 <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800117c:	f7ff f9b2 	bl	80004e4 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e0aa      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2202      	movs	r2, #2
 8001194:	4013      	ands	r3, r2
 8001196:	d1f1      	bne.n	800117c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	2b00      	cmp	r3, #0
 800119e:	d100      	bne.n	80011a2 <HAL_RCC_OscConfig+0x64a>
 80011a0:	e09f      	b.n	80012e2 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	2b0c      	cmp	r3, #12
 80011a6:	d100      	bne.n	80011aa <HAL_RCC_OscConfig+0x652>
 80011a8:	e078      	b.n	800129c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d159      	bne.n	8001266 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_RCC_OscConfig+0x670>)
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <HAL_RCC_OscConfig+0x694>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff f991 	bl	80004e4 <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011c6:	e01c      	b.n	8001202 <HAL_RCC_OscConfig+0x6aa>
 80011c8:	40021000 	.word	0x40021000
 80011cc:	ffff1fff 	.word	0xffff1fff
 80011d0:	fffffeff 	.word	0xfffffeff
 80011d4:	40007000 	.word	0x40007000
 80011d8:	fffffbff 	.word	0xfffffbff
 80011dc:	00001388 	.word	0x00001388
 80011e0:	efffffff 	.word	0xefffffff
 80011e4:	40010000 	.word	0x40010000
 80011e8:	ffffdfff 	.word	0xffffdfff
 80011ec:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f0:	f7ff f978 	bl	80004e4 <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e070      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <HAL_RCC_OscConfig+0x794>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	049b      	lsls	r3, r3, #18
 800120a:	4013      	ands	r3, r2
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <HAL_RCC_OscConfig+0x794>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	4a37      	ldr	r2, [pc, #220]	; (80012f0 <HAL_RCC_OscConfig+0x798>)
 8001214:	4013      	ands	r3, r2
 8001216:	0019      	movs	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	431a      	orrs	r2, r3
 8001228:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_RCC_OscConfig+0x794>)
 800122a:	430a      	orrs	r2, r1
 800122c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <HAL_RCC_OscConfig+0x794>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <HAL_RCC_OscConfig+0x794>)
 8001234:	2180      	movs	r1, #128	; 0x80
 8001236:	0449      	lsls	r1, r1, #17
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff f952 	bl	80004e4 <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff f94d 	bl	80004e4 <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e045      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <HAL_RCC_OscConfig+0x794>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	049b      	lsls	r3, r3, #18
 8001260:	4013      	ands	r3, r2
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x6ee>
 8001264:	e03d      	b.n	80012e2 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_RCC_OscConfig+0x794>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_RCC_OscConfig+0x794>)
 800126c:	4921      	ldr	r1, [pc, #132]	; (80012f4 <HAL_RCC_OscConfig+0x79c>)
 800126e:	400a      	ands	r2, r1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff f937 	bl	80004e4 <HAL_GetTick>
 8001276:	0003      	movs	r3, r0
 8001278:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff f932 	bl	80004e4 <HAL_GetTick>
 8001280:	0002      	movs	r2, r0
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e02a      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_RCC_OscConfig+0x794>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	049b      	lsls	r3, r3, #18
 8001296:	4013      	ands	r3, r2
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x724>
 800129a:	e022      	b.n	80012e2 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_RCC_OscConfig+0x794>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	025b      	lsls	r3, r3, #9
 80012b4:	401a      	ands	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d10f      	bne.n	80012de <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	23f0      	movs	r3, #240	; 0xf0
 80012c2:	039b      	lsls	r3, r3, #14
 80012c4:	401a      	ands	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d107      	bne.n	80012de <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	23c0      	movs	r3, #192	; 0xc0
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	401a      	ands	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b00a      	add	sp, #40	; 0x28
 80012ea:	bdb0      	pop	{r4, r5, r7, pc}
 80012ec:	40021000 	.word	0x40021000
 80012f0:	ff02ffff 	.word	0xff02ffff
 80012f4:	feffffff 	.word	0xfeffffff

080012f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e10d      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800130c:	4b88      	ldr	r3, [pc, #544]	; (8001530 <HAL_RCC_ClockConfig+0x238>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2201      	movs	r2, #1
 8001312:	4013      	ands	r3, r2
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d911      	bls.n	800133e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131a:	4b85      	ldr	r3, [pc, #532]	; (8001530 <HAL_RCC_ClockConfig+0x238>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2201      	movs	r2, #1
 8001320:	4393      	bics	r3, r2
 8001322:	0019      	movs	r1, r3
 8001324:	4b82      	ldr	r3, [pc, #520]	; (8001530 <HAL_RCC_ClockConfig+0x238>)
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800132c:	4b80      	ldr	r3, [pc, #512]	; (8001530 <HAL_RCC_ClockConfig+0x238>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2201      	movs	r2, #1
 8001332:	4013      	ands	r3, r2
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d001      	beq.n	800133e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0f4      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d009      	beq.n	800135c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001348:	4b7a      	ldr	r3, [pc, #488]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	22f0      	movs	r2, #240	; 0xf0
 800134e:	4393      	bics	r3, r2
 8001350:	0019      	movs	r1, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	4b77      	ldr	r3, [pc, #476]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 8001358:	430a      	orrs	r2, r1
 800135a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2201      	movs	r2, #1
 8001362:	4013      	ands	r3, r2
 8001364:	d100      	bne.n	8001368 <HAL_RCC_ClockConfig+0x70>
 8001366:	e089      	b.n	800147c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d107      	bne.n	8001380 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001370:	4b70      	ldr	r3, [pc, #448]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d120      	bne.n	80013be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0d3      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b03      	cmp	r3, #3
 8001386:	d107      	bne.n	8001398 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001388:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	049b      	lsls	r3, r3, #18
 8001390:	4013      	ands	r3, r2
 8001392:	d114      	bne.n	80013be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e0c7      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a0:	4b64      	ldr	r3, [pc, #400]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2204      	movs	r2, #4
 80013a6:	4013      	ands	r3, r2
 80013a8:	d109      	bne.n	80013be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e0bc      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ae:	4b61      	ldr	r3, [pc, #388]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4013      	ands	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0b4      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013be:	4b5d      	ldr	r3, [pc, #372]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2203      	movs	r2, #3
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4b59      	ldr	r3, [pc, #356]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 80013ce:	430a      	orrs	r2, r1
 80013d0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d2:	f7ff f887 	bl	80004e4 <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d111      	bne.n	8001406 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e2:	e009      	b.n	80013f8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e4:	f7ff f87e 	bl	80004e4 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_RCC_ClockConfig+0x240>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e097      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f8:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	220c      	movs	r2, #12
 80013fe:	4013      	ands	r3, r2
 8001400:	2b08      	cmp	r3, #8
 8001402:	d1ef      	bne.n	80013e4 <HAL_RCC_ClockConfig+0xec>
 8001404:	e03a      	b.n	800147c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d111      	bne.n	8001432 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800140e:	e009      	b.n	8001424 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001410:	f7ff f868 	bl	80004e4 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	4a47      	ldr	r2, [pc, #284]	; (8001538 <HAL_RCC_ClockConfig+0x240>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e081      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001424:	4b43      	ldr	r3, [pc, #268]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	220c      	movs	r2, #12
 800142a:	4013      	ands	r3, r2
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d1ef      	bne.n	8001410 <HAL_RCC_ClockConfig+0x118>
 8001430:	e024      	b.n	800147c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d11b      	bne.n	8001472 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800143a:	e009      	b.n	8001450 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143c:	f7ff f852 	bl	80004e4 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	4a3c      	ldr	r2, [pc, #240]	; (8001538 <HAL_RCC_ClockConfig+0x240>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e06b      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001450:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	220c      	movs	r2, #12
 8001456:	4013      	ands	r3, r2
 8001458:	2b04      	cmp	r3, #4
 800145a:	d1ef      	bne.n	800143c <HAL_RCC_ClockConfig+0x144>
 800145c:	e00e      	b.n	800147c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145e:	f7ff f841 	bl	80004e4 <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	4a33      	ldr	r2, [pc, #204]	; (8001538 <HAL_RCC_ClockConfig+0x240>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e05a      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	220c      	movs	r2, #12
 8001478:	4013      	ands	r3, r2
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HAL_RCC_ClockConfig+0x238>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2201      	movs	r2, #1
 8001482:	4013      	ands	r3, r2
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d211      	bcs.n	80014ae <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <HAL_RCC_ClockConfig+0x238>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2201      	movs	r2, #1
 8001490:	4393      	bics	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_RCC_ClockConfig+0x238>)
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_RCC_ClockConfig+0x238>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e03c      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2204      	movs	r2, #4
 80014b4:	4013      	ands	r3, r2
 80014b6:	d009      	beq.n	80014cc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_RCC_ClockConfig+0x244>)
 80014be:	4013      	ands	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2208      	movs	r2, #8
 80014d2:	4013      	ands	r3, r2
 80014d4:	d00a      	beq.n	80014ec <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_RCC_ClockConfig+0x248>)
 80014dc:	4013      	ands	r3, r2
 80014de:	0019      	movs	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	00da      	lsls	r2, r3, #3
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 80014e8:	430a      	orrs	r2, r1
 80014ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ec:	f000 f82e 	bl	800154c <HAL_RCC_GetSysClockFreq>
 80014f0:	0001      	movs	r1, r0
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <HAL_RCC_ClockConfig+0x23c>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	220f      	movs	r2, #15
 80014fa:	4013      	ands	r3, r2
 80014fc:	4a11      	ldr	r2, [pc, #68]	; (8001544 <HAL_RCC_ClockConfig+0x24c>)
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	000a      	movs	r2, r1
 8001502:	40da      	lsrs	r2, r3
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_RCC_ClockConfig+0x250>)
 8001506:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001508:	250b      	movs	r5, #11
 800150a:	197c      	adds	r4, r7, r5
 800150c:	2000      	movs	r0, #0
 800150e:	f7fe ffb3 	bl	8000478 <HAL_InitTick>
 8001512:	0003      	movs	r3, r0
 8001514:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001516:	197b      	adds	r3, r7, r5
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800151e:	230b      	movs	r3, #11
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	e000      	b.n	8001528 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bdb0      	pop	{r4, r5, r7, pc}
 8001530:	40022000 	.word	0x40022000
 8001534:	40021000 	.word	0x40021000
 8001538:	00001388 	.word	0x00001388
 800153c:	fffff8ff 	.word	0xfffff8ff
 8001540:	ffffc7ff 	.word	0xffffc7ff
 8001544:	080040c8 	.word	0x080040c8
 8001548:	20000040 	.word	0x20000040

0800154c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	220c      	movs	r2, #12
 800155c:	4013      	ands	r3, r2
 800155e:	2b08      	cmp	r3, #8
 8001560:	d00e      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x34>
 8001562:	2b0c      	cmp	r3, #12
 8001564:	d00f      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x3a>
 8001566:	2b04      	cmp	r3, #4
 8001568:	d157      	bne.n	800161a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800156a:	4b35      	ldr	r3, [pc, #212]	; (8001640 <HAL_RCC_GetSysClockFreq+0xf4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2210      	movs	r2, #16
 8001570:	4013      	ands	r3, r2
 8001572:	d002      	beq.n	800157a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001574:	4b33      	ldr	r3, [pc, #204]	; (8001644 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001576:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001578:	e05d      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800157a:	4b33      	ldr	r3, [pc, #204]	; (8001648 <HAL_RCC_GetSysClockFreq+0xfc>)
 800157c:	613b      	str	r3, [r7, #16]
      break;
 800157e:	e05a      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001580:	4b32      	ldr	r3, [pc, #200]	; (800164c <HAL_RCC_GetSysClockFreq+0x100>)
 8001582:	613b      	str	r3, [r7, #16]
      break;
 8001584:	e057      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	220f      	movs	r2, #15
 800158c:	4013      	ands	r3, r2
 800158e:	4a30      	ldr	r2, [pc, #192]	; (8001650 <HAL_RCC_GetSysClockFreq+0x104>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	0d9b      	lsrs	r3, r3, #22
 8001598:	2203      	movs	r2, #3
 800159a:	4013      	ands	r3, r2
 800159c:	3301      	adds	r3, #1
 800159e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a0:	4b27      	ldr	r3, [pc, #156]	; (8001640 <HAL_RCC_GetSysClockFreq+0xf4>)
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	025b      	lsls	r3, r3, #9
 80015a8:	4013      	ands	r3, r2
 80015aa:	d00f      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	000a      	movs	r2, r1
 80015b0:	0152      	lsls	r2, r2, #5
 80015b2:	1a52      	subs	r2, r2, r1
 80015b4:	0193      	lsls	r3, r2, #6
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	185b      	adds	r3, r3, r1
 80015bc:	025b      	lsls	r3, r3, #9
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	0018      	movs	r0, r3
 80015c2:	f7fe fda1 	bl	8000108 <__udivsi3>
 80015c6:	0003      	movs	r3, r0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e023      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_RCC_GetSysClockFreq+0xf4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2210      	movs	r2, #16
 80015d2:	4013      	ands	r3, r2
 80015d4:	d00f      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	000a      	movs	r2, r1
 80015da:	0152      	lsls	r2, r2, #5
 80015dc:	1a52      	subs	r2, r2, r1
 80015de:	0193      	lsls	r3, r2, #6
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	185b      	adds	r3, r3, r1
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7fe fd8c 	bl	8000108 <__udivsi3>
 80015f0:	0003      	movs	r3, r0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e00e      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80015f6:	68b9      	ldr	r1, [r7, #8]
 80015f8:	000a      	movs	r2, r1
 80015fa:	0152      	lsls	r2, r2, #5
 80015fc:	1a52      	subs	r2, r2, r1
 80015fe:	0193      	lsls	r3, r2, #6
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	185b      	adds	r3, r3, r1
 8001606:	029b      	lsls	r3, r3, #10
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	0018      	movs	r0, r3
 800160c:	f7fe fd7c 	bl	8000108 <__udivsi3>
 8001610:	0003      	movs	r3, r0
 8001612:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
      break;
 8001618:	e00d      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_GetSysClockFreq+0xf4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	0b5b      	lsrs	r3, r3, #13
 8001620:	2207      	movs	r2, #7
 8001622:	4013      	ands	r3, r2
 8001624:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	0212      	lsls	r2, r2, #8
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
      break;
 8001634:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001636:	693b      	ldr	r3, [r7, #16]
}
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	b006      	add	sp, #24
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	003d0900 	.word	0x003d0900
 8001648:	00f42400 	.word	0x00f42400
 800164c:	007a1200 	.word	0x007a1200
 8001650:	080040e0 	.word	0x080040e0

08001654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001658:	4b02      	ldr	r3, [pc, #8]	; (8001664 <HAL_RCC_GetHCLKFreq+0x10>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	20000040 	.word	0x20000040

08001668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800166c:	f7ff fff2 	bl	8001654 <HAL_RCC_GetHCLKFreq>
 8001670:	0001      	movs	r1, r0
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	2207      	movs	r2, #7
 800167a:	4013      	ands	r3, r2
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	40d9      	lsrs	r1, r3
 8001682:	000b      	movs	r3, r1
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	40021000 	.word	0x40021000
 8001690:	080040d8 	.word	0x080040d8

08001694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001698:	f7ff ffdc 	bl	8001654 <HAL_RCC_GetHCLKFreq>
 800169c:	0001      	movs	r1, r0
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	0adb      	lsrs	r3, r3, #11
 80016a4:	2207      	movs	r2, #7
 80016a6:	4013      	ands	r3, r2
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	40d9      	lsrs	r1, r3
 80016ae:	000b      	movs	r3, r1
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	40021000 	.word	0x40021000
 80016bc:	080040d8 	.word	0x080040d8

080016c0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2220      	movs	r2, #32
 80016ce:	4013      	ands	r3, r2
 80016d0:	d100      	bne.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80016d2:	e0c7      	b.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80016d4:	2317      	movs	r3, #23
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016dc:	4b99      	ldr	r3, [pc, #612]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80016de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	055b      	lsls	r3, r3, #21
 80016e4:	4013      	ands	r3, r2
 80016e6:	d10a      	bne.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	4b96      	ldr	r3, [pc, #600]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80016ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016ec:	4b95      	ldr	r3, [pc, #596]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	0549      	lsls	r1, r1, #21
 80016f2:	430a      	orrs	r2, r1
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80016f6:	2317      	movs	r3, #23
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b92      	ldr	r3, [pc, #584]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4013      	ands	r3, r2
 8001708:	d11a      	bne.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170a:	4b8f      	ldr	r3, [pc, #572]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b8e      	ldr	r3, [pc, #568]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0049      	lsls	r1, r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001718:	f7fe fee4 	bl	80004e4 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7fe fedf 	bl	80004e4 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e102      	b.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b84      	ldr	r3, [pc, #528]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001740:	4b80      	ldr	r3, [pc, #512]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	23c0      	movs	r3, #192	; 0xc0
 8001746:	039b      	lsls	r3, r3, #14
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	23c0      	movs	r3, #192	; 0xc0
 8001752:	039b      	lsls	r3, r3, #14
 8001754:	4013      	ands	r3, r2
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d013      	beq.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	23c0      	movs	r3, #192	; 0xc0
 8001762:	029b      	lsls	r3, r3, #10
 8001764:	401a      	ands	r2, r3
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	029b      	lsls	r3, r3, #10
 800176a:	429a      	cmp	r2, r3
 800176c:	d10a      	bne.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800176e:	4b75      	ldr	r3, [pc, #468]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	029b      	lsls	r3, r3, #10
 8001776:	401a      	ands	r2, r3
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	429a      	cmp	r2, r3
 800177e:	d101      	bne.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0da      	b.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001784:	4b6f      	ldr	r3, [pc, #444]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001788:	23c0      	movs	r3, #192	; 0xc0
 800178a:	029b      	lsls	r3, r3, #10
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d03b      	beq.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	23c0      	movs	r3, #192	; 0xc0
 800179c:	029b      	lsls	r3, r3, #10
 800179e:	4013      	ands	r3, r2
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d033      	beq.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2220      	movs	r2, #32
 80017ac:	4013      	ands	r3, r2
 80017ae:	d02e      	beq.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80017b0:	4b64      	ldr	r3, [pc, #400]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80017b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b4:	4a65      	ldr	r2, [pc, #404]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017ba:	4b62      	ldr	r3, [pc, #392]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80017bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017be:	4b61      	ldr	r3, [pc, #388]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	0309      	lsls	r1, r1, #12
 80017c4:	430a      	orrs	r2, r1
 80017c6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017c8:	4b5e      	ldr	r3, [pc, #376]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80017ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017cc:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80017ce:	4960      	ldr	r1, [pc, #384]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80017d4:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4013      	ands	r3, r2
 80017e2:	d014      	beq.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7fe fe7e 	bl	80004e4 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017ec:	e009      	b.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7fe fe79 	bl	80004e4 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	4a56      	ldr	r2, [pc, #344]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e09b      	b.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001802:	4b50      	ldr	r3, [pc, #320]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d0ef      	beq.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	23c0      	movs	r3, #192	; 0xc0
 8001814:	029b      	lsls	r3, r3, #10
 8001816:	401a      	ands	r2, r3
 8001818:	23c0      	movs	r3, #192	; 0xc0
 800181a:	029b      	lsls	r3, r3, #10
 800181c:	429a      	cmp	r2, r3
 800181e:	d10c      	bne.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8001820:	4b48      	ldr	r3, [pc, #288]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a4c      	ldr	r2, [pc, #304]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001826:	4013      	ands	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	23c0      	movs	r3, #192	; 0xc0
 8001830:	039b      	lsls	r3, r3, #14
 8001832:	401a      	ands	r2, r3
 8001834:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800183c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	23c0      	movs	r3, #192	; 0xc0
 8001844:	029b      	lsls	r3, r3, #10
 8001846:	401a      	ands	r2, r3
 8001848:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800184a:	430a      	orrs	r2, r1
 800184c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800184e:	2317      	movs	r3, #23
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800185a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800185e:	493f      	ldr	r1, [pc, #252]	; (800195c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001860:	400a      	ands	r2, r1
 8001862:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	d009      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800186e:	4b35      	ldr	r3, [pc, #212]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	2203      	movs	r2, #3
 8001874:	4393      	bics	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800187e:	430a      	orrs	r2, r1
 8001880:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d009      	beq.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	220c      	movs	r2, #12
 8001892:	4393      	bics	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800189c:	430a      	orrs	r2, r1
 800189e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2204      	movs	r2, #4
 80018a6:	4013      	ands	r3, r2
 80018a8:	d009      	beq.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	4a2c      	ldr	r2, [pc, #176]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2208      	movs	r2, #8
 80018c4:	4013      	ands	r3, r2
 80018c6:	d009      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018c8:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	4a25      	ldr	r2, [pc, #148]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4013      	ands	r3, r2
 80018e6:	d009      	beq.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	0019      	movs	r1, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80018f8:	430a      	orrs	r2, r1
 80018fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2240      	movs	r2, #64	; 0x40
 8001902:	4013      	ands	r3, r2
 8001904:	d009      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800190c:	4013      	ands	r3, r2
 800190e:	0019      	movs	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1a      	ldr	r2, [r3, #32]
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001916:	430a      	orrs	r2, r1
 8001918:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	4013      	ands	r3, r2
 8001922:	d009      	beq.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	4a10      	ldr	r2, [pc, #64]	; (800196c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800192a:	4013      	ands	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69da      	ldr	r2, [r3, #28]
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001934:	430a      	orrs	r2, r1
 8001936:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b006      	add	sp, #24
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000
 8001948:	40007000 	.word	0x40007000
 800194c:	fffcffff 	.word	0xfffcffff
 8001950:	fff7ffff 	.word	0xfff7ffff
 8001954:	00001388 	.word	0x00001388
 8001958:	ffcfffff 	.word	0xffcfffff
 800195c:	efffffff 	.word	0xefffffff
 8001960:	fffff3ff 	.word	0xfffff3ff
 8001964:	ffffcfff 	.word	0xffffcfff
 8001968:	fbffffff 	.word	0xfbffffff
 800196c:	fff3ffff 	.word	0xfff3ffff

08001970 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e08e      	b.n	8001aa0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2221      	movs	r2, #33	; 0x21
 8001986:	5c9b      	ldrb	r3, [r3, r2]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2220      	movs	r2, #32
 8001992:	2100      	movs	r1, #0
 8001994:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0018      	movs	r0, r3
 800199a:	f002 f95d 	bl	8003c58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2221      	movs	r2, #33	; 0x21
 80019a2:	2102      	movs	r1, #2
 80019a4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	22ca      	movs	r2, #202	; 0xca
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2253      	movs	r2, #83	; 0x53
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f000 fbb2 	bl	8002122 <RTC_EnterInitMode>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	22ff      	movs	r2, #255	; 0xff
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2221      	movs	r2, #33	; 0x21
 80019ce:	2104      	movs	r1, #4
 80019d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e064      	b.n	8001aa0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4931      	ldr	r1, [pc, #196]	; (8001aa8 <HAL_RTC_Init+0x138>)
 80019e2:	400a      	ands	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6899      	ldr	r1, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68d2      	ldr	r2, [r2, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6919      	ldr	r1, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	438a      	bics	r2, r1
 8001a30:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2103      	movs	r1, #3
 8001a3e:	438a      	bics	r2, r1
 8001a40:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69da      	ldr	r2, [r3, #28]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2220      	movs	r2, #32
 8001a62:	4013      	ands	r3, r2
 8001a64:	d113      	bne.n	8001a8e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 fb33 	bl	80020d4 <HAL_RTC_WaitForSynchro>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d00d      	beq.n	8001a8e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	22ff      	movs	r2, #255	; 0xff
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2221      	movs	r2, #33	; 0x21
 8001a7e:	2104      	movs	r1, #4
 8001a80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2220      	movs	r2, #32
 8001a86:	2100      	movs	r1, #0
 8001a88:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e008      	b.n	8001aa0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	22ff      	movs	r2, #255	; 0xff
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2221      	movs	r2, #33	; 0x21
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
  }
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	ff8fffbf 	.word	0xff8fffbf

08001aac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	5c9b      	ldrb	r3, [r3, r2]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RTC_SetTime+0x1a>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e0ad      	b.n	8001c22 <HAL_RTC_SetTime+0x176>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	2101      	movs	r1, #1
 8001acc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2221      	movs	r2, #33	; 0x21
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d125      	bne.n	8001b28 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2240      	movs	r2, #64	; 0x40
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d102      	bne.n	8001aee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2200      	movs	r2, #0
 8001aec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f000 fb3f 	bl	8002176 <RTC_ByteToBcd2>
 8001af8:	0003      	movs	r3, r0
 8001afa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	785b      	ldrb	r3, [r3, #1]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 fb38 	bl	8002176 <RTC_ByteToBcd2>
 8001b06:	0003      	movs	r3, r0
 8001b08:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001b0a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	789b      	ldrb	r3, [r3, #2]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 fb30 	bl	8002176 <RTC_ByteToBcd2>
 8001b16:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001b18:	0022      	movs	r2, r4
 8001b1a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	78db      	ldrb	r3, [r3, #3]
 8001b20:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e017      	b.n	8001b58 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	4013      	ands	r3, r2
 8001b32:	d102      	bne.n	8001b3a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2200      	movs	r2, #0
 8001b38:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	785b      	ldrb	r3, [r3, #1]
 8001b44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001b46:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001b4c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	78db      	ldrb	r3, [r3, #3]
 8001b52:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	22ca      	movs	r2, #202	; 0xca
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2253      	movs	r2, #83	; 0x53
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 fad9 	bl	8002122 <RTC_EnterInitMode>
 8001b70:	1e03      	subs	r3, r0, #0
 8001b72:	d00d      	beq.n	8001b90 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	22ff      	movs	r2, #255	; 0xff
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2221      	movs	r2, #33	; 0x21
 8001b80:	2104      	movs	r1, #4
 8001b82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	2100      	movs	r1, #0
 8001b8a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e048      	b.n	8001c22 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4925      	ldr	r1, [pc, #148]	; (8001c2c <HAL_RTC_SetTime+0x180>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4922      	ldr	r1, [pc, #136]	; (8001c30 <HAL_RTC_SetTime+0x184>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6899      	ldr	r1, [r3, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	438a      	bics	r2, r1
 8001bd2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d113      	bne.n	8001c08 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	0018      	movs	r0, r3
 8001be4:	f000 fa76 	bl	80020d4 <HAL_RTC_WaitForSynchro>
 8001be8:	1e03      	subs	r3, r0, #0
 8001bea:	d00d      	beq.n	8001c08 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	22ff      	movs	r2, #255	; 0xff
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2221      	movs	r2, #33	; 0x21
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	2100      	movs	r1, #0
 8001c02:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e00c      	b.n	8001c22 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	22ff      	movs	r2, #255	; 0xff
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2221      	movs	r2, #33	; 0x21
 8001c14:	2101      	movs	r1, #1
 8001c16:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c20:	2300      	movs	r3, #0
  }
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b007      	add	sp, #28
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	007f7f7f 	.word	0x007f7f7f
 8001c30:	fffbffff 	.word	0xfffbffff

08001c34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2220      	movs	r2, #32
 8001c44:	5c9b      	ldrb	r3, [r3, r2]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_RTC_SetDate+0x1a>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e099      	b.n	8001d82 <HAL_RTC_SetDate+0x14e>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2220      	movs	r2, #32
 8001c52:	2101      	movs	r1, #1
 8001c54:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2221      	movs	r2, #33	; 0x21
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10e      	bne.n	8001c82 <HAL_RTC_SetDate+0x4e>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	785b      	ldrb	r3, [r3, #1]
 8001c68:	001a      	movs	r2, r3
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d008      	beq.n	8001c82 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	2210      	movs	r2, #16
 8001c76:	4393      	bics	r3, r2
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	330a      	adds	r3, #10
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d11c      	bne.n	8001cc2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	78db      	ldrb	r3, [r3, #3]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 fa72 	bl	8002176 <RTC_ByteToBcd2>
 8001c92:	0003      	movs	r3, r0
 8001c94:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	785b      	ldrb	r3, [r3, #1]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 fa6b 	bl	8002176 <RTC_ByteToBcd2>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001ca4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	789b      	ldrb	r3, [r3, #2]
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 fa63 	bl	8002176 <RTC_ByteToBcd2>
 8001cb0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001cb2:	0022      	movs	r2, r4
 8001cb4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e00e      	b.n	8001ce0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	78db      	ldrb	r3, [r3, #3]
 8001cc6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	785b      	ldrb	r3, [r3, #1]
 8001ccc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001cce:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001cd4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	22ca      	movs	r2, #202	; 0xca
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2253      	movs	r2, #83	; 0x53
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	f000 fa15 	bl	8002122 <RTC_EnterInitMode>
 8001cf8:	1e03      	subs	r3, r0, #0
 8001cfa:	d00d      	beq.n	8001d18 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	22ff      	movs	r2, #255	; 0xff
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2221      	movs	r2, #33	; 0x21
 8001d08:	2104      	movs	r1, #4
 8001d0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2220      	movs	r2, #32
 8001d10:	2100      	movs	r1, #0
 8001d12:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e034      	b.n	8001d82 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	491b      	ldr	r1, [pc, #108]	; (8001d8c <HAL_RTC_SetDate+0x158>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	438a      	bics	r2, r1
 8001d32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d113      	bne.n	8001d68 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 f9c6 	bl	80020d4 <HAL_RTC_WaitForSynchro>
 8001d48:	1e03      	subs	r3, r0, #0
 8001d4a:	d00d      	beq.n	8001d68 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	22ff      	movs	r2, #255	; 0xff
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2221      	movs	r2, #33	; 0x21
 8001d58:	2104      	movs	r1, #4
 8001d5a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e00c      	b.n	8001d82 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	22ff      	movs	r2, #255	; 0xff
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2221      	movs	r2, #33	; 0x21
 8001d74:	2101      	movs	r1, #1
 8001d76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d80:	2300      	movs	r3, #0
  }
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b007      	add	sp, #28
 8001d88:	bd90      	pop	{r4, r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	00ffff3f 	.word	0x00ffff3f

08001d90 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	5c9b      	ldrb	r3, [r3, r2]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_RTC_SetAlarm_IT+0x1a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e130      	b.n	800200c <HAL_RTC_SetAlarm_IT+0x27c>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2220      	movs	r2, #32
 8001dae:	2101      	movs	r1, #1
 8001db0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2221      	movs	r2, #33	; 0x21
 8001db6:	2102      	movs	r1, #2
 8001db8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d136      	bne.n	8001e2e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d102      	bne.n	8001dd2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 f9cd 	bl	8002176 <RTC_ByteToBcd2>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	785b      	ldrb	r3, [r3, #1]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f9c6 	bl	8002176 <RTC_ByteToBcd2>
 8001dea:	0003      	movs	r3, r0
 8001dec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001dee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	789b      	ldrb	r3, [r3, #2]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f000 f9be 	bl	8002176 <RTC_ByteToBcd2>
 8001dfa:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001dfc:	0022      	movs	r2, r4
 8001dfe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	78db      	ldrb	r3, [r3, #3]
 8001e04:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001e06:	431a      	orrs	r2, r3
 8001e08:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 f9b0 	bl	8002176 <RTC_ByteToBcd2>
 8001e16:	0003      	movs	r3, r0
 8001e18:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001e1a:	0022      	movs	r2, r4
 8001e1c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001e22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	e022      	b.n	8001e74 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2240      	movs	r2, #64	; 0x40
 8001e36:	4013      	ands	r3, r2
 8001e38:	d102      	bne.n	8001e40 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	785b      	ldrb	r3, [r3, #1]
 8001e4a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001e4c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001e52:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	78db      	ldrb	r3, [r3, #3]
 8001e58:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8001e5a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2120      	movs	r1, #32
 8001e60:	5c5b      	ldrb	r3, [r3, r1]
 8001e62:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8001e64:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001e6a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	22ca      	movs	r2, #202	; 0xca
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2253      	movs	r2, #83	; 0x53
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d14e      	bne.n	8001f3a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	495b      	ldr	r1, [pc, #364]	; (8002014 <HAL_RTC_SetAlarm_IT+0x284>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	22ff      	movs	r2, #255	; 0xff
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4957      	ldr	r1, [pc, #348]	; (8002018 <HAL_RTC_SetAlarm_IT+0x288>)
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001ec0:	f7fe fb10 	bl	80004e4 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001ec8:	e016      	b.n	8001ef8 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001eca:	f7fe fb0b 	bl	80004e4 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	1ad2      	subs	r2, r2, r3
 8001ed4:	23fa      	movs	r3, #250	; 0xfa
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d90d      	bls.n	8001ef8 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	22ff      	movs	r2, #255	; 0xff
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2221      	movs	r2, #33	; 0x21
 8001ee8:	2103      	movs	r1, #3
 8001eea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e089      	b.n	800200c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d0e2      	beq.n	8001eca <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	0049      	lsls	r1, r1, #1
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	0149      	lsls	r1, r1, #5
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e04d      	b.n	8001fd6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_RTC_SetAlarm_IT+0x28c>)
 8001f46:	400a      	ands	r2, r1
 8001f48:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	22ff      	movs	r2, #255	; 0xff
 8001f52:	401a      	ands	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4931      	ldr	r1, [pc, #196]	; (8002020 <HAL_RTC_SetAlarm_IT+0x290>)
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001f5e:	f7fe fac1 	bl	80004e4 <HAL_GetTick>
 8001f62:	0003      	movs	r3, r0
 8001f64:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001f66:	e016      	b.n	8001f96 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f68:	f7fe fabc 	bl	80004e4 <HAL_GetTick>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	1ad2      	subs	r2, r2, r3
 8001f72:	23fa      	movs	r3, #250	; 0xfa
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d90d      	bls.n	8001f96 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	22ff      	movs	r2, #255	; 0xff
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2221      	movs	r2, #33	; 0x21
 8001f86:	2103      	movs	r1, #3
 8001f88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e03a      	b.n	800200c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d0e2      	beq.n	8001f68 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	0089      	lsls	r1, r1, #2
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	0189      	lsls	r1, r1, #6
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001fd6:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_RTC_SetAlarm_IT+0x294>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RTC_SetAlarm_IT+0x294>)
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	0289      	lsls	r1, r1, #10
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_RTC_SetAlarm_IT+0x294>)
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_RTC_SetAlarm_IT+0x294>)
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	0289      	lsls	r1, r1, #10
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2221      	movs	r2, #33	; 0x21
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2220      	movs	r2, #32
 8002006:	2100      	movs	r1, #0
 8002008:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b009      	add	sp, #36	; 0x24
 8002012:	bd90      	pop	{r4, r7, pc}
 8002014:	fffffeff 	.word	0xfffffeff
 8002018:	fffffe7f 	.word	0xfffffe7f
 800201c:	fffffdff 	.word	0xfffffdff
 8002020:	fffffd7f 	.word	0xfffffd7f
 8002024:	40010400 	.word	0x40010400

08002028 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	015b      	lsls	r3, r3, #5
 800203a:	4013      	ands	r3, r2
 800203c:	d014      	beq.n	8002068 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4013      	ands	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f838 	bl	80020c4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	22ff      	movs	r2, #255	; 0xff
 800205c:	401a      	ands	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4915      	ldr	r1, [pc, #84]	; (80020b8 <HAL_RTC_AlarmIRQHandler+0x90>)
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	4013      	ands	r3, r2
 8002074:	d014      	beq.n	80020a0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4013      	ands	r3, r2
 8002082:	d00d      	beq.n	80020a0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f89e 	bl	80021c8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	22ff      	movs	r2, #255	; 0xff
 8002094:	401a      	ands	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4908      	ldr	r1, [pc, #32]	; (80020bc <HAL_RTC_AlarmIRQHandler+0x94>)
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_RTC_AlarmIRQHandler+0x98>)
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	0292      	lsls	r2, r2, #10
 80020a6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2221      	movs	r2, #33	; 0x21
 80020ac:	2101      	movs	r1, #1
 80020ae:	5499      	strb	r1, [r3, r2]
}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	fffffe7f 	.word	0xfffffe7f
 80020bc:	fffffd7f 	.word	0xfffffd7f
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b002      	add	sp, #8
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	21a0      	movs	r1, #160	; 0xa0
 80020e8:	438a      	bics	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80020ec:	f7fe f9fa 	bl	80004e4 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80020f4:	e00a      	b.n	800210c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80020f6:	f7fe f9f5 	bl	80004e4 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1ad2      	subs	r2, r2, r3
 8002100:	23fa      	movs	r3, #250	; 0xfa
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	429a      	cmp	r2, r3
 8002106:	d901      	bls.n	800210c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e006      	b.n	800211a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	4013      	ands	r3, r2
 8002116:	d0ee      	beq.n	80020f6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b004      	add	sp, #16
 8002120:	bd80      	pop	{r7, pc}

08002122 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	4013      	ands	r3, r2
 8002134:	d11a      	bne.n	800216c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2201      	movs	r2, #1
 800213c:	4252      	negs	r2, r2
 800213e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002140:	f7fe f9d0 	bl	80004e4 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002148:	e00a      	b.n	8002160 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800214a:	f7fe f9cb 	bl	80004e4 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	23fa      	movs	r3, #250	; 0xfa
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d901      	bls.n	8002160 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e006      	b.n	800216e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2240      	movs	r2, #64	; 0x40
 8002168:	4013      	ands	r3, r2
 800216a:	d0ee      	beq.n	800214a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	0018      	movs	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}

08002176 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	0002      	movs	r2, r0
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002186:	230b      	movs	r3, #11
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	1dfa      	adds	r2, r7, #7
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002190:	e008      	b.n	80021a4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3301      	adds	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002198:	220b      	movs	r2, #11
 800219a:	18bb      	adds	r3, r7, r2
 800219c:	18ba      	adds	r2, r7, r2
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	3a0a      	subs	r2, #10
 80021a2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80021a4:	230b      	movs	r3, #11
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b09      	cmp	r3, #9
 80021ac:	d8f1      	bhi.n	8002192 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	230b      	movs	r3, #11
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4313      	orrs	r3, r2
 80021be:	b2db      	uxtb	r3, r3
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b004      	add	sp, #16
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80021d0:	46c0      	nop			; (mov r8, r8)
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b002      	add	sp, #8
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e059      	b.n	800229e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2251      	movs	r2, #81	; 0x51
 80021f4:	5c9b      	ldrb	r3, [r3, r2]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2250      	movs	r2, #80	; 0x50
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f001 fd46 	bl	8003c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2251      	movs	r2, #81	; 0x51
 8002210:	2102      	movs	r1, #2
 8002212:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	438a      	bics	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6999      	ldr	r1, [r3, #24]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	400b      	ands	r3, r1
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	431a      	orrs	r2, r3
 8002258:	0011      	movs	r1, r2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	0c1b      	lsrs	r3, r3, #16
 800226c:	2204      	movs	r2, #4
 800226e:	4013      	ands	r3, r2
 8002270:	0019      	movs	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <HAL_SPI_Init+0xd0>)
 800228a:	400a      	ands	r2, r1
 800228c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2251      	movs	r2, #81	; 0x51
 8002298:	2101      	movs	r1, #1
 800229a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b002      	add	sp, #8
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	fffff7ff 	.word	0xfffff7ff

080022ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e044      	b.n	8002348 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d107      	bne.n	80022d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2270      	movs	r2, #112	; 0x70
 80022ca:	2100      	movs	r1, #0
 80022cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f001 fd8d 	bl	8003df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2224      	movs	r2, #36	; 0x24
 80022da:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2101      	movs	r1, #1
 80022e8:	438a      	bics	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0018      	movs	r0, r3
 80022f0:	f000 f966 	bl	80025c0 <UART_SetConfig>
 80022f4:	0003      	movs	r3, r0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e024      	b.n	8002348 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 fc8d 	bl	8002c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	490d      	ldr	r1, [pc, #52]	; (8002350 <HAL_UART_Init+0xa4>)
 800231a:	400a      	ands	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	212a      	movs	r1, #42	; 0x2a
 800232a:	438a      	bics	r2, r1
 800232c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0018      	movs	r0, r3
 8002342:	f000 fd25 	bl	8002d90 <UART_CheckIdleState>
 8002346:	0003      	movs	r3, r0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}
 8002350:	ffffb7ff 	.word	0xffffb7ff

08002354 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	220f      	movs	r2, #15
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d112      	bne.n	80023a8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	2220      	movs	r2, #32
 8002386:	4013      	ands	r3, r2
 8002388:	d00e      	beq.n	80023a8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	2220      	movs	r2, #32
 800238e:	4013      	ands	r3, r2
 8002390:	d00a      	beq.n	80023a8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002396:	2b00      	cmp	r3, #0
 8002398:	d100      	bne.n	800239c <HAL_UART_IRQHandler+0x48>
 800239a:	e0f6      	b.n	800258a <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	0010      	movs	r0, r2
 80023a4:	4798      	blx	r3
      }
      return;
 80023a6:	e0f0      	b.n	800258a <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d100      	bne.n	80023b0 <HAL_UART_IRQHandler+0x5c>
 80023ae:	e0b8      	b.n	8002522 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2201      	movs	r2, #1
 80023b4:	4013      	ands	r3, r2
 80023b6:	d105      	bne.n	80023c4 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	2390      	movs	r3, #144	; 0x90
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d100      	bne.n	80023c4 <HAL_UART_IRQHandler+0x70>
 80023c2:	e0ae      	b.n	8002522 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4013      	ands	r3, r2
 80023ca:	d00e      	beq.n	80023ea <HAL_UART_IRQHandler+0x96>
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	d009      	beq.n	80023ea <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2201      	movs	r2, #1
 80023dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023e2:	2201      	movs	r2, #1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	2202      	movs	r2, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	d00d      	beq.n	800240e <HAL_UART_IRQHandler+0xba>
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2201      	movs	r2, #1
 80023f6:	4013      	ands	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2202      	movs	r2, #2
 8002400:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002406:	2204      	movs	r2, #4
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2204      	movs	r2, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_UART_IRQHandler+0xde>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2201      	movs	r2, #1
 800241a:	4013      	ands	r3, r2
 800241c:	d009      	beq.n	8002432 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2204      	movs	r2, #4
 8002424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800242a:	2202      	movs	r2, #2
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	2208      	movs	r2, #8
 8002436:	4013      	ands	r3, r2
 8002438:	d011      	beq.n	800245e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2220      	movs	r2, #32
 800243e:	4013      	ands	r3, r2
 8002440:	d103      	bne.n	800244a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2201      	movs	r2, #1
 8002446:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002448:	d009      	beq.n	800245e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2208      	movs	r2, #8
 8002450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002456:	2208      	movs	r2, #8
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d100      	bne.n	8002468 <HAL_UART_IRQHandler+0x114>
 8002466:	e092      	b.n	800258e <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2220      	movs	r2, #32
 800246c:	4013      	ands	r3, r2
 800246e:	d00c      	beq.n	800248a <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2220      	movs	r2, #32
 8002474:	4013      	ands	r3, r2
 8002476:	d008      	beq.n	800248a <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	0010      	movs	r0, r2
 8002488:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800248e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	4013      	ands	r3, r2
 800249a:	2b40      	cmp	r3, #64	; 0x40
 800249c:	d003      	beq.n	80024a6 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2208      	movs	r2, #8
 80024a2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024a4:	d033      	beq.n	800250e <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f000 fd01 	bl	8002eb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2240      	movs	r2, #64	; 0x40
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d123      	bne.n	8002504 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2140      	movs	r1, #64	; 0x40
 80024c8:	438a      	bics	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d012      	beq.n	80024fa <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d8:	4a30      	ldr	r2, [pc, #192]	; (800259c <HAL_UART_IRQHandler+0x248>)
 80024da:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7fe f901 	bl	80006e8 <HAL_DMA_Abort_IT>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d019      	beq.n	800251e <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f4:	0018      	movs	r0, r3
 80024f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f8:	e011      	b.n	800251e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 f857 	bl	80025b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002502:	e00c      	b.n	800251e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f852 	bl	80025b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800250c:	e007      	b.n	800251e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	0018      	movs	r0, r3
 8002512:	f000 f84d 	bl	80025b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800251c:	e037      	b.n	800258e <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800251e:	46c0      	nop			; (mov r8, r8)
    return;
 8002520:	e035      	b.n	800258e <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	035b      	lsls	r3, r3, #13
 8002528:	4013      	ands	r3, r2
 800252a:	d00e      	beq.n	800254a <HAL_UART_IRQHandler+0x1f6>
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	03db      	lsls	r3, r3, #15
 8002532:	4013      	ands	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	0352      	lsls	r2, r2, #13
 800253e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0018      	movs	r0, r3
 8002544:	f000 fd05 	bl	8002f52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002548:	e024      	b.n	8002594 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	4013      	ands	r3, r2
 8002550:	d00d      	beq.n	800256e <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2280      	movs	r2, #128	; 0x80
 8002556:	4013      	ands	r3, r2
 8002558:	d009      	beq.n	800256e <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800255e:	2b00      	cmp	r3, #0
 8002560:	d017      	beq.n	8002592 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	0010      	movs	r0, r2
 800256a:	4798      	blx	r3
    }
    return;
 800256c:	e011      	b.n	8002592 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2240      	movs	r2, #64	; 0x40
 8002572:	4013      	ands	r3, r2
 8002574:	d00e      	beq.n	8002594 <HAL_UART_IRQHandler+0x240>
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	4013      	ands	r3, r2
 800257c:	d00a      	beq.n	8002594 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	0018      	movs	r0, r3
 8002582:	f000 fccc 	bl	8002f1e <UART_EndTransmit_IT>
    return;
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	e004      	b.n	8002594 <HAL_UART_IRQHandler+0x240>
      return;
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	e002      	b.n	8002594 <HAL_UART_IRQHandler+0x240>
    return;
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	e000      	b.n	8002594 <HAL_UART_IRQHandler+0x240>
    return;
 8002592:	46c0      	nop			; (mov r8, r8)
  }

}
 8002594:	46bd      	mov	sp, r7
 8002596:	b008      	add	sp, #32
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	08002ef1 	.word	0x08002ef1

080025a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	b08e      	sub	sp, #56	; 0x38
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80025c8:	231b      	movs	r3, #27
 80025ca:	2218      	movs	r2, #24
 80025cc:	4694      	mov	ip, r2
 80025ce:	44bc      	add	ip, r7
 80025d0:	4463      	add	r3, ip
 80025d2:	2210      	movs	r2, #16
 80025d4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80025da:	2313      	movs	r3, #19
 80025dc:	2218      	movs	r2, #24
 80025de:	4694      	mov	ip, r2
 80025e0:	44bc      	add	ip, r7
 80025e2:	4463      	add	r3, ip
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	4313      	orrs	r3, r2
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4aca      	ldr	r2, [pc, #808]	; (8002934 <UART_SetConfig+0x374>)
 800260c:	4013      	ands	r3, r2
 800260e:	0019      	movs	r1, r3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4ac5      	ldr	r2, [pc, #788]	; (8002938 <UART_SetConfig+0x378>)
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4abf      	ldr	r2, [pc, #764]	; (800293c <UART_SetConfig+0x37c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002648:	4313      	orrs	r3, r2
 800264a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4abb      	ldr	r2, [pc, #748]	; (8002940 <UART_SetConfig+0x380>)
 8002654:	4013      	ands	r3, r2
 8002656:	0019      	movs	r1, r3
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4ab7      	ldr	r2, [pc, #732]	; (8002944 <UART_SetConfig+0x384>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d134      	bne.n	80026d6 <UART_SetConfig+0x116>
 800266c:	4bb6      	ldr	r3, [pc, #728]	; (8002948 <UART_SetConfig+0x388>)
 800266e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002670:	2203      	movs	r2, #3
 8002672:	4013      	ands	r3, r2
 8002674:	2b01      	cmp	r3, #1
 8002676:	d015      	beq.n	80026a4 <UART_SetConfig+0xe4>
 8002678:	d304      	bcc.n	8002684 <UART_SetConfig+0xc4>
 800267a:	2b02      	cmp	r3, #2
 800267c:	d00a      	beq.n	8002694 <UART_SetConfig+0xd4>
 800267e:	2b03      	cmp	r3, #3
 8002680:	d018      	beq.n	80026b4 <UART_SetConfig+0xf4>
 8002682:	e01f      	b.n	80026c4 <UART_SetConfig+0x104>
 8002684:	231b      	movs	r3, #27
 8002686:	2218      	movs	r2, #24
 8002688:	4694      	mov	ip, r2
 800268a:	44bc      	add	ip, r7
 800268c:	4463      	add	r3, ip
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e0c5      	b.n	8002820 <UART_SetConfig+0x260>
 8002694:	231b      	movs	r3, #27
 8002696:	2218      	movs	r2, #24
 8002698:	4694      	mov	ip, r2
 800269a:	44bc      	add	ip, r7
 800269c:	4463      	add	r3, ip
 800269e:	2202      	movs	r2, #2
 80026a0:	701a      	strb	r2, [r3, #0]
 80026a2:	e0bd      	b.n	8002820 <UART_SetConfig+0x260>
 80026a4:	231b      	movs	r3, #27
 80026a6:	2218      	movs	r2, #24
 80026a8:	4694      	mov	ip, r2
 80026aa:	44bc      	add	ip, r7
 80026ac:	4463      	add	r3, ip
 80026ae:	2204      	movs	r2, #4
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	e0b5      	b.n	8002820 <UART_SetConfig+0x260>
 80026b4:	231b      	movs	r3, #27
 80026b6:	2218      	movs	r2, #24
 80026b8:	4694      	mov	ip, r2
 80026ba:	44bc      	add	ip, r7
 80026bc:	4463      	add	r3, ip
 80026be:	2208      	movs	r2, #8
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	e0ad      	b.n	8002820 <UART_SetConfig+0x260>
 80026c4:	231b      	movs	r3, #27
 80026c6:	2218      	movs	r2, #24
 80026c8:	4694      	mov	ip, r2
 80026ca:	44bc      	add	ip, r7
 80026cc:	4463      	add	r3, ip
 80026ce:	2210      	movs	r2, #16
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	e0a4      	b.n	8002820 <UART_SetConfig+0x260>
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a9c      	ldr	r2, [pc, #624]	; (800294c <UART_SetConfig+0x38c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d137      	bne.n	8002750 <UART_SetConfig+0x190>
 80026e0:	4b99      	ldr	r3, [pc, #612]	; (8002948 <UART_SetConfig+0x388>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	220c      	movs	r2, #12
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d018      	beq.n	800271e <UART_SetConfig+0x15e>
 80026ec:	d802      	bhi.n	80026f4 <UART_SetConfig+0x134>
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <UART_SetConfig+0x13e>
 80026f2:	e024      	b.n	800273e <UART_SetConfig+0x17e>
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d00a      	beq.n	800270e <UART_SetConfig+0x14e>
 80026f8:	2b0c      	cmp	r3, #12
 80026fa:	d018      	beq.n	800272e <UART_SetConfig+0x16e>
 80026fc:	e01f      	b.n	800273e <UART_SetConfig+0x17e>
 80026fe:	231b      	movs	r3, #27
 8002700:	2218      	movs	r2, #24
 8002702:	4694      	mov	ip, r2
 8002704:	44bc      	add	ip, r7
 8002706:	4463      	add	r3, ip
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e088      	b.n	8002820 <UART_SetConfig+0x260>
 800270e:	231b      	movs	r3, #27
 8002710:	2218      	movs	r2, #24
 8002712:	4694      	mov	ip, r2
 8002714:	44bc      	add	ip, r7
 8002716:	4463      	add	r3, ip
 8002718:	2202      	movs	r2, #2
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e080      	b.n	8002820 <UART_SetConfig+0x260>
 800271e:	231b      	movs	r3, #27
 8002720:	2218      	movs	r2, #24
 8002722:	4694      	mov	ip, r2
 8002724:	44bc      	add	ip, r7
 8002726:	4463      	add	r3, ip
 8002728:	2204      	movs	r2, #4
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e078      	b.n	8002820 <UART_SetConfig+0x260>
 800272e:	231b      	movs	r3, #27
 8002730:	2218      	movs	r2, #24
 8002732:	4694      	mov	ip, r2
 8002734:	44bc      	add	ip, r7
 8002736:	4463      	add	r3, ip
 8002738:	2208      	movs	r2, #8
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	e070      	b.n	8002820 <UART_SetConfig+0x260>
 800273e:	231b      	movs	r3, #27
 8002740:	2218      	movs	r2, #24
 8002742:	4694      	mov	ip, r2
 8002744:	44bc      	add	ip, r7
 8002746:	4463      	add	r3, ip
 8002748:	2210      	movs	r2, #16
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	e067      	b.n	8002820 <UART_SetConfig+0x260>
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a7e      	ldr	r2, [pc, #504]	; (8002950 <UART_SetConfig+0x390>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d107      	bne.n	800276a <UART_SetConfig+0x1aa>
 800275a:	231b      	movs	r3, #27
 800275c:	2218      	movs	r2, #24
 800275e:	4694      	mov	ip, r2
 8002760:	44bc      	add	ip, r7
 8002762:	4463      	add	r3, ip
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	e05a      	b.n	8002820 <UART_SetConfig+0x260>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a79      	ldr	r2, [pc, #484]	; (8002954 <UART_SetConfig+0x394>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d107      	bne.n	8002784 <UART_SetConfig+0x1c4>
 8002774:	231b      	movs	r3, #27
 8002776:	2218      	movs	r2, #24
 8002778:	4694      	mov	ip, r2
 800277a:	44bc      	add	ip, r7
 800277c:	4463      	add	r3, ip
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e04d      	b.n	8002820 <UART_SetConfig+0x260>
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6c      	ldr	r2, [pc, #432]	; (800293c <UART_SetConfig+0x37c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d141      	bne.n	8002812 <UART_SetConfig+0x252>
 800278e:	4b6e      	ldr	r3, [pc, #440]	; (8002948 <UART_SetConfig+0x388>)
 8002790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4013      	ands	r3, r2
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	00d2      	lsls	r2, r2, #3
 800279c:	4293      	cmp	r3, r2
 800279e:	d01f      	beq.n	80027e0 <UART_SetConfig+0x220>
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	00d2      	lsls	r2, r2, #3
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d802      	bhi.n	80027ae <UART_SetConfig+0x1ee>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <UART_SetConfig+0x200>
 80027ac:	e028      	b.n	8002800 <UART_SetConfig+0x240>
 80027ae:	2280      	movs	r2, #128	; 0x80
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00c      	beq.n	80027d0 <UART_SetConfig+0x210>
 80027b6:	22c0      	movs	r2, #192	; 0xc0
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d018      	beq.n	80027f0 <UART_SetConfig+0x230>
 80027be:	e01f      	b.n	8002800 <UART_SetConfig+0x240>
 80027c0:	231b      	movs	r3, #27
 80027c2:	2218      	movs	r2, #24
 80027c4:	4694      	mov	ip, r2
 80027c6:	44bc      	add	ip, r7
 80027c8:	4463      	add	r3, ip
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e027      	b.n	8002820 <UART_SetConfig+0x260>
 80027d0:	231b      	movs	r3, #27
 80027d2:	2218      	movs	r2, #24
 80027d4:	4694      	mov	ip, r2
 80027d6:	44bc      	add	ip, r7
 80027d8:	4463      	add	r3, ip
 80027da:	2202      	movs	r2, #2
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e01f      	b.n	8002820 <UART_SetConfig+0x260>
 80027e0:	231b      	movs	r3, #27
 80027e2:	2218      	movs	r2, #24
 80027e4:	4694      	mov	ip, r2
 80027e6:	44bc      	add	ip, r7
 80027e8:	4463      	add	r3, ip
 80027ea:	2204      	movs	r2, #4
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e017      	b.n	8002820 <UART_SetConfig+0x260>
 80027f0:	231b      	movs	r3, #27
 80027f2:	2218      	movs	r2, #24
 80027f4:	4694      	mov	ip, r2
 80027f6:	44bc      	add	ip, r7
 80027f8:	4463      	add	r3, ip
 80027fa:	2208      	movs	r2, #8
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e00f      	b.n	8002820 <UART_SetConfig+0x260>
 8002800:	231b      	movs	r3, #27
 8002802:	2218      	movs	r2, #24
 8002804:	4694      	mov	ip, r2
 8002806:	44bc      	add	ip, r7
 8002808:	4463      	add	r3, ip
 800280a:	2210      	movs	r2, #16
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	e006      	b.n	8002820 <UART_SetConfig+0x260>
 8002812:	231b      	movs	r3, #27
 8002814:	2218      	movs	r2, #24
 8002816:	4694      	mov	ip, r2
 8002818:	44bc      	add	ip, r7
 800281a:	4463      	add	r3, ip
 800281c:	2210      	movs	r2, #16
 800281e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a45      	ldr	r2, [pc, #276]	; (800293c <UART_SetConfig+0x37c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d000      	beq.n	800282c <UART_SetConfig+0x26c>
 800282a:	e09d      	b.n	8002968 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800282c:	231b      	movs	r3, #27
 800282e:	2218      	movs	r2, #24
 8002830:	4694      	mov	ip, r2
 8002832:	44bc      	add	ip, r7
 8002834:	4463      	add	r3, ip
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d00d      	beq.n	8002858 <UART_SetConfig+0x298>
 800283c:	dc02      	bgt.n	8002844 <UART_SetConfig+0x284>
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <UART_SetConfig+0x28e>
 8002842:	e01d      	b.n	8002880 <UART_SetConfig+0x2c0>
 8002844:	2b04      	cmp	r3, #4
 8002846:	d012      	beq.n	800286e <UART_SetConfig+0x2ae>
 8002848:	2b08      	cmp	r3, #8
 800284a:	d015      	beq.n	8002878 <UART_SetConfig+0x2b8>
 800284c:	e018      	b.n	8002880 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800284e:	f7fe ff0b 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
 8002852:	0003      	movs	r3, r0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002856:	e01b      	b.n	8002890 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002858:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <UART_SetConfig+0x388>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2210      	movs	r2, #16
 800285e:	4013      	ands	r3, r2
 8002860:	d002      	beq.n	8002868 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <UART_SetConfig+0x398>)
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8002866:	e013      	b.n	8002890 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002868:	4b3c      	ldr	r3, [pc, #240]	; (800295c <UART_SetConfig+0x39c>)
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800286c:	e010      	b.n	8002890 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800286e:	f7fe fe6d 	bl	800154c <HAL_RCC_GetSysClockFreq>
 8002872:	0003      	movs	r3, r0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002876:	e00b      	b.n	8002890 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800287e:	e007      	b.n	8002890 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002880:	2313      	movs	r3, #19
 8002882:	2218      	movs	r2, #24
 8002884:	4694      	mov	ip, r2
 8002886:	44bc      	add	ip, r7
 8002888:	4463      	add	r3, ip
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
        break;
 800288e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d100      	bne.n	8002898 <UART_SetConfig+0x2d8>
 8002896:	e1a6      	b.n	8002be6 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	0013      	movs	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	189b      	adds	r3, r3, r2
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d305      	bcc.n	80028b4 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d907      	bls.n	80028c4 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 80028b4:	2313      	movs	r3, #19
 80028b6:	2218      	movs	r2, #24
 80028b8:	4694      	mov	ip, r2
 80028ba:	44bc      	add	ip, r7
 80028bc:	4463      	add	r3, ip
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e190      	b.n	8002be6 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	6939      	ldr	r1, [r7, #16]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	000b      	movs	r3, r1
 80028d2:	0e1b      	lsrs	r3, r3, #24
 80028d4:	0010      	movs	r0, r2
 80028d6:	0205      	lsls	r5, r0, #8
 80028d8:	431d      	orrs	r5, r3
 80028da:	000b      	movs	r3, r1
 80028dc:	021c      	lsls	r4, r3, #8
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68b8      	ldr	r0, [r7, #8]
 80028ec:	68f9      	ldr	r1, [r7, #12]
 80028ee:	1900      	adds	r0, r0, r4
 80028f0:	4169      	adcs	r1, r5
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	2300      	movs	r3, #0
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f7fd fc8e 	bl	8000220 <__aeabi_uldivmod>
 8002904:	0003      	movs	r3, r0
 8002906:	000c      	movs	r4, r1
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <UART_SetConfig+0x3a0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d908      	bls.n	8002924 <UART_SetConfig+0x364>
 8002912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <UART_SetConfig+0x3a4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d804      	bhi.n	8002924 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	e160      	b.n	8002be6 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 8002924:	2313      	movs	r3, #19
 8002926:	2218      	movs	r2, #24
 8002928:	4694      	mov	ip, r2
 800292a:	44bc      	add	ip, r7
 800292c:	4463      	add	r3, ip
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	e158      	b.n	8002be6 <UART_SetConfig+0x626>
 8002934:	efff69f3 	.word	0xefff69f3
 8002938:	ffffcfff 	.word	0xffffcfff
 800293c:	40004800 	.word	0x40004800
 8002940:	fffff4ff 	.word	0xfffff4ff
 8002944:	40013800 	.word	0x40013800
 8002948:	40021000 	.word	0x40021000
 800294c:	40004400 	.word	0x40004400
 8002950:	40004c00 	.word	0x40004c00
 8002954:	40005000 	.word	0x40005000
 8002958:	003d0900 	.word	0x003d0900
 800295c:	00f42400 	.word	0x00f42400
 8002960:	000002ff 	.word	0x000002ff
 8002964:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	429a      	cmp	r2, r3
 8002972:	d000      	beq.n	8002976 <UART_SetConfig+0x3b6>
 8002974:	e0a9      	b.n	8002aca <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 8002976:	231b      	movs	r3, #27
 8002978:	2218      	movs	r2, #24
 800297a:	4694      	mov	ip, r2
 800297c:	44bc      	add	ip, r7
 800297e:	4463      	add	r3, ip
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b08      	cmp	r3, #8
 8002984:	d86d      	bhi.n	8002a62 <UART_SetConfig+0x4a2>
 8002986:	009a      	lsls	r2, r3, #2
 8002988:	4b9f      	ldr	r3, [pc, #636]	; (8002c08 <UART_SetConfig+0x648>)
 800298a:	18d3      	adds	r3, r2, r3
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002990:	f7fe fe6a 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
 8002994:	0003      	movs	r3, r0
 8002996:	005a      	lsls	r2, r3, #1
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	18d2      	adds	r2, r2, r3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0019      	movs	r1, r3
 80029a6:	0010      	movs	r0, r2
 80029a8:	f7fd fbae 	bl	8000108 <__udivsi3>
 80029ac:	0003      	movs	r3, r0
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b2:	e05e      	b.n	8002a72 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029b4:	f7fe fe6e 	bl	8001694 <HAL_RCC_GetPCLK2Freq>
 80029b8:	0003      	movs	r3, r0
 80029ba:	005a      	lsls	r2, r3, #1
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	18d2      	adds	r2, r2, r3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0019      	movs	r1, r3
 80029ca:	0010      	movs	r0, r2
 80029cc:	f7fd fb9c 	bl	8000108 <__udivsi3>
 80029d0:	0003      	movs	r3, r0
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029d6:	e04c      	b.n	8002a72 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029d8:	4b8c      	ldr	r3, [pc, #560]	; (8002c0c <UART_SetConfig+0x64c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2210      	movs	r2, #16
 80029de:	4013      	ands	r3, r2
 80029e0:	d00e      	beq.n	8002a00 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	4a89      	ldr	r2, [pc, #548]	; (8002c10 <UART_SetConfig+0x650>)
 80029ea:	189a      	adds	r2, r3, r2
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0019      	movs	r1, r3
 80029f2:	0010      	movs	r0, r2
 80029f4:	f7fd fb88 	bl	8000108 <__udivsi3>
 80029f8:	0003      	movs	r3, r0
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80029fe:	e038      	b.n	8002a72 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	4a83      	ldr	r2, [pc, #524]	; (8002c14 <UART_SetConfig+0x654>)
 8002a08:	189a      	adds	r2, r3, r2
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	0019      	movs	r1, r3
 8002a10:	0010      	movs	r0, r2
 8002a12:	f7fd fb79 	bl	8000108 <__udivsi3>
 8002a16:	0003      	movs	r3, r0
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a1c:	e029      	b.n	8002a72 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a1e:	f7fe fd95 	bl	800154c <HAL_RCC_GetSysClockFreq>
 8002a22:	0003      	movs	r3, r0
 8002a24:	005a      	lsls	r2, r3, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	18d2      	adds	r2, r2, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0019      	movs	r1, r3
 8002a34:	0010      	movs	r0, r2
 8002a36:	f7fd fb67 	bl	8000108 <__udivsi3>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a40:	e017      	b.n	8002a72 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	0252      	lsls	r2, r2, #9
 8002a4c:	189a      	adds	r2, r3, r2
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	0019      	movs	r1, r3
 8002a54:	0010      	movs	r0, r2
 8002a56:	f7fd fb57 	bl	8000108 <__udivsi3>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a60:	e007      	b.n	8002a72 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a62:	2313      	movs	r3, #19
 8002a64:	2218      	movs	r2, #24
 8002a66:	4694      	mov	ip, r2
 8002a68:	44bc      	add	ip, r7
 8002a6a:	4463      	add	r3, ip
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
        break;
 8002a70:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	2b0f      	cmp	r3, #15
 8002a76:	d920      	bls.n	8002aba <UART_SetConfig+0x4fa>
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7a:	4a67      	ldr	r2, [pc, #412]	; (8002c18 <UART_SetConfig+0x658>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d81c      	bhi.n	8002aba <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	200a      	movs	r0, #10
 8002a86:	2418      	movs	r4, #24
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	181b      	adds	r3, r3, r0
 8002a8c:	210f      	movs	r1, #15
 8002a8e:	438a      	bics	r2, r1
 8002a90:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2207      	movs	r2, #7
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	181b      	adds	r3, r3, r0
 8002aa2:	193a      	adds	r2, r7, r4
 8002aa4:	1812      	adds	r2, r2, r0
 8002aa6:	8812      	ldrh	r2, [r2, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	193a      	adds	r2, r7, r4
 8002ab2:	1812      	adds	r2, r2, r0
 8002ab4:	8812      	ldrh	r2, [r2, #0]
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	e095      	b.n	8002be6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8002aba:	2313      	movs	r3, #19
 8002abc:	2218      	movs	r2, #24
 8002abe:	4694      	mov	ip, r2
 8002ac0:	44bc      	add	ip, r7
 8002ac2:	4463      	add	r3, ip
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e08d      	b.n	8002be6 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8002aca:	231b      	movs	r3, #27
 8002acc:	2218      	movs	r2, #24
 8002ace:	4694      	mov	ip, r2
 8002ad0:	44bc      	add	ip, r7
 8002ad2:	4463      	add	r3, ip
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d86a      	bhi.n	8002bb0 <UART_SetConfig+0x5f0>
 8002ada:	009a      	lsls	r2, r3, #2
 8002adc:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <UART_SetConfig+0x65c>)
 8002ade:	18d3      	adds	r3, r2, r3
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ae4:	f7fe fdc0 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	18d2      	adds	r2, r2, r3
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	0019      	movs	r1, r3
 8002af8:	0010      	movs	r0, r2
 8002afa:	f7fd fb05 	bl	8000108 <__udivsi3>
 8002afe:	0003      	movs	r3, r0
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b04:	e05c      	b.n	8002bc0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b06:	f7fe fdc5 	bl	8001694 <HAL_RCC_GetPCLK2Freq>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	18d2      	adds	r2, r2, r3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	0019      	movs	r1, r3
 8002b1a:	0010      	movs	r0, r2
 8002b1c:	f7fd faf4 	bl	8000108 <__udivsi3>
 8002b20:	0003      	movs	r3, r0
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b26:	e04b      	b.n	8002bc0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b28:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <UART_SetConfig+0x64c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d00e      	beq.n	8002b50 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	4a39      	ldr	r2, [pc, #228]	; (8002c20 <UART_SetConfig+0x660>)
 8002b3a:	189a      	adds	r2, r3, r2
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	0019      	movs	r1, r3
 8002b42:	0010      	movs	r0, r2
 8002b44:	f7fd fae0 	bl	8000108 <__udivsi3>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002b4e:	e037      	b.n	8002bc0 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	4a33      	ldr	r2, [pc, #204]	; (8002c24 <UART_SetConfig+0x664>)
 8002b58:	189a      	adds	r2, r3, r2
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	0019      	movs	r1, r3
 8002b60:	0010      	movs	r0, r2
 8002b62:	f7fd fad1 	bl	8000108 <__udivsi3>
 8002b66:	0003      	movs	r3, r0
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b6c:	e028      	b.n	8002bc0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b6e:	f7fe fced 	bl	800154c <HAL_RCC_GetSysClockFreq>
 8002b72:	0002      	movs	r2, r0
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	18d2      	adds	r2, r2, r3
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	0019      	movs	r1, r3
 8002b82:	0010      	movs	r0, r2
 8002b84:	f7fd fac0 	bl	8000108 <__udivsi3>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b8e:	e017      	b.n	8002bc0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	2280      	movs	r2, #128	; 0x80
 8002b98:	0212      	lsls	r2, r2, #8
 8002b9a:	189a      	adds	r2, r3, r2
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	0010      	movs	r0, r2
 8002ba4:	f7fd fab0 	bl	8000108 <__udivsi3>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bae:	e007      	b.n	8002bc0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002bb0:	2313      	movs	r3, #19
 8002bb2:	2218      	movs	r2, #24
 8002bb4:	4694      	mov	ip, r2
 8002bb6:	44bc      	add	ip, r7
 8002bb8:	4463      	add	r3, ip
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
        break;
 8002bbe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc2:	2b0f      	cmp	r3, #15
 8002bc4:	d908      	bls.n	8002bd8 <UART_SetConfig+0x618>
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <UART_SetConfig+0x658>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d804      	bhi.n	8002bd8 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	e006      	b.n	8002be6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8002bd8:	2313      	movs	r3, #19
 8002bda:	2218      	movs	r2, #24
 8002bdc:	4694      	mov	ip, r2
 8002bde:	44bc      	add	ip, r7
 8002be0:	4463      	add	r3, ip
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	2200      	movs	r2, #0
 8002bea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002bf2:	2313      	movs	r3, #19
 8002bf4:	2218      	movs	r2, #24
 8002bf6:	4694      	mov	ip, r2
 8002bf8:	44bc      	add	ip, r7
 8002bfa:	4463      	add	r3, ip
 8002bfc:	781b      	ldrb	r3, [r3, #0]
}
 8002bfe:	0018      	movs	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	b00e      	add	sp, #56	; 0x38
 8002c04:	bdb0      	pop	{r4, r5, r7, pc}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	0800405c 	.word	0x0800405c
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	007a1200 	.word	0x007a1200
 8002c14:	01e84800 	.word	0x01e84800
 8002c18:	0000ffff 	.word	0x0000ffff
 8002c1c:	08004080 	.word	0x08004080
 8002c20:	003d0900 	.word	0x003d0900
 8002c24:	00f42400 	.word	0x00f42400

08002c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2201      	movs	r2, #1
 8002c36:	4013      	ands	r3, r2
 8002c38:	d00b      	beq.n	8002c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <UART_AdvFeatureConfig+0x144>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4a43      	ldr	r2, [pc, #268]	; (8002d70 <UART_AdvFeatureConfig+0x148>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	2204      	movs	r2, #4
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d00b      	beq.n	8002c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <UART_AdvFeatureConfig+0x14c>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d00b      	beq.n	8002cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a34      	ldr	r2, [pc, #208]	; (8002d78 <UART_AdvFeatureConfig+0x150>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	0019      	movs	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d00b      	beq.n	8002cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a2c      	ldr	r2, [pc, #176]	; (8002d7c <UART_AdvFeatureConfig+0x154>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2220      	movs	r2, #32
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	4a25      	ldr	r2, [pc, #148]	; (8002d80 <UART_AdvFeatureConfig+0x158>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	0019      	movs	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	2240      	movs	r2, #64	; 0x40
 8002d02:	4013      	ands	r3, r2
 8002d04:	d01d      	beq.n	8002d42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <UART_AdvFeatureConfig+0x15c>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	0019      	movs	r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	035b      	lsls	r3, r3, #13
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d10b      	bne.n	8002d42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <UART_AdvFeatureConfig+0x160>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2280      	movs	r2, #128	; 0x80
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <UART_AdvFeatureConfig+0x164>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
  }
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b002      	add	sp, #8
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	fffdffff 	.word	0xfffdffff
 8002d70:	fffeffff 	.word	0xfffeffff
 8002d74:	fffbffff 	.word	0xfffbffff
 8002d78:	ffff7fff 	.word	0xffff7fff
 8002d7c:	ffffefff 	.word	0xffffefff
 8002d80:	ffffdfff 	.word	0xffffdfff
 8002d84:	ffefffff 	.word	0xffefffff
 8002d88:	ff9fffff 	.word	0xff9fffff
 8002d8c:	fff7ffff 	.word	0xfff7ffff

08002d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d9e:	f7fd fba1 	bl	80004e4 <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2208      	movs	r2, #8
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d10d      	bne.n	8002dd0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	0399      	lsls	r1, r3, #14
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <UART_CheckIdleState+0x88>)
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	0013      	movs	r3, r2
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f000 f82a 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 8002dc8:	1e03      	subs	r3, r0, #0
 8002dca:	d001      	beq.n	8002dd0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e01f      	b.n	8002e10 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d10d      	bne.n	8002dfa <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	03d9      	lsls	r1, r3, #15
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <UART_CheckIdleState+0x88>)
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	0013      	movs	r3, r2
 8002dec:	2200      	movs	r2, #0
 8002dee:	f000 f815 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 8002df2:	1e03      	subs	r3, r0, #0
 8002df4:	d001      	beq.n	8002dfa <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e00a      	b.n	8002e10 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2270      	movs	r2, #112	; 0x70
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b004      	add	sp, #16
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	01ffffff 	.word	0x01ffffff

08002e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	1dfb      	adds	r3, r7, #7
 8002e2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2c:	e029      	b.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	3301      	adds	r3, #1
 8002e32:	d026      	beq.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e34:	f7fd fb56 	bl	80004e4 <HAL_GetTick>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d302      	bcc.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d11b      	bne.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4915      	ldr	r1, [pc, #84]	; (8002eac <UART_WaitOnFlagUntilTimeout+0x90>)
 8002e56:	400a      	ands	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2101      	movs	r1, #1
 8002e66:	438a      	bics	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2270      	movs	r2, #112	; 0x70
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e00f      	b.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	425a      	negs	r2, r3
 8002e92:	4153      	adcs	r3, r2
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	001a      	movs	r2, r3
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d0c6      	beq.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b004      	add	sp, #16
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	fffffe5f 	.word	0xfffffe5f

08002eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	490a      	ldr	r1, [pc, #40]	; (8002eec <UART_EndRxTransfer+0x3c>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	438a      	bics	r2, r1
 8002ed6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	fffffedf 	.word	0xfffffedf

08002ef0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	225a      	movs	r2, #90	; 0x5a
 8002f02:	2100      	movs	r1, #0
 8002f04:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2252      	movs	r2, #82	; 0x52
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7ff fb4d 	bl	80025b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b004      	add	sp, #16
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2140      	movs	r1, #64	; 0x40
 8002f32:	438a      	bics	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff fb2b 	bl	80025a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b002      	add	sp, #8
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e03f      	b.n	8002ff6 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2249      	movs	r2, #73	; 0x49
 8002f7a:	5c9b      	ldrb	r3, [r3, r2]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d107      	bne.n	8002f92 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2248      	movs	r2, #72	; 0x48
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 feeb 	bl	8003d68 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2249      	movs	r2, #73	; 0x49
 8002f96:	2102      	movs	r1, #2
 8002f98:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	438a      	bics	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 f91d 	bl	80031ec <USART_SetConfig>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e01c      	b.n	8002ff6 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	490e      	ldr	r1, [pc, #56]	; (8003000 <HAL_USART_Init+0x9c>)
 8002fc8:	400a      	ands	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	212a      	movs	r1, #42	; 0x2a
 8002fd8:	438a      	bics	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
  
  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 fa66 	bl	80034c0 <USART_CheckIdleState>
 8002ff4:	0003      	movs	r3, r0
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b002      	add	sp, #8
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	ffffbfff 	.word	0xffffbfff

08003004 <HAL_USART_Transmit>:
  * @param  Size Amount of data to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	1dbb      	adds	r3, r7, #6
 8003012:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2249      	movs	r2, #73	; 0x49
 8003018:	5c9b      	ldrb	r3, [r3, r2]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d000      	beq.n	8003022 <HAL_USART_Transmit+0x1e>
 8003020:	e0a9      	b.n	8003176 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_USART_Transmit+0x2c>
 8003028:	1dbb      	adds	r3, r7, #6
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0a1      	b.n	8003178 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	015b      	lsls	r3, r3, #5
 800303c:	429a      	cmp	r2, r3
 800303e:	d109      	bne.n	8003054 <HAL_USART_Transmit+0x50>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2201      	movs	r2, #1
 800304c:	4013      	ands	r3, r2
 800304e:	d001      	beq.n	8003054 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e091      	b.n	8003178 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2248      	movs	r2, #72	; 0x48
 8003058:	5c9b      	ldrb	r3, [r3, r2]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_USART_Transmit+0x5e>
 800305e:	2302      	movs	r3, #2
 8003060:	e08a      	b.n	8003178 <HAL_USART_Transmit+0x174>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2248      	movs	r2, #72	; 0x48
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2249      	movs	r2, #73	; 0x49
 8003074:	2112      	movs	r1, #18
 8003076:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003078:	f7fd fa34 	bl	80004e4 <HAL_GetTick>
 800307c:	0003      	movs	r3, r0
 800307e:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1dba      	adds	r2, r7, #6
 8003084:	8812      	ldrh	r2, [r2, #0]
 8003086:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1dba      	adds	r2, r7, #6
 800308c:	8812      	ldrh	r2, [r2, #0]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	015b      	lsls	r3, r3, #5
 8003098:	429a      	cmp	r2, r3
 800309a:	d108      	bne.n	80030ae <HAL_USART_Transmit+0xaa>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d104      	bne.n	80030ae <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	e003      	b.n	80030b6 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80030b6:	e02a      	b.n	800310e <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	0013      	movs	r3, r2
 80030c2:	2200      	movs	r2, #0
 80030c4:	2180      	movs	r1, #128	; 0x80
 80030c6:	f000 f85b 	bl	8003180 <USART_WaitOnFlagUntilTimeout>
 80030ca:	1e03      	subs	r3, r0, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e052      	b.n	8003178 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	001a      	movs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	05d2      	lsls	r2, r2, #23
 80030e4:	0dd2      	lsrs	r2, r2, #23
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	3302      	adds	r3, #2
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	e007      	b.n	8003100 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3301      	adds	r3, #1
 80030fe:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1cf      	bne.n	80030b8 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	0013      	movs	r3, r2
 8003122:	2200      	movs	r2, #0
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	f000 f82b 	bl	8003180 <USART_WaitOnFlagUntilTimeout>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d001      	beq.n	8003132 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e022      	b.n	8003178 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2208      	movs	r2, #8
 8003140:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699a      	ldr	r2, [r3, #24]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2108      	movs	r1, #8
 800314e:	430a      	orrs	r2, r1
 8003150:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2110      	movs	r1, #16
 800315e:	430a      	orrs	r2, r1
 8003160:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2249      	movs	r2, #73	; 0x49
 8003166:	2101      	movs	r1, #1
 8003168:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2248      	movs	r2, #72	; 0x48
 800316e:	2100      	movs	r1, #0
 8003170:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b008      	add	sp, #32
 800317e:	bd80      	pop	{r7, pc}

08003180 <USART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	1dfb      	adds	r3, r7, #7
 800318e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003190:	e017      	b.n	80031c2 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	3301      	adds	r3, #1
 8003196:	d014      	beq.n	80031c2 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003198:	f7fd f9a4 	bl	80004e4 <HAL_GetTick>
 800319c:	0002      	movs	r2, r0
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d302      	bcc.n	80031ae <USART_WaitOnFlagUntilTimeout+0x2e>
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2249      	movs	r2, #73	; 0x49
 80031b2:	2101      	movs	r1, #1
 80031b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2248      	movs	r2, #72	; 0x48
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e00f      	b.n	80031e2 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	425a      	negs	r2, r3
 80031d2:	4153      	adcs	r3, r2
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	001a      	movs	r2, r3
 80031d8:	1dfb      	adds	r3, r7, #7
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d0d8      	beq.n	8003192 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b004      	add	sp, #16
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80031f4:	2316      	movs	r3, #22
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	0212      	lsls	r2, r2, #8
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a9d      	ldr	r2, [pc, #628]	; (8003494 <USART_SetConfig+0x2a8>)
 8003220:	4013      	ands	r3, r2
 8003222:	0019      	movs	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4313      	orrs	r3, r2
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4a8e      	ldr	r2, [pc, #568]	; (8003498 <USART_SetConfig+0x2ac>)
 8003260:	4013      	ands	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a8a      	ldr	r2, [pc, #552]	; (800349c <USART_SetConfig+0x2b0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d125      	bne.n	80032c4 <USART_SetConfig+0xd8>
 8003278:	4b89      	ldr	r3, [pc, #548]	; (80034a0 <USART_SetConfig+0x2b4>)
 800327a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327c:	2203      	movs	r2, #3
 800327e:	4013      	ands	r3, r2
 8003280:	2b01      	cmp	r3, #1
 8003282:	d00f      	beq.n	80032a4 <USART_SetConfig+0xb8>
 8003284:	d304      	bcc.n	8003290 <USART_SetConfig+0xa4>
 8003286:	2b02      	cmp	r3, #2
 8003288:	d007      	beq.n	800329a <USART_SetConfig+0xae>
 800328a:	2b03      	cmp	r3, #3
 800328c:	d00f      	beq.n	80032ae <USART_SetConfig+0xc2>
 800328e:	e013      	b.n	80032b8 <USART_SetConfig+0xcc>
 8003290:	2317      	movs	r3, #23
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
 8003298:	e05a      	b.n	8003350 <USART_SetConfig+0x164>
 800329a:	2317      	movs	r3, #23
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e055      	b.n	8003350 <USART_SetConfig+0x164>
 80032a4:	2317      	movs	r3, #23
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	2204      	movs	r2, #4
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e050      	b.n	8003350 <USART_SetConfig+0x164>
 80032ae:	2317      	movs	r3, #23
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2208      	movs	r2, #8
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e04b      	b.n	8003350 <USART_SetConfig+0x164>
 80032b8:	2317      	movs	r3, #23
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	2210      	movs	r2, #16
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	e045      	b.n	8003350 <USART_SetConfig+0x164>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a76      	ldr	r2, [pc, #472]	; (80034a4 <USART_SetConfig+0x2b8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d128      	bne.n	8003320 <USART_SetConfig+0x134>
 80032ce:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <USART_SetConfig+0x2b4>)
 80032d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d2:	220c      	movs	r2, #12
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d012      	beq.n	8003300 <USART_SetConfig+0x114>
 80032da:	d802      	bhi.n	80032e2 <USART_SetConfig+0xf6>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <USART_SetConfig+0x100>
 80032e0:	e018      	b.n	8003314 <USART_SetConfig+0x128>
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d007      	beq.n	80032f6 <USART_SetConfig+0x10a>
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d00f      	beq.n	800330a <USART_SetConfig+0x11e>
 80032ea:	e013      	b.n	8003314 <USART_SetConfig+0x128>
 80032ec:	2317      	movs	r3, #23
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e02c      	b.n	8003350 <USART_SetConfig+0x164>
 80032f6:	2317      	movs	r3, #23
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e027      	b.n	8003350 <USART_SetConfig+0x164>
 8003300:	2317      	movs	r3, #23
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	2204      	movs	r2, #4
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	e022      	b.n	8003350 <USART_SetConfig+0x164>
 800330a:	2317      	movs	r3, #23
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	2208      	movs	r2, #8
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e01d      	b.n	8003350 <USART_SetConfig+0x164>
 8003314:	2317      	movs	r3, #23
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2210      	movs	r2, #16
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	e017      	b.n	8003350 <USART_SetConfig+0x164>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a60      	ldr	r2, [pc, #384]	; (80034a8 <USART_SetConfig+0x2bc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d104      	bne.n	8003334 <USART_SetConfig+0x148>
 800332a:	2317      	movs	r3, #23
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e00d      	b.n	8003350 <USART_SetConfig+0x164>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a5c      	ldr	r2, [pc, #368]	; (80034ac <USART_SetConfig+0x2c0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d104      	bne.n	8003348 <USART_SetConfig+0x15c>
 800333e:	2317      	movs	r3, #23
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e003      	b.n	8003350 <USART_SetConfig+0x164>
 8003348:	2317      	movs	r3, #23
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	2210      	movs	r2, #16
 800334e:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8003350:	2317      	movs	r3, #23
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d867      	bhi.n	800342a <USART_SetConfig+0x23e>
 800335a:	009a      	lsls	r2, r3, #2
 800335c:	4b54      	ldr	r3, [pc, #336]	; (80034b0 <USART_SetConfig+0x2c4>)
 800335e:	18d3      	adds	r3, r2, r3
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	469f      	mov	pc, r3
  {
    case USART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate));
 8003364:	f7fe f980 	bl	8001668 <HAL_RCC_GetPCLK1Freq>
 8003368:	0003      	movs	r3, r0
 800336a:	005a      	lsls	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	18d2      	adds	r2, r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	0019      	movs	r1, r3
 800337a:	0010      	movs	r0, r2
 800337c:	f7fc fec4 	bl	8000108 <__udivsi3>
 8003380:	0003      	movs	r3, r0
 8003382:	613b      	str	r3, [r7, #16]
      break;
 8003384:	e056      	b.n	8003434 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate));
 8003386:	f7fe f985 	bl	8001694 <HAL_RCC_GetPCLK2Freq>
 800338a:	0003      	movs	r3, r0
 800338c:	005a      	lsls	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	18d2      	adds	r2, r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	0019      	movs	r1, r3
 800339c:	0010      	movs	r0, r2
 800339e:	f7fc feb3 	bl	8000108 <__udivsi3>
 80033a2:	0003      	movs	r3, r0
 80033a4:	613b      	str	r3, [r7, #16]
      break;
 80033a6:	e045      	b.n	8003434 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a8:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <USART_SetConfig+0x2b4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2210      	movs	r2, #16
 80033ae:	4013      	ands	r3, r2
 80033b0:	d00d      	beq.n	80033ce <USART_SetConfig+0x1e2>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> 2U), husart->Init.BaudRate));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	4a3e      	ldr	r2, [pc, #248]	; (80034b4 <USART_SetConfig+0x2c8>)
 80033ba:	189a      	adds	r2, r3, r2
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0019      	movs	r1, r3
 80033c2:	0010      	movs	r0, r2
 80033c4:	f7fc fea0 	bl	8000108 <__udivsi3>
 80033c8:	0003      	movs	r3, r0
 80033ca:	613b      	str	r3, [r7, #16]
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
      }
      break;
 80033cc:	e032      	b.n	8003434 <USART_SetConfig+0x248>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	4a38      	ldr	r2, [pc, #224]	; (80034b8 <USART_SetConfig+0x2cc>)
 80033d6:	189a      	adds	r2, r3, r2
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0019      	movs	r1, r3
 80033de:	0010      	movs	r0, r2
 80033e0:	f7fc fe92 	bl	8000108 <__udivsi3>
 80033e4:	0003      	movs	r3, r0
 80033e6:	613b      	str	r3, [r7, #16]
      break;
 80033e8:	e024      	b.n	8003434 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), husart->Init.BaudRate));
 80033ea:	f7fe f8af 	bl	800154c <HAL_RCC_GetSysClockFreq>
 80033ee:	0003      	movs	r3, r0
 80033f0:	005a      	lsls	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	18d2      	adds	r2, r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	0019      	movs	r1, r3
 8003400:	0010      	movs	r0, r2
 8003402:	f7fc fe81 	bl	8000108 <__udivsi3>
 8003406:	0003      	movs	r3, r0
 8003408:	613b      	str	r3, [r7, #16]
      break;
 800340a:	e013      	b.n	8003434 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	0252      	lsls	r2, r2, #9
 8003416:	189a      	adds	r2, r3, r2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	0019      	movs	r1, r3
 800341e:	0010      	movs	r0, r2
 8003420:	f7fc fe72 	bl	8000108 <__udivsi3>
 8003424:	0003      	movs	r3, r0
 8003426:	613b      	str	r3, [r7, #16]
      break;
 8003428:	e004      	b.n	8003434 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 800342a:	2316      	movs	r3, #22
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
      break;
 8003432:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b0f      	cmp	r3, #15
 8003438:	d91b      	bls.n	8003472 <USART_SetConfig+0x286>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <USART_SetConfig+0x2d0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d817      	bhi.n	8003472 <USART_SetConfig+0x286>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	b29a      	uxth	r2, r3
 8003446:	200a      	movs	r0, #10
 8003448:	183b      	adds	r3, r7, r0
 800344a:	210f      	movs	r1, #15
 800344c:	438a      	bics	r2, r1
 800344e:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	b29b      	uxth	r3, r3
 8003456:	2207      	movs	r2, #7
 8003458:	4013      	ands	r3, r2
 800345a:	b299      	uxth	r1, r3
 800345c:	183b      	adds	r3, r7, r0
 800345e:	183a      	adds	r2, r7, r0
 8003460:	8812      	ldrh	r2, [r2, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	183a      	adds	r2, r7, r0
 800346c:	8812      	ldrh	r2, [r2, #0]
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	e003      	b.n	800347a <USART_SetConfig+0x28e>
  }
  else
  {
    ret = HAL_ERROR;
 8003472:	2316      	movs	r3, #22
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8003486:	2316      	movs	r3, #22
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	781b      	ldrb	r3, [r3, #0]
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b006      	add	sp, #24
 8003492:	bd80      	pop	{r7, pc}
 8003494:	efff69f3 	.word	0xefff69f3
 8003498:	ffffc0ff 	.word	0xffffc0ff
 800349c:	40013800 	.word	0x40013800
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40004400 	.word	0x40004400
 80034a8:	40004c00 	.word	0x40004c00
 80034ac:	40005000 	.word	0x40005000
 80034b0:	080040a4 	.word	0x080040a4
 80034b4:	007a1200 	.word	0x007a1200
 80034b8:	01e84800 	.word	0x01e84800
 80034bc:	0000ffff 	.word	0x0000ffff

080034c0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034ce:	f7fd f809 	bl	80004e4 <HAL_GetTick>
 80034d2:	0003      	movs	r3, r0
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2208      	movs	r2, #8
 80034de:	4013      	ands	r3, r2
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d10e      	bne.n	8003502 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	0399      	lsls	r1, r3, #14
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	23fa      	movs	r3, #250	; 0xfa
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	0013      	movs	r3, r2
 80034f4:	2200      	movs	r2, #0
 80034f6:	f7ff fe43 	bl	8003180 <USART_WaitOnFlagUntilTimeout>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d001      	beq.n	8003502 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e01e      	b.n	8003540 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2204      	movs	r2, #4
 800350a:	4013      	ands	r3, r2
 800350c:	2b04      	cmp	r3, #4
 800350e:	d10e      	bne.n	800352e <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	03d9      	lsls	r1, r3, #15
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	23fa      	movs	r3, #250	; 0xfa
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	0013      	movs	r3, r2
 8003520:	2200      	movs	r2, #0
 8003522:	f7ff fe2d 	bl	8003180 <USART_WaitOnFlagUntilTimeout>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e008      	b.n	8003540 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2249      	movs	r2, #73	; 0x49
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2248      	movs	r2, #72	; 0x48
 800353a:	2100      	movs	r1, #0
 800353c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}

08003548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800354e:	f7fc ff73 	bl	8000438 <HAL_Init>

  //HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, 0);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003552:	f000 f8d7 	bl	8003704 <SystemClock_Config>

  //HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 1);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003556:	f000 fa87 	bl	8003a68 <MX_GPIO_Init>
  MX_RTC_Init();
 800355a:	f000 f94f 	bl	80037fc <MX_RTC_Init>
  MX_SPI1_Init();
 800355e:	f000 f9ed 	bl	800393c <MX_SPI1_Init>
  MX_USART1_Init();
 8003562:	f000 fa23 	bl	80039ac <MX_USART1_Init>
  MX_USART2_UART_Init();
 8003566:	f000 fa4f 	bl	8003a08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, 0);
 800356a:	4b5f      	ldr	r3, [pc, #380]	; (80036e8 <main+0x1a0>)
 800356c:	2200      	movs	r2, #0
 800356e:	2140      	movs	r1, #64	; 0x40
 8003570:	0018      	movs	r0, r3
 8003572:	f7fd fa9c 	bl	8000aae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 0);
 8003576:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <main+0x1a0>)
 8003578:	2200      	movs	r2, #0
 800357a:	2120      	movs	r1, #32
 800357c:	0018      	movs	r0, r3
 800357e:	f7fd fa96 	bl	8000aae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8003582:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <main+0x1a0>)
 8003584:	2200      	movs	r2, #0
 8003586:	2180      	movs	r1, #128	; 0x80
 8003588:	0018      	movs	r0, r3
 800358a:	f7fd fa90 	bl	8000aae <HAL_GPIO_WritePin>



  for (int i = 0; i < 16; i++ ){
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e013      	b.n	80035bc <main+0x74>

	  buffer[0] = NOT_SECRET_KEY[i];
 8003594:	4b55      	ldr	r3, [pc, #340]	; (80036ec <main+0x1a4>)
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	0092      	lsls	r2, r2, #2
 800359a:	58d3      	ldr	r3, [r2, r3]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4b54      	ldr	r3, [pc, #336]	; (80036f0 <main+0x1a8>)
 80035a0:	701a      	strb	r2, [r3, #0]

	  buffer[1] = '\n';
 80035a2:	4b53      	ldr	r3, [pc, #332]	; (80036f0 <main+0x1a8>)
 80035a4:	220a      	movs	r2, #10
 80035a6:	705a      	strb	r2, [r3, #1]
	  HAL_USART_Transmit(&husart1, buffer, sizeof(buffer), 1000);
 80035a8:	23fa      	movs	r3, #250	; 0xfa
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4950      	ldr	r1, [pc, #320]	; (80036f0 <main+0x1a8>)
 80035ae:	4851      	ldr	r0, [pc, #324]	; (80036f4 <main+0x1ac>)
 80035b0:	2202      	movs	r2, #2
 80035b2:	f7ff fd27 	bl	8003004 <HAL_USART_Transmit>
  for (int i = 0; i < 16; i++ ){
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3301      	adds	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	dde8      	ble.n	8003594 <main+0x4c>
  }

  for (int i = 0; i < 16; i++ ){
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	e01e      	b.n	8003606 <main+0xbe>
	  *pI = (unsigned int)i;
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <main+0x1b0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	601a      	str	r2, [r3, #0]
	  MySecretFunction(pI, data, i);
 80035d0:	4b49      	ldr	r3, [pc, #292]	; (80036f8 <main+0x1b0>)
 80035d2:	6818      	ldr	r0, [r3, #0]
 80035d4:	4b49      	ldr	r3, [pc, #292]	; (80036fc <main+0x1b4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	0019      	movs	r1, r3
 80035dc:	f000 fb1e 	bl	8003c1c <MySecretFunction>
	  buffer[0] = *data;
 80035e0:	4b46      	ldr	r3, [pc, #280]	; (80036fc <main+0x1b4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	4b41      	ldr	r3, [pc, #260]	; (80036f0 <main+0x1a8>)
 80035ea:	701a      	strb	r2, [r3, #0]

	  buffer[1] = '\n';
 80035ec:	4b40      	ldr	r3, [pc, #256]	; (80036f0 <main+0x1a8>)
 80035ee:	220a      	movs	r2, #10
 80035f0:	705a      	strb	r2, [r3, #1]
	  HAL_USART_Transmit(&husart1, buffer, sizeof(buffer), 1000);
 80035f2:	23fa      	movs	r3, #250	; 0xfa
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	493e      	ldr	r1, [pc, #248]	; (80036f0 <main+0x1a8>)
 80035f8:	483e      	ldr	r0, [pc, #248]	; (80036f4 <main+0x1ac>)
 80035fa:	2202      	movs	r2, #2
 80035fc:	f7ff fd02 	bl	8003004 <HAL_USART_Transmit>
  for (int i = 0; i < 16; i++ ){
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3301      	adds	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b0f      	cmp	r3, #15
 800360a:	dddd      	ble.n	80035c8 <main+0x80>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for (int i = 0; i < 16; i++ ){
 800360c:	2300      	movs	r3, #0
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	e010      	b.n	8003634 <main+0xec>
		  buffer[0] = NOT_SECRET_KEY[i];
 8003612:	4b36      	ldr	r3, [pc, #216]	; (80036ec <main+0x1a4>)
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	58d3      	ldr	r3, [r2, r3]
 800361a:	b2da      	uxtb	r2, r3
 800361c:	4b34      	ldr	r3, [pc, #208]	; (80036f0 <main+0x1a8>)
 800361e:	701a      	strb	r2, [r3, #0]
		  HAL_USART_Transmit(&husart1, buffer, sizeof(buffer), 1000);
 8003620:	23fa      	movs	r3, #250	; 0xfa
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4932      	ldr	r1, [pc, #200]	; (80036f0 <main+0x1a8>)
 8003626:	4833      	ldr	r0, [pc, #204]	; (80036f4 <main+0x1ac>)
 8003628:	2202      	movs	r2, #2
 800362a:	f7ff fceb 	bl	8003004 <HAL_USART_Transmit>
	  for (int i = 0; i < 16; i++ ){
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3301      	adds	r3, #1
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b0f      	cmp	r3, #15
 8003638:	ddeb      	ble.n	8003612 <main+0xca>
	  }
	  buffer[0] = '\n';
 800363a:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <main+0x1a8>)
 800363c:	220a      	movs	r2, #10
 800363e:	701a      	strb	r2, [r3, #0]
	  HAL_USART_Transmit(&husart1, buffer, sizeof(buffer), 1000);
 8003640:	23fa      	movs	r3, #250	; 0xfa
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	492a      	ldr	r1, [pc, #168]	; (80036f0 <main+0x1a8>)
 8003646:	482b      	ldr	r0, [pc, #172]	; (80036f4 <main+0x1ac>)
 8003648:	2202      	movs	r2, #2
 800364a:	f7ff fcdb 	bl	8003004 <HAL_USART_Transmit>

	  HAL_Delay(1000);
 800364e:	23fa      	movs	r3, #250	; 0xfa
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	0018      	movs	r0, r3
 8003654:	f7fc ff50 	bl	80004f8 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(BP_USER_GPIO_Port, BP_USER_Pin) == 0){
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <main+0x1a0>)
 800365a:	2104      	movs	r1, #4
 800365c:	0018      	movs	r0, r3
 800365e:	f7fd fa09 	bl	8000a74 <HAL_GPIO_ReadPin>
 8003662:	1e03      	subs	r3, r0, #0
 8003664:	d11d      	bne.n	80036a2 <main+0x15a>
		  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, 0);
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <main+0x1a0>)
 8003668:	2200      	movs	r2, #0
 800366a:	2140      	movs	r1, #64	; 0x40
 800366c:	0018      	movs	r0, r3
 800366e:	f7fd fa1e 	bl	8000aae <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 0);
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <main+0x1a0>)
 8003674:	2200      	movs	r2, #0
 8003676:	2120      	movs	r1, #32
 8003678:	0018      	movs	r0, r3
 800367a:	f7fd fa18 	bl	8000aae <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <main+0x1a0>)
 8003680:	2200      	movs	r2, #0
 8003682:	2180      	movs	r1, #128	; 0x80
 8003684:	0018      	movs	r0, r3
 8003686:	f7fd fa12 	bl	8000aae <HAL_GPIO_WritePin>
		  useless = MySecret_fct(useless+1);
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <main+0x1b8>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	3301      	adds	r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	0018      	movs	r0, r3
 8003694:	f004 fcb4 	bl	8008000 <MySecret_fct>
 8003698:	0003      	movs	r3, r0
 800369a:	001a      	movs	r2, r3
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <main+0x1b8>)
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e7b4      	b.n	800360c <main+0xc4>
	  }
	  else{
		  HAL_Delay(1000);
 80036a2:	23fa      	movs	r3, #250	; 0xfa
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7fc ff26 	bl	80004f8 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <main+0x1a0>)
 80036ae:	2120      	movs	r1, #32
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7fd fa19 	bl	8000ae8 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80036b6:	23fa      	movs	r3, #250	; 0xfa
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7fc ff1c 	bl	80004f8 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_Blue_GPIO_Port, LED_Blue_Pin);
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <main+0x1a0>)
 80036c2:	2140      	movs	r1, #64	; 0x40
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7fd fa0f 	bl	8000ae8 <HAL_GPIO_TogglePin>
		  HAL_Delay(300);
 80036ca:	2396      	movs	r3, #150	; 0x96
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7fc ff12 	bl	80004f8 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <main+0x1a0>)
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	0018      	movs	r0, r3
 80036da:	f7fd fa05 	bl	8000ae8 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 80036de:	20c8      	movs	r0, #200	; 0xc8
 80036e0:	f7fc ff0a 	bl	80004f8 <HAL_Delay>
	  for (int i = 0; i < 16; i++ ){
 80036e4:	e792      	b.n	800360c <main+0xc4>
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	50000400 	.word	0x50000400
 80036ec:	20000000 	.word	0x20000000
 80036f0:	20000080 	.word	0x20000080
 80036f4:	20000184 	.word	0x20000184
 80036f8:	20000068 	.word	0x20000068
 80036fc:	200000a8 	.word	0x200000a8
 8003700:	20000060 	.word	0x20000060

08003704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b09d      	sub	sp, #116	; 0x74
 8003708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800370a:	2438      	movs	r4, #56	; 0x38
 800370c:	193b      	adds	r3, r7, r4
 800370e:	0018      	movs	r0, r3
 8003710:	2338      	movs	r3, #56	; 0x38
 8003712:	001a      	movs	r2, r3
 8003714:	2100      	movs	r1, #0
 8003716:	f000 fc8d 	bl	8004034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800371a:	2324      	movs	r3, #36	; 0x24
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	0018      	movs	r0, r3
 8003720:	2314      	movs	r3, #20
 8003722:	001a      	movs	r2, r3
 8003724:	2100      	movs	r1, #0
 8003726:	f000 fc85 	bl	8004034 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800372a:	003b      	movs	r3, r7
 800372c:	0018      	movs	r0, r3
 800372e:	2324      	movs	r3, #36	; 0x24
 8003730:	001a      	movs	r2, r3
 8003732:	2100      	movs	r1, #0
 8003734:	f000 fc7e 	bl	8004034 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003738:	4b2e      	ldr	r3, [pc, #184]	; (80037f4 <SystemClock_Config+0xf0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2e      	ldr	r2, [pc, #184]	; (80037f8 <SystemClock_Config+0xf4>)
 800373e:	401a      	ands	r2, r3
 8003740:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <SystemClock_Config+0xf0>)
 8003742:	2180      	movs	r1, #128	; 0x80
 8003744:	0109      	lsls	r1, r1, #4
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800374a:	0021      	movs	r1, r4
 800374c:	187b      	adds	r3, r7, r1
 800374e:	220a      	movs	r2, #10
 8003750:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003752:	187b      	adds	r3, r7, r1
 8003754:	2201      	movs	r2, #1
 8003756:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003758:	187b      	adds	r3, r7, r1
 800375a:	2210      	movs	r2, #16
 800375c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800375e:	187b      	adds	r3, r7, r1
 8003760:	2201      	movs	r2, #1
 8003762:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003764:	187b      	adds	r3, r7, r1
 8003766:	2202      	movs	r2, #2
 8003768:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800376a:	187b      	adds	r3, r7, r1
 800376c:	2200      	movs	r2, #0
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8003770:	187b      	adds	r3, r7, r1
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	0312      	lsls	r2, r2, #12
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8003778:	187b      	adds	r3, r7, r1
 800377a:	2280      	movs	r2, #128	; 0x80
 800377c:	0412      	lsls	r2, r2, #16
 800377e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003780:	187b      	adds	r3, r7, r1
 8003782:	0018      	movs	r0, r3
 8003784:	f7fd f9e8 	bl	8000b58 <HAL_RCC_OscConfig>
 8003788:	1e03      	subs	r3, r0, #0
 800378a:	d001      	beq.n	8003790 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800378c:	f000 fa4b 	bl	8003c26 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003790:	2124      	movs	r1, #36	; 0x24
 8003792:	187b      	adds	r3, r7, r1
 8003794:	220f      	movs	r2, #15
 8003796:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003798:	187b      	adds	r3, r7, r1
 800379a:	2203      	movs	r2, #3
 800379c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2200      	movs	r2, #0
 80037a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	2200      	movs	r2, #0
 80037ae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	2101      	movs	r1, #1
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fd fd9f 	bl	80012f8 <HAL_RCC_ClockConfig>
 80037ba:	1e03      	subs	r3, r0, #0
 80037bc:	d001      	beq.n	80037c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80037be:	f000 fa32 	bl	8003c26 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80037c2:	003b      	movs	r3, r7
 80037c4:	2223      	movs	r2, #35	; 0x23
 80037c6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037c8:	003b      	movs	r3, r7
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037ce:	003b      	movs	r3, r7
 80037d0:	2200      	movs	r2, #0
 80037d2:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80037d4:	003b      	movs	r3, r7
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	0292      	lsls	r2, r2, #10
 80037da:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037dc:	003b      	movs	r3, r7
 80037de:	0018      	movs	r0, r3
 80037e0:	f7fd ff6e 	bl	80016c0 <HAL_RCCEx_PeriphCLKConfig>
 80037e4:	1e03      	subs	r3, r0, #0
 80037e6:	d001      	beq.n	80037ec <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80037e8:	f000 fa1d 	bl	8003c26 <Error_Handler>
  }
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b01d      	add	sp, #116	; 0x74
 80037f2:	bd90      	pop	{r4, r7, pc}
 80037f4:	40007000 	.word	0x40007000
 80037f8:	ffffe7ff 	.word	0xffffe7ff

080037fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b090      	sub	sp, #64	; 0x40
 8003800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003802:	232c      	movs	r3, #44	; 0x2c
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	0018      	movs	r0, r3
 8003808:	2314      	movs	r3, #20
 800380a:	001a      	movs	r2, r3
 800380c:	2100      	movs	r1, #0
 800380e:	f000 fc11 	bl	8004034 <memset>
  RTC_DateTypeDef sDate = {0};
 8003812:	2328      	movs	r3, #40	; 0x28
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800381a:	003b      	movs	r3, r7
 800381c:	0018      	movs	r0, r3
 800381e:	2328      	movs	r3, #40	; 0x28
 8003820:	001a      	movs	r2, r3
 8003822:	2100      	movs	r1, #0
 8003824:	f000 fc06 	bl	8004034 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8003828:	4b41      	ldr	r3, [pc, #260]	; (8003930 <MX_RTC_Init+0x134>)
 800382a:	4a42      	ldr	r2, [pc, #264]	; (8003934 <MX_RTC_Init+0x138>)
 800382c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800382e:	4b40      	ldr	r3, [pc, #256]	; (8003930 <MX_RTC_Init+0x134>)
 8003830:	2200      	movs	r2, #0
 8003832:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8003834:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <MX_RTC_Init+0x134>)
 8003836:	221f      	movs	r2, #31
 8003838:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 800383a:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <MX_RTC_Init+0x134>)
 800383c:	4a3e      	ldr	r2, [pc, #248]	; (8003938 <MX_RTC_Init+0x13c>)
 800383e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003840:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <MX_RTC_Init+0x134>)
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003846:	4b3a      	ldr	r3, [pc, #232]	; (8003930 <MX_RTC_Init+0x134>)
 8003848:	2200      	movs	r2, #0
 800384a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800384c:	4b38      	ldr	r3, [pc, #224]	; (8003930 <MX_RTC_Init+0x134>)
 800384e:	2200      	movs	r2, #0
 8003850:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003852:	4b37      	ldr	r3, [pc, #220]	; (8003930 <MX_RTC_Init+0x134>)
 8003854:	2200      	movs	r2, #0
 8003856:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003858:	4b35      	ldr	r3, [pc, #212]	; (8003930 <MX_RTC_Init+0x134>)
 800385a:	0018      	movs	r0, r3
 800385c:	f7fe f888 	bl	8001970 <HAL_RTC_Init>
 8003860:	1e03      	subs	r3, r0, #0
 8003862:	d001      	beq.n	8003868 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003864:	f000 f9df 	bl	8003c26 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	187b      	adds	r3, r7, r1
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003870:	187b      	adds	r3, r7, r1
 8003872:	2200      	movs	r2, #0
 8003874:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003876:	187b      	adds	r3, r7, r1
 8003878:	2200      	movs	r2, #0
 800387a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800387c:	187b      	adds	r3, r7, r1
 800387e:	2200      	movs	r2, #0
 8003880:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003882:	187b      	adds	r3, r7, r1
 8003884:	2200      	movs	r2, #0
 8003886:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003888:	1879      	adds	r1, r7, r1
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <MX_RTC_Init+0x134>)
 800388c:	2200      	movs	r2, #0
 800388e:	0018      	movs	r0, r3
 8003890:	f7fe f90c 	bl	8001aac <HAL_RTC_SetTime>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d001      	beq.n	800389c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003898:	f000 f9c5 	bl	8003c26 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800389c:	2128      	movs	r1, #40	; 0x28
 800389e:	187b      	adds	r3, r7, r1
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	2201      	movs	r2, #1
 80038a8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80038aa:	187b      	adds	r3, r7, r1
 80038ac:	2201      	movs	r2, #1
 80038ae:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80038b0:	187b      	adds	r3, r7, r1
 80038b2:	2200      	movs	r2, #0
 80038b4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80038b6:	1879      	adds	r1, r7, r1
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <MX_RTC_Init+0x134>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	0018      	movs	r0, r3
 80038be:	f7fe f9b9 	bl	8001c34 <HAL_RTC_SetDate>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d001      	beq.n	80038ca <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80038c6:	f000 f9ae 	bl	8003c26 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 80038ca:	003b      	movs	r3, r7
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80038d0:	003b      	movs	r3, r7
 80038d2:	2200      	movs	r2, #0
 80038d4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80038d6:	003b      	movs	r3, r7
 80038d8:	2200      	movs	r2, #0
 80038da:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80038dc:	003b      	movs	r3, r7
 80038de:	2200      	movs	r2, #0
 80038e0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038e2:	003b      	movs	r3, r7
 80038e4:	2200      	movs	r2, #0
 80038e6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038e8:	003b      	movs	r3, r7
 80038ea:	2200      	movs	r2, #0
 80038ec:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80038ee:	003b      	movs	r3, r7
 80038f0:	2200      	movs	r2, #0
 80038f2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80038f4:	003b      	movs	r3, r7
 80038f6:	22f0      	movs	r2, #240	; 0xf0
 80038f8:	0512      	lsls	r2, r2, #20
 80038fa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80038fc:	003b      	movs	r3, r7
 80038fe:	2200      	movs	r2, #0
 8003900:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003902:	003b      	movs	r3, r7
 8003904:	2220      	movs	r2, #32
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800390a:	003b      	movs	r3, r7
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	0052      	lsls	r2, r2, #1
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003912:	0039      	movs	r1, r7
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <MX_RTC_Init+0x134>)
 8003916:	2200      	movs	r2, #0
 8003918:	0018      	movs	r0, r3
 800391a:	f7fe fa39 	bl	8001d90 <HAL_RTC_SetAlarm_IT>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d001      	beq.n	8003926 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003922:	f000 f980 	bl	8003c26 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b010      	add	sp, #64	; 0x40
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	20000084 	.word	0x20000084
 8003934:	40002800 	.word	0x40002800
 8003938:	000003ff 	.word	0x000003ff

0800393c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <MX_SPI1_Init+0x68>)
 8003942:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <MX_SPI1_Init+0x6c>)
 8003944:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003946:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <MX_SPI1_Init+0x68>)
 8003948:	2282      	movs	r2, #130	; 0x82
 800394a:	0052      	lsls	r2, r2, #1
 800394c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800394e:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <MX_SPI1_Init+0x68>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003954:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <MX_SPI1_Init+0x68>)
 8003956:	2200      	movs	r2, #0
 8003958:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <MX_SPI1_Init+0x68>)
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <MX_SPI1_Init+0x68>)
 8003962:	2200      	movs	r2, #0
 8003964:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003966:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <MX_SPI1_Init+0x68>)
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	0092      	lsls	r2, r2, #2
 800396c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800396e:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <MX_SPI1_Init+0x68>)
 8003970:	2220      	movs	r2, #32
 8003972:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <MX_SPI1_Init+0x68>)
 8003976:	2200      	movs	r2, #0
 8003978:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <MX_SPI1_Init+0x68>)
 800397c:	2200      	movs	r2, #0
 800397e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <MX_SPI1_Init+0x68>)
 8003982:	2200      	movs	r2, #0
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003986:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <MX_SPI1_Init+0x68>)
 8003988:	2207      	movs	r2, #7
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <MX_SPI1_Init+0x68>)
 800398e:	0018      	movs	r0, r3
 8003990:	f7fe fc22 	bl	80021d8 <HAL_SPI_Init>
 8003994:	1e03      	subs	r3, r0, #0
 8003996:	d001      	beq.n	800399c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003998:	f000 f945 	bl	8003c26 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	200000ac 	.word	0x200000ac
 80039a8:	40013000 	.word	0x40013000

080039ac <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80039b0:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <MX_USART1_Init+0x54>)
 80039b2:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <MX_USART1_Init+0x58>)
 80039b4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80039b6:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <MX_USART1_Init+0x54>)
 80039b8:	22e1      	movs	r2, #225	; 0xe1
 80039ba:	0252      	lsls	r2, r2, #9
 80039bc:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <MX_USART1_Init+0x54>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80039c4:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <MX_USART1_Init+0x54>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80039ca:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <MX_USART1_Init+0x54>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <MX_USART1_Init+0x54>)
 80039d2:	220c      	movs	r2, #12
 80039d4:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <MX_USART1_Init+0x54>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <MX_USART1_Init+0x54>)
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <MX_USART1_Init+0x54>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <MX_USART1_Init+0x54>)
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7ff faba 	bl	8002f64 <HAL_USART_Init>
 80039f0:	1e03      	subs	r3, r0, #0
 80039f2:	d001      	beq.n	80039f8 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 80039f4:	f000 f917 	bl	8003c26 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	20000184 	.word	0x20000184
 8003a04:	40013800 	.word	0x40013800

08003a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a0e:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <MX_USART2_UART_Init+0x5c>)
 8003a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a14:	22e1      	movs	r2, #225	; 0xe1
 8003a16:	0252      	lsls	r2, r2, #9
 8003a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a1a:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a20:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a26:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a2e:	220c      	movs	r2, #12
 8003a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a32:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <MX_USART2_UART_Init+0x58>)
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7fe fc2d 	bl	80022ac <HAL_UART_Init>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d001      	beq.n	8003a5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003a56:	f000 f8e6 	bl	8003c26 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20000104 	.word	0x20000104
 8003a64:	40004400 	.word	0x40004400

08003a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b08b      	sub	sp, #44	; 0x2c
 8003a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6e:	2414      	movs	r4, #20
 8003a70:	193b      	adds	r3, r7, r4
 8003a72:	0018      	movs	r0, r3
 8003a74:	2314      	movs	r3, #20
 8003a76:	001a      	movs	r2, r3
 8003a78:	2100      	movs	r1, #0
 8003a7a:	f000 fadb 	bl	8004034 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	4b62      	ldr	r3, [pc, #392]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a82:	4b61      	ldr	r3, [pc, #388]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003a84:	2101      	movs	r1, #1
 8003a86:	430a      	orrs	r2, r1
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a8a:	4b5f      	ldr	r3, [pc, #380]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	2201      	movs	r2, #1
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a96:	4b5c      	ldr	r3, [pc, #368]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9a:	4b5b      	ldr	r3, [pc, #364]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003a9c:	2102      	movs	r1, #2
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aa2:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aae:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab2:	4b55      	ldr	r3, [pc, #340]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003ab4:	2104      	movs	r1, #4
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aba:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	2204      	movs	r2, #4
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ac6:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aca:	4b4f      	ldr	r3, [pc, #316]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ad2:	4b4d      	ldr	r3, [pc, #308]	; (8003c08 <MX_GPIO_Init+0x1a0>)
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	4013      	ands	r3, r2
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 8003ade:	494b      	ldr	r1, [pc, #300]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003ae0:	23a0      	movs	r3, #160	; 0xa0
 8003ae2:	05db      	lsls	r3, r3, #23
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7fc ffe1 	bl	8000aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Green_Pin|LED_Blue_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8003aec:	4b48      	ldr	r3, [pc, #288]	; (8003c10 <MX_GPIO_Init+0x1a8>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	21e0      	movs	r1, #224	; 0xe0
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7fc ffdb 	bl	8000aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 8003af8:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <MX_GPIO_Init+0x1ac>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	2107      	movs	r1, #7
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7fc ffd5 	bl	8000aae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 8003b04:	193b      	adds	r3, r7, r4
 8003b06:	4a41      	ldr	r2, [pc, #260]	; (8003c0c <MX_GPIO_Init+0x1a4>)
 8003b08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0a:	193b      	adds	r3, r7, r4
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	193b      	adds	r3, r7, r4
 8003b12:	2200      	movs	r2, #0
 8003b14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	2202      	movs	r2, #2
 8003b1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1c:	193a      	adds	r2, r7, r4
 8003b1e:	23a0      	movs	r3, #160	; 0xa0
 8003b20:	05db      	lsls	r3, r3, #23
 8003b22:	0011      	movs	r1, r2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7fc fe27 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Green_Pin LED_Blue_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Blue_Pin|LED_Red_Pin;
 8003b2a:	0021      	movs	r1, r4
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	22e0      	movs	r2, #224	; 0xe0
 8003b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2201      	movs	r2, #1
 8003b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3e:	187b      	adds	r3, r7, r1
 8003b40:	2200      	movs	r2, #0
 8003b42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b44:	000c      	movs	r4, r1
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	4a31      	ldr	r2, [pc, #196]	; (8003c10 <MX_GPIO_Init+0x1a8>)
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	0010      	movs	r0, r2
 8003b4e:	f7fc fe13 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 8003b52:	0021      	movs	r1, r4
 8003b54:	187b      	adds	r3, r7, r1
 8003b56:	2213      	movs	r2, #19
 8003b58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b5a:	187b      	adds	r3, r7, r1
 8003b5c:	4a2e      	ldr	r2, [pc, #184]	; (8003c18 <MX_GPIO_Init+0x1b0>)
 8003b5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	187b      	adds	r3, r7, r1
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b66:	000c      	movs	r4, r1
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <MX_GPIO_Init+0x1a8>)
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	0010      	movs	r0, r2
 8003b70:	f7fc fe02 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8003b74:	0021      	movs	r1, r4
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	2280      	movs	r2, #128	; 0x80
 8003b7a:	0192      	lsls	r2, r2, #6
 8003b7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	4a25      	ldr	r2, [pc, #148]	; (8003c18 <MX_GPIO_Init+0x1b0>)
 8003b82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	2200      	movs	r2, #0
 8003b88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8003b8a:	000c      	movs	r4, r1
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	4a21      	ldr	r2, [pc, #132]	; (8003c14 <MX_GPIO_Init+0x1ac>)
 8003b90:	0019      	movs	r1, r3
 8003b92:	0010      	movs	r0, r2
 8003b94:	f7fc fdf0 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8003b98:	0021      	movs	r1, r4
 8003b9a:	187b      	adds	r3, r7, r1
 8003b9c:	2207      	movs	r2, #7
 8003b9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	2200      	movs	r2, #0
 8003baa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	2202      	movs	r2, #2
 8003bb0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bb2:	000c      	movs	r4, r1
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	4a17      	ldr	r2, [pc, #92]	; (8003c14 <MX_GPIO_Init+0x1ac>)
 8003bb8:	0019      	movs	r1, r3
 8003bba:	0010      	movs	r0, r2
 8003bbc:	f7fc fddc 	bl	8000778 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP_USER_Pin */
  GPIO_InitStruct.Pin = BP_USER_Pin;
 8003bc0:	0021      	movs	r1, r4
 8003bc2:	187b      	adds	r3, r7, r1
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	2200      	movs	r2, #0
 8003bcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003bce:	187b      	adds	r3, r7, r1
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BP_USER_GPIO_Port, &GPIO_InitStruct);
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	4a0e      	ldr	r2, [pc, #56]	; (8003c10 <MX_GPIO_Init+0x1a8>)
 8003bd8:	0019      	movs	r1, r3
 8003bda:	0010      	movs	r0, r2
 8003bdc:	f7fc fdcc 	bl	8000778 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003be0:	2200      	movs	r2, #0
 8003be2:	2100      	movs	r1, #0
 8003be4:	2005      	movs	r0, #5
 8003be6:	f7fc fd4d 	bl	8000684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003bea:	2005      	movs	r0, #5
 8003bec:	f7fc fd5f 	bl	80006ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	2007      	movs	r0, #7
 8003bf6:	f7fc fd45 	bl	8000684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003bfa:	2007      	movs	r0, #7
 8003bfc:	f7fc fd57 	bl	80006ae <HAL_NVIC_EnableIRQ>

}
 8003c00:	46c0      	nop			; (mov r8, r8)
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b00b      	add	sp, #44	; 0x2c
 8003c06:	bd90      	pop	{r4, r7, pc}
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	00009002 	.word	0x00009002
 8003c10:	50000400 	.word	0x50000400
 8003c14:	50000800 	.word	0x50000800
 8003c18:	10110000 	.word	0x10110000

08003c1c <MySecretFunction>:

/* USER CODE BEGIN 4 */

void MySecretFunction(void){
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0

}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <HAL_MspInit+0x24>)
 8003c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_MspInit+0x24>)
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <HAL_MspInit+0x24>)
 8003c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <HAL_MspInit+0x24>)
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	0549      	lsls	r1, r1, #21
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000

08003c58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0a      	ldr	r2, [pc, #40]	; (8003c90 <HAL_RTC_MspInit+0x38>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10e      	bne.n	8003c88 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <HAL_RTC_MspInit+0x3c>)
 8003c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c6e:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_RTC_MspInit+0x3c>)
 8003c70:	2180      	movs	r1, #128	; 0x80
 8003c72:	02c9      	lsls	r1, r1, #11
 8003c74:	430a      	orrs	r2, r1
 8003c76:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	f7fc fd01 	bl	8000684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003c82:	2002      	movs	r0, #2
 8003c84:	f7fc fd13 	bl	80006ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40002800 	.word	0x40002800
 8003c94:	40021000 	.word	0x40021000

08003c98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	b08b      	sub	sp, #44	; 0x2c
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	2314      	movs	r3, #20
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	2314      	movs	r3, #20
 8003ca8:	001a      	movs	r2, r3
 8003caa:	2100      	movs	r1, #0
 8003cac:	f000 f9c2 	bl	8004034 <memset>
  if(hspi->Instance==SPI1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a29      	ldr	r2, [pc, #164]	; (8003d5c <HAL_SPI_MspInit+0xc4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d14c      	bne.n	8003d54 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cba:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <HAL_SPI_MspInit+0xc8>)
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbe:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <HAL_SPI_MspInit+0xc8>)
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	0149      	lsls	r1, r1, #5
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc8:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <HAL_SPI_MspInit+0xc8>)
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_SPI_MspInit+0xc8>)
 8003cce:	2102      	movs	r1, #2
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_SPI_MspInit+0xc8>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	2202      	movs	r2, #2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <HAL_SPI_MspInit+0xc8>)
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <HAL_SPI_MspInit+0xc8>)
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cec:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <HAL_SPI_MspInit+0xc8>)
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8003cf8:	2114      	movs	r1, #20
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	2202      	movs	r2, #2
 8003d04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2203      	movs	r2, #3
 8003d10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2200      	movs	r2, #0
 8003d16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8003d18:	000c      	movs	r4, r1
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	4a11      	ldr	r2, [pc, #68]	; (8003d64 <HAL_SPI_MspInit+0xcc>)
 8003d1e:	0019      	movs	r1, r3
 8003d20:	0010      	movs	r0, r2
 8003d22:	f7fc fd29 	bl	8000778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8003d26:	0021      	movs	r1, r4
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	22c0      	movs	r2, #192	; 0xc0
 8003d2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2e:	187b      	adds	r3, r7, r1
 8003d30:	2202      	movs	r2, #2
 8003d32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3a:	187b      	adds	r3, r7, r1
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	187a      	adds	r2, r7, r1
 8003d48:	23a0      	movs	r3, #160	; 0xa0
 8003d4a:	05db      	lsls	r3, r3, #23
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7fc fd12 	bl	8000778 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b00b      	add	sp, #44	; 0x2c
 8003d5a:	bd90      	pop	{r4, r7, pc}
 8003d5c:	40013000 	.word	0x40013000
 8003d60:	40021000 	.word	0x40021000
 8003d64:	50000400 	.word	0x50000400

08003d68 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d70:	230c      	movs	r3, #12
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	0018      	movs	r0, r3
 8003d76:	2314      	movs	r3, #20
 8003d78:	001a      	movs	r2, r3
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	f000 f95a 	bl	8004034 <memset>
  if(husart->Instance==USART1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <HAL_USART_MspInit+0x80>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d12a      	bne.n	8003de0 <HAL_USART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d8a:	4b18      	ldr	r3, [pc, #96]	; (8003dec <HAL_USART_MspInit+0x84>)
 8003d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <HAL_USART_MspInit+0x84>)
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	01c9      	lsls	r1, r1, #7
 8003d94:	430a      	orrs	r2, r1
 8003d96:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d98:	4b14      	ldr	r3, [pc, #80]	; (8003dec <HAL_USART_MspInit+0x84>)
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_USART_MspInit+0x84>)
 8003d9e:	2101      	movs	r1, #1
 8003da0:	430a      	orrs	r2, r1
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003da4:	4b11      	ldr	r3, [pc, #68]	; (8003dec <HAL_USART_MspInit+0x84>)
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	2201      	movs	r2, #1
 8003daa:	4013      	ands	r3, r2
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8|GPIO_PIN_9;
 8003db0:	210c      	movs	r1, #12
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	22e0      	movs	r2, #224	; 0xe0
 8003db6:	00d2      	lsls	r2, r2, #3
 8003db8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc6:	187b      	adds	r3, r7, r1
 8003dc8:	2203      	movs	r2, #3
 8003dca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	2204      	movs	r2, #4
 8003dd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd2:	187a      	adds	r2, r7, r1
 8003dd4:	23a0      	movs	r3, #160	; 0xa0
 8003dd6:	05db      	lsls	r3, r3, #23
 8003dd8:	0011      	movs	r1, r2
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7fc fccc 	bl	8000778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b008      	add	sp, #32
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40013800 	.word	0x40013800
 8003dec:	40021000 	.word	0x40021000

08003df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df8:	230c      	movs	r3, #12
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	2314      	movs	r3, #20
 8003e00:	001a      	movs	r2, r3
 8003e02:	2100      	movs	r1, #0
 8003e04:	f000 f916 	bl	8004034 <memset>
  if(huart->Instance==USART2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <HAL_UART_MspInit+0x90>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d131      	bne.n	8003e76 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <HAL_UART_MspInit+0x94>)
 8003e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e16:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <HAL_UART_MspInit+0x94>)
 8003e18:	2180      	movs	r1, #128	; 0x80
 8003e1a:	0289      	lsls	r1, r1, #10
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e20:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <HAL_UART_MspInit+0x94>)
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <HAL_UART_MspInit+0x94>)
 8003e26:	2101      	movs	r1, #1
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e2c:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <HAL_UART_MspInit+0x94>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	2201      	movs	r2, #1
 8003e32:	4013      	ands	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003e38:	210c      	movs	r1, #12
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	220c      	movs	r2, #12
 8003e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	2202      	movs	r2, #2
 8003e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	2200      	movs	r2, #0
 8003e4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	2203      	movs	r2, #3
 8003e50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	2204      	movs	r2, #4
 8003e56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e58:	187a      	adds	r2, r7, r1
 8003e5a:	23a0      	movs	r3, #160	; 0xa0
 8003e5c:	05db      	lsls	r3, r3, #23
 8003e5e:	0011      	movs	r1, r2
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7fc fc89 	bl	8000778 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2100      	movs	r1, #0
 8003e6a:	201c      	movs	r0, #28
 8003e6c:	f7fc fc0a 	bl	8000684 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e70:	201c      	movs	r0, #28
 8003e72:	f7fc fc1c 	bl	80006ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b008      	add	sp, #32
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	40004400 	.word	0x40004400
 8003e84:	40021000 	.word	0x40021000

08003e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e96:	e7fe      	b.n	8003e96 <HardFault_Handler+0x4>

08003e98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e9c:	46c0      	nop			; (mov r8, r8)
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eb0:	f7fc fb0c 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <RTC_IRQHandler+0x14>)
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fe f8b0 	bl	8002028 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	20000084 	.word	0x20000084

08003ed4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f7fc fe17 	bl	8000b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003ede:	2002      	movs	r0, #2
 8003ee0:	f7fc fe14 	bl	8000b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003eee:	2010      	movs	r0, #16
 8003ef0:	f7fc fe0c 	bl	8000b0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	019b      	lsls	r3, r3, #6
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7fc fe07 	bl	8000b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <USART2_IRQHandler+0x14>)
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fe fa22 	bl	8002354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	20000104 	.word	0x20000104

08003f1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003f20:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <SystemInit+0x64>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <SystemInit+0x64>)
 8003f26:	2180      	movs	r1, #128	; 0x80
 8003f28:	0049      	lsls	r1, r1, #1
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003f2e:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <SystemInit+0x64>)
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <SystemInit+0x64>)
 8003f34:	4913      	ldr	r1, [pc, #76]	; (8003f84 <SystemInit+0x68>)
 8003f36:	400a      	ands	r2, r1
 8003f38:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <SystemInit+0x64>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <SystemInit+0x64>)
 8003f40:	4911      	ldr	r1, [pc, #68]	; (8003f88 <SystemInit+0x6c>)
 8003f42:	400a      	ands	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <SystemInit+0x64>)
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <SystemInit+0x64>)
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	438a      	bics	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <SystemInit+0x64>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <SystemInit+0x64>)
 8003f58:	490c      	ldr	r1, [pc, #48]	; (8003f8c <SystemInit+0x70>)
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <SystemInit+0x64>)
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <SystemInit+0x64>)
 8003f64:	490a      	ldr	r1, [pc, #40]	; (8003f90 <SystemInit+0x74>)
 8003f66:	400a      	ands	r2, r1
 8003f68:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003f6a:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <SystemInit+0x64>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <SystemInit+0x78>)
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	0512      	lsls	r2, r2, #20
 8003f76:	609a      	str	r2, [r3, #8]
#endif
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	40021000 	.word	0x40021000
 8003f84:	88ff400c 	.word	0x88ff400c
 8003f88:	fef6fff6 	.word	0xfef6fff6
 8003f8c:	fffbffff 	.word	0xfffbffff
 8003f90:	ff02ffff 	.word	0xff02ffff
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003f98:	480d      	ldr	r0, [pc, #52]	; (8003fd0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003f9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003f9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f9e:	e003      	b.n	8003fa8 <LoopCopyDataInit>

08003fa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003fa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003fa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003fa6:	3104      	adds	r1, #4

08003fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003fa8:	480b      	ldr	r0, [pc, #44]	; (8003fd8 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <LoopForever+0xe>)
  adds  r2, r0, r1
 8003fac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003fae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003fb0:	d3f6      	bcc.n	8003fa0 <CopyDataInit>
  ldr  r2, =_sbss
 8003fb2:	4a0b      	ldr	r2, [pc, #44]	; (8003fe0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003fb4:	e002      	b.n	8003fbc <LoopFillZerobss>

08003fb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003fb6:	2300      	movs	r3, #0
  str  r3, [r2]
 8003fb8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fba:	3204      	adds	r2, #4

08003fbc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003fbc:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <LoopForever+0x16>)
  cmp  r2, r3
 8003fbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003fc0:	d3f9      	bcc.n	8003fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003fc2:	f7ff ffab 	bl	8003f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fc6:	f000 f811 	bl	8003fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fca:	f7ff fabd 	bl	8003548 <main>

08003fce <LoopForever>:

LoopForever:
    b LoopForever
 8003fce:	e7fe      	b.n	8003fce <LoopForever>
   ldr   r0, =_estack
 8003fd0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003fd4:	080040fc 	.word	0x080040fc
  ldr  r0, =_sdata
 8003fd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fdc:	20000044 	.word	0x20000044
  ldr  r2, =_sbss
 8003fe0:	20000044 	.word	0x20000044
  ldr  r3, = _ebss
 8003fe4:	200001e8 	.word	0x200001e8

08003fe8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fe8:	e7fe      	b.n	8003fe8 <ADC1_COMP_IRQHandler>
	...

08003fec <__libc_init_array>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	2600      	movs	r6, #0
 8003ff0:	4d0c      	ldr	r5, [pc, #48]	; (8004024 <__libc_init_array+0x38>)
 8003ff2:	4c0d      	ldr	r4, [pc, #52]	; (8004028 <__libc_init_array+0x3c>)
 8003ff4:	1b64      	subs	r4, r4, r5
 8003ff6:	10a4      	asrs	r4, r4, #2
 8003ff8:	42a6      	cmp	r6, r4
 8003ffa:	d109      	bne.n	8004010 <__libc_init_array+0x24>
 8003ffc:	2600      	movs	r6, #0
 8003ffe:	f000 f821 	bl	8004044 <_init>
 8004002:	4d0a      	ldr	r5, [pc, #40]	; (800402c <__libc_init_array+0x40>)
 8004004:	4c0a      	ldr	r4, [pc, #40]	; (8004030 <__libc_init_array+0x44>)
 8004006:	1b64      	subs	r4, r4, r5
 8004008:	10a4      	asrs	r4, r4, #2
 800400a:	42a6      	cmp	r6, r4
 800400c:	d105      	bne.n	800401a <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	00b3      	lsls	r3, r6, #2
 8004012:	58eb      	ldr	r3, [r5, r3]
 8004014:	4798      	blx	r3
 8004016:	3601      	adds	r6, #1
 8004018:	e7ee      	b.n	8003ff8 <__libc_init_array+0xc>
 800401a:	00b3      	lsls	r3, r6, #2
 800401c:	58eb      	ldr	r3, [r5, r3]
 800401e:	4798      	blx	r3
 8004020:	3601      	adds	r6, #1
 8004022:	e7f2      	b.n	800400a <__libc_init_array+0x1e>
 8004024:	080040f4 	.word	0x080040f4
 8004028:	080040f4 	.word	0x080040f4
 800402c:	080040f4 	.word	0x080040f4
 8004030:	080040f8 	.word	0x080040f8

08004034 <memset>:
 8004034:	0003      	movs	r3, r0
 8004036:	1812      	adds	r2, r2, r0
 8004038:	4293      	cmp	r3, r2
 800403a:	d100      	bne.n	800403e <memset+0xa>
 800403c:	4770      	bx	lr
 800403e:	7019      	strb	r1, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	e7f9      	b.n	8004038 <memset+0x4>

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr
